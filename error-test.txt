ubuntu-adams@DESKTOP-RDK5HMQ:/mnt/d/projet perso/templates/Innov_stocker_app/innov-stocker.node$ npm run test:all

> innov-stocker.node@0.0.1 test:all
> bash ./src/tests/test-with-clean-db.sh

[TEST] Stopping and removing containers/volumes...

> innov-stocker.node@0.0.1 test-db:stop
> docker compose -f src/tests/docker-compose.yml down -v

[+] Running 5/5
 ✔ Container mailhog-test      Removed                                                                                                              1.4s 
 ✔ Container redis-test        Removed                                                                                                              1.5s 
 ✔ Container mysql-test        Removed                                                                                                              3.8s 
 ✔ Volume tests_redis_data     Removed                                                                                                              0.0s 
 ✔ Network tests_test_network  Removed                                                                                                              0.8s 
[TEST] Starting containers...

> innov-stocker.node@0.0.1 test-db:start
> docker compose -f src/tests/docker-compose.yml up --build -d

[+] Running 5/5
 ✔ Network tests_test_network  Created                                                                                                              0.1s 
 ✔ Volume "tests_redis_data"   Created                                                                                                              0.0s 
 ✔ Container mailhog-test      Started                                                                                                              0.9s 
 ✔ Container mysql-test        Started                                                                                                              1.0s 
 ✔ Container redis-test        Started                                                                                                              0.9s 
[TEST] Waiting for services to be healthy...
[TEST] Running tests...

> innov-stocker.node@0.0.1 test
> cross-env NODE_ENV=test dotenv -e .env.test vitest run --color


 RUN  v3.2.4 /mnt/d/projet perso/templates/Innov_stocker_app/innov-stocker.node

stdout | src/modules/auth/__tests__/login.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/auth/__tests__/login.spec.ts
Avant init DB

stdout | src/modules/auth/__tests__/login.spec.ts
Après init DB
Avant init Redis

stdout | src/modules/auth/__tests__/login.spec.ts
Après init Redis

stdout | src/modules/auth/__tests__/login.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/auth/__tests__/login.spec.ts (24 tests | 4 failed) 4873ms
   ✓ Auth API > POST /auth/login > should fail with missing credentials 11ms
   ✓ Auth API > POST /auth/login > should fail with wrong credentials 107ms
   ✓ Auth API > POST /auth/login > should login successfully 117ms
   ✓ Auth API > POST /auth/login > should fail to login if user is inactive 74ms
   ✓ Auth API > POST /auth/login > should fail to login if user permissions have expired 54ms
   ✓ Auth API > POST /auth/login > should login successfully if user permissions have not expired 169ms
   ✓ Auth API > POST /auth/logout > should fail without token 9ms
   × Auth API > POST /auth/logout > should logout successfully 137ms
     → expected 401 to be 200 // Object.is equality
   ✓ Auth API > POST /auth/password/reset > should fail with missing email 4ms
   ✓ Auth API > POST /auth/password/reset > should request password reset and store code in Redis 79ms
   ✓ Auth API > POST /auth/password/reset/:code/confirm > should fail with invalid code 4ms
   ✓ Auth API > POST /auth/password/reset/:code/confirm > should reset password with code  303ms
   ✓ Auth API > POST /auth/password/expired > should fail with missing params 4ms
   ✓ Auth API > POST /auth/password/expired > should update expired password and send confirmation email (simulate)  417ms
   ✓ Auth API > POST /auth/password/:code/confirm > should fail with invalid code 3ms
   ✓ Auth API > POST /auth/password/:code/confirm > should confirm password change with code 109ms
   × PUT /users/:userId/password > should fail without authentication token 422ms
     → expected 200 to be 401 // Object.is equality
   ✓ PUT /users/:userId/password > should fail with invalid userId format 109ms
   ✓ PUT /users/:userId/password > should fail with missing password 119ms
   × PUT /users/:userId/password > should fail with password identical to the current one 396ms
     → expected 200 to be 400 // Object.is equality
   ✓ PUT /users/:userId/password > should fail with password not meeting complexity requirements 110ms
   ✓ PUT /users/:userId/password > should successfully update own password directly (no confirmation needed)  477ms
   × PUT /users/:userId/password > should fail to update another user password without specific rights 396ms
     → expected 200 to be 403 // Object.is equality
   ✓ PUT /users/:userId/password > should allow admin to update another user password  497ms
stdout | src/modules/sales-orders/sales-order-items/__tests__/sales-order-item.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/sales-orders/sales-order-items/__tests__/sales-order-item.spec.ts
Avant init DB

stdout | src/modules/sales-orders/sales-order-items/__tests__/sales-order-item.spec.ts
Après init DB

stdout | src/modules/sales-orders/sales-order-items/__tests__/sales-order-item.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/sales-orders/sales-order-items/__tests__/sales-order-item.spec.ts (18 tests | 2 failed) 2792ms
   ✓ SalesOrderItems API > POST /sales-orders/:salesOrderId/items > should add a new item to a sales order 195ms
   ✓ SalesOrderItems API > POST /sales-orders/:salesOrderId/items > should fail to add an item to a non-existent sales order 136ms
   ✓ SalesOrderItems API > POST /sales-orders/:salesOrderId/items > should fail to add an item to a sales order if status is not DRAFT 181ms
   ✓ SalesOrderItems API > GET /sales-orders/:salesOrderId/items > should return a list of items for a sales order 21ms
   ✓ SalesOrderItems API > GET /sales-orders/:salesOrderId/items > should return 404 for a non-existent sales order 12ms
   ✓ SalesOrderItems API > GET /sales-orders/:salesOrderId/items/:itemId > should return a specific item by ID for a sales order 13ms
   ✓ SalesOrderItems API > GET /sales-orders/:salesOrderId/items/:itemId > should return 404 for a non-existent item 9ms
   ✓ SalesOrderItems API > GET /sales-orders/:salesOrderId/items/:itemId > should return 404 for an item not belonging to the specified sales order 170ms
   × SalesOrderItems API > GET /sales-orders/:salesOrderId/items/:itemId > should fail to get a specific item without authentication 14ms
     → expected 200 to be 401 // Object.is equality
   ✓ SalesOrderItems API > PUT /sales-orders/:salesOrderId/items/:itemId > should update an existing item in a sales order 232ms
   ✓ SalesOrderItems API > PUT /sales-orders/:salesOrderId/items/:itemId > should fail to update an item in a non-existent sales order 158ms
   ✓ SalesOrderItems API > PUT /sales-orders/:salesOrderId/items/:itemId > should fail to update a non-existent item in an existing sales order 162ms    
   ✓ SalesOrderItems API > PUT /sales-orders/:salesOrderId/items/:itemId > should fail to update an item if sales order status is not DRAFT 194ms        
   × SalesOrderItems API > PUT /sales-orders/:salesOrderId/items/:itemId > should fail to update an item without authentication 204ms
     → expected 200 to be 401 // Object.is equality
   ✓ SalesOrderItems API > DELETE /sales-orders/:salesOrderId/items/:itemId > should delete an item from a sales order 194ms
   ✓ SalesOrderItems API > DELETE /sales-orders/:salesOrderId/items/:itemId > should fail to delete an item from a non-existent sales order 146ms        
   ✓ SalesOrderItems API > DELETE /sales-orders/:salesOrderId/items/:itemId > should fail to delete a non-existent item from an existing sales order 162ms
   ✓ SalesOrderItems API > DELETE /sales-orders/:salesOrderId/items/:itemId > should fail to delete an item if sales order status is not DRAFT 247ms     
stdout | src/modules/users/__tests__/users.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/users/__tests__/users.spec.ts
Avant init DB

stdout | src/modules/users/__tests__/users.spec.ts
Après init DB

stdout | src/modules/users/__tests__/users.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/users/__tests__/users.spec.ts (53 tests | 20 failed) 2089ms
   ✓ Users API > POST /users > should fail to create user with existing email (as admin) 8ms
   ✓ Users API > POST /users > should create a user with isActive: false and permissionsExpireAt (as admin) 112ms
   ✓ Users API > POST /users > should create a user with isActive: true by default and null permissionsExpireAt (as admin) 113ms
   ✓ Users API > POST /users > should allow unauthenticated user to register with default USER level 118ms
   ✓ Users API > POST /users > should allow unauthenticated user to register and force USER level even if ADMIN level is requested 127ms
   ✓ Users API > POST /users > should fail to create user with invalid data (as admin, via admin route) 12ms
   × Users API > GET /users > should return users (as admin) 10ms
     → expected 400 to be 200 // Object.is equality
   × Users API > GET /users > should fail to return users (as standard user) 7ms
     → expected 400 to be 403 // Object.is equality
   × Users API > GET /users > should fail to return users (as reader user) 7ms
     → expected 400 to be 403 // Object.is equality
   ✓ Users API > GET /users/:identifier (ID) > should fail to get user with non-existent id (as admin) 7ms
   ✓ Users API > GET /users/:identifier (ID) > should get user from valid id (as admin) 8ms
   ✓ Users API > GET /users/:identifier (ID) > should get own user from valid id (as standard user) 7ms
   × Users API > GET /users/:identifier (ID) > should fail to get another user from valid id (as standard user) 10ms
     → expected 200 to be 403 // Object.is equality
   × Users API > GET /users/:identifier (ID) > should fail to get another user from valid id (as reader user) 7ms
     → expected 200 to be 403 // Object.is equality
   ✓ Users API > GET /users/:identifier (Email) > should fail to get user with non-existing email (as admin) 7ms
   ✓ Users API > GET /users/:identifier (Email) > should get user from valid email (as admin) 8ms
   ✓ Users API > GET /users/:identifier (Email) > should get own user from valid email (as standard user) 8ms
   × Users API > GET /users/:identifier (Email) > should fail to get another user by email (as standard user) 11ms
     → expected 200 to be 403 // Object.is equality
   × Users API > GET /users/:identifier (Email) > should fail to get another user by email (as reader user) 8ms
     → expected 200 to be 403 // Object.is equality
   ✓ Users API > GET /users/me > should return current user info (admin) 9ms
   × Users API > GET /users/me > should return current user info (standard user) 8ms
     → expected 1 to be 4 // Object.is equality
   ✓ Users API > PUT /users/:id > should fail to edit user with non-existent id (as admin) 9ms
   ✓ Users API > PUT /users/:id > should edit user from valid id (as admin) 32ms
   ✓ Users API > PUT /users/:id > should edit own user from valid id (as standard user) 13ms
   × Users API > PUT /users/:id > should fail to edit another user from valid id (as standard user) 12ms
     → expected 200 to be 403 // Object.is equality
   × Users API > PUT /users/:id > should fail to edit user (as reader user) 12ms
     → expected 200 to be 403 // Object.is equality
   × Users API > PUT /users/:id > should check if admin edit was applied correctly 10ms
     → expected 'forbiddenEdit' to be 'editedFirstName' // Object.is equality
   ✓ Users API > PUT /users/:id/preferences > should update user preferences (as admin) 11ms
   ✓ Users API > PUT /users/:id/preferences > should update own preferences (as standard user) 11ms
   × Users API > PUT /users/:id/preferences > should forbid updating preferences for another user (as standard user) 9ms
     → expected 200 to be 403 // Object.is equality
   × Users API > PUT /users/:id/preferences > should forbid updating preferences (as reader user) 11ms
     → expected 200 to be 403 // Object.is equality
   ✓ Users API > DELETE /users/:id/preferences > should reset user preferences (as admin) 130ms
   ✓ Users API > DELETE /users/:id/preferences > should reset own preferences (as standard user) 28ms
   × Users API > DELETE /users/:id/preferences > should forbid resetting preferences for another user (as standard user) 9ms
     → expected 200 to be 403 // Object.is equality
   × Users API > DELETE /users/:id/preferences > should forbid resetting preferences (as reader user) 10ms
     → expected 200 to be 403 // Object.is equality
   ✓ Users API > PUT /users/:userId/preferences/:key > should update an existing preference key (as admin) 13ms
   ✓ Users API > PUT /users/:userId/preferences/:key > should add a new preference key (as admin) 12ms
   ✓ Users API > PUT /users/:userId/preferences/:key > should update a nested preference key (as admin) 11ms
   ✓ Users API > PUT /users/:userId/preferences/:key > should fail if value is missing in the body (as admin) 6ms
   ✓ Users API > PUT /users/:userId/preferences/:key > should fail for non-existent user ID (as admin) 8ms
   ✓ Users API > PUT /users/:userId/preferences/:key > should update own preference key (as standard user) 11ms
   × Users API > PUT /users/:userId/preferences/:key > should fail to update another user preference key (as standard user) 11ms
     → expected 200 to be 403 // Object.is equality
   × Users API > PUT /users/:userId/preferences/:key > should forbid updating preference key (as reader user) 10ms
     → expected 200 to be 403 // Object.is equality
   ✓ Users API > DELETE /users/:id > should fail to delete user with non-existent id (as admin) 7ms
   ✓ Users API > DELETE /users/:id > should delete user from valid id (as admin) 9ms
   ✓ Users API > DELETE /users/:id > should fail to get deleted user (as admin) 11ms
   × Users API > should fail to delete user (as standard user) 120ms
     → expected 200 to be 403 // Object.is equality
   × Users API > should fail to delete user (as reader user) 12ms
     → expected 404 to be 403 // Object.is equality
   ✓ Users API > Delete user when it no longer has authorisations > should create a zombie user 113ms
   ✓ Users API > Delete user when it no longer has authorisations > should delete zombie user 11ms
   ✓ Users API > Delete user when it no longer has authorisations > should fail to get deleted zombie user 7ms
   ✓ Users API > Delete user when it no longer has authorisations > should resurrect zombie user 108ms
   × Users API > Delete user when it no longer has authorisations > should get resurrected user 8ms
     → expected 'Monique' to be 'Jean' // Object.is equality
stdout | src/modules/sales-orders/__tests__/sales-order.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/sales-orders/__tests__/sales-order.spec.ts
Avant init DB

stdout | src/modules/sales-orders/__tests__/sales-order.spec.ts
Après init DB

stdout | src/modules/sales-orders/__tests__/sales-order.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
Bypass d'authentification activé : aucun login admin nécessaire.

 ✓ src/modules/sales-orders/__tests__/sales-order.spec.ts (23 tests) 1777ms
stdout | src/modules/purchase-receptions/__tests__/purchase-reception.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/purchase-receptions/__tests__/purchase-reception.spec.ts
Avant init DB

stdout | src/modules/purchase-receptions/__tests__/purchase-reception.spec.ts
Après init DB

stdout | src/modules/purchase-receptions/__tests__/purchase-reception.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/purchase-receptions/__tests__/purchase-reception.spec.ts (14 tests | 4 failed) 1284ms
   ✓ Purchase Receptions API > POST /purchase-receptions > should create a new purchase reception linked to a PO 71ms
   ✓ Purchase Receptions API > POST /purchase-receptions > should fail to create a reception if PO does not exist 9ms
   ✓ Purchase Receptions API > POST /purchase-receptions > should create a reception without items if status is PENDING_QUALITY_CHECK 51ms
   × Purchase Receptions API > POST /purchase-receptions > should fail to create reception without authentication 66ms
     → expected 201 to be 401 // Object.is equality
   ✓ Purchase Receptions API > GET /purchase-receptions > should return a list of purchase receptions 29ms
   ✓ Purchase Receptions API > GET /purchase-receptions/:id > should return a specific purchase reception by ID 19ms
   ✓ Purchase Receptions API > GET /purchase-receptions/:id > should return 404 for a non-existent reception ID 11ms
   ✓ Purchase Receptions API > PUT /purchase-receptions/:id > should update an existing purchase reception (header and items) 111ms
   ✓ Purchase Receptions API > PUT /purchase-receptions/:id > should fail to update if reception status does not allow modification  301ms
   ✓ Purchase Receptions API > PATCH /purchase-receptions/:id/validate > should validate a PENDING_QUALITY_CHECK reception and update stock/PO status 90ms
   ✓ Purchase Receptions API > PATCH /purchase-receptions/:id/validate > should fail to validate a reception not in PENDING_QUALITY_CHECK status 19ms
   × Purchase Receptions API > DELETE /purchase-receptions/:id > should soft delete a purchase reception if status allows 7ms
     → expected 403 to be 204 // Object.is equality
   × Purchase Receptions API > DELETE /purchase-receptions/:id > should fail to delete a reception if status does not allow 24ms
     → expected 403 to be 400 // Object.is equality
   × Purchase Receptions API > DELETE /purchase-receptions/:id > should return 400 if the reception is linked to a supplier invoice 6ms
     → expected 403 to be 400 // Object.is equality
stdout | src/modules/customer-invoices/__tests__/customer-invoice.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/customer-invoices/__tests__/customer-invoice.spec.ts
Avant init DB

stdout | src/modules/customer-invoices/__tests__/customer-invoice.spec.ts
Après init DB

stdout | src/modules/customer-invoices/__tests__/customer-invoice.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/customer-invoices/__tests__/customer-invoice.spec.ts (19 tests | 3 failed) 1152ms
   ✓ CustomerInvoices API > POST /customer-invoices > should create a new customer-invoice with items 127ms
   ✓ CustomerInvoices API > POST /customer-invoices > should create a new customer-invoice without items 78ms
   ✓ CustomerInvoices API > GET /customer-invoices > should return a paginated list of customer invoices 25ms
   ✓ CustomerInvoices API > GET /customer-invoices/:id > should return a customer invoice by id 42ms
   ✓ CustomerInvoices API > GET /customer-invoices/:id > should return 404 for non-existent customer invoice 19ms
   ✓ CustomerInvoices API > GET /customer-invoices/:id > should return 400 for invalid id format 8ms
   ✓ CustomerInvoices API > PUT /customer-invoices/:id > should update a customer invoice 104ms
   ✓ CustomerInvoices API > PUT /customer-invoices/:id > should return 404 for updating a non-existent customer invoice 19ms
   ✓ CustomerInvoices API > PUT /customer-invoices/:id > should return 400 for invalid id format 7ms
   ✓ CustomerInvoices API > PATCH /customer-invoices/:id/status > should update the status of a customer invoice 48ms
   ✓ CustomerInvoices API > PATCH /customer-invoices/:id/status > should return 404 for non-existent customer invoice 10ms
   ✓ CustomerInvoices API > PATCH /customer-invoices/:id/status > should return 400 for invalid id format 7ms
   ✓ CustomerInvoices API > PATCH /customer-invoices/:id/status > should return 400 for invalid status value 6ms
   ✓ CustomerInvoices API > POST /customer-invoices/:id/send > should mark the invoice as sent 133ms
   ✓ CustomerInvoices API > POST /customer-invoices/:id/send > should return 404 for non-existent invoice 116ms
   ✓ CustomerInvoices API > POST /customer-invoices/:id/send > should return 400 for invalid id format 93ms
   × CustomerInvoices API > DELETE /customer-invoices/:id > should delete a customer invoice 88ms
     → expected 403 to be 204 // Object.is equality
   × CustomerInvoices API > DELETE /customer-invoices/:id > should return 404 for deleting a non-existent customer invoice 96ms
     → expected 403 to be 404 // Object.is equality
   × CustomerInvoices API > DELETE /customer-invoices/:id > should return 400 for invalid id format 85ms
     → expected 403 to be 400 // Object.is equality
stdout | src/modules/purchase-orders/__tests__/purchase-order.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/purchase-orders/__tests__/purchase-order.spec.ts
Avant init DB

stdout | src/modules/purchase-orders/__tests__/purchase-order.spec.ts
Après init DB

stdout | src/modules/purchase-orders/__tests__/purchase-order.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/purchase-orders/__tests__/purchase-order.spec.ts (8 tests | 2 failed) 355ms
   ✓ Purchase Orders API > POST /purchase-orders > should create a new purchase order with items (as user with rights) 67ms
   ✓ Purchase Orders API > POST /purchase-orders > should fail to create PO if supplier does not exist 11ms
   ✓ Purchase Orders API > GET /purchase-orders > should return a list of purchase orders 25ms
   ✓ Purchase Orders API > GET /purchase-orders/:id > should return a specific purchase order by ID 18ms
   ✓ Purchase Orders API > PUT /purchase-orders/:id > should update an existing purchase order (e.g., notes and add an item) 92ms
   ✓ Purchase Orders API > PATCH /purchase-orders/:id/status > should update purchase order status to APPROVED 43ms
   × Purchase Orders API > DELETE /purchase-orders/:id > should soft delete a purchase order (if in DRAFT status) 6ms
     → expected 403 to be 204 // Object.is equality
   × Purchase Orders API > DELETE /purchase-orders/:id > should return 400 if the purchase order is linked to receptions or invoices 6ms
     → expected 403 to be 400 // Object.is equality
stdout | src/modules/payments/__tests__/payment.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/payments/__tests__/payment.spec.ts
Avant init DB

stdout | src/modules/payments/__tests__/payment.spec.ts
Après init DB

stdout | src/modules/payments/__tests__/payment.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/payments/__tests__/payment.spec.ts (10 tests | 4 failed) 363ms
   ✓ Payment API > POST /payments > should record a new payment 45ms
   × Payment API > POST /payments > should fail to record a payment without authentication 27ms
     → expected 201 to be 401 // Object.is equality
   ✓ Payment API > POST /payments > should return 400 for missing required fields 9ms
   ✓ Payment API > GET /payments > should return a list of payments 123ms
   ✓ Payment API > GET /payments/:id > should return a specific payment by ID 41ms
   ✓ Payment API > GET /payments/:id > should return 404 for a non-existent payment ID 24ms
   ✓ Payment API > GET /payments/:id > should return 400 for an invalid payment ID format 11ms
   × Payment API > DELETE /payments/:id > should delete (void/reverse) a payment by ID 7ms
     → expected 403 to be 204 // Object.is equality
   × Payment API > DELETE /payments/:id > should return 404 for deleting a non-existent payment ID 7ms
     → expected 403 to be 404 // Object.is equality
   × Payment API > DELETE /payments/:id > should return 400 for an invalid payment ID format 8ms
     → expected 403 to be 400 // Object.is equality
stdout | src/modules/purchase-receptions/purchase-reception-items/__tests__/purchase-reception-item.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/purchase-receptions/purchase-reception-items/__tests__/purchase-reception-item.spec.ts
Avant init DB

stdout | src/modules/purchase-receptions/purchase-reception-items/__tests__/purchase-reception-item.spec.ts
Après init DB

stdout | src/modules/purchase-receptions/purchase-reception-items/__tests__/purchase-reception-item.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/purchase-receptions/purchase-reception-items/__tests__/purchase-reception-item.spec.ts (19 tests | 2 failed) 618ms
   ✓ Purchase Reception Items API (nested) > POST /purchase-receptions/:receptionId/items > should add a new item to an existing purchase reception 79ms
   ✓ Purchase Reception Items API (nested) > POST /purchase-receptions/:receptionId/items > should fail to add item if reception status does not allow modification 26ms
   ✓ Purchase Reception Items API (nested) > POST /purchase-receptions/:receptionId/items > should fail if product does not exist 35ms
   ✓ Purchase Reception Items API (nested) > POST /purchase-receptions/:receptionId/items > should add item with zero quantity received 49ms
   ✓ Purchase Reception Items API (nested) > POST /purchase-receptions/:receptionId/items > should fail to add item with negative quantity 7ms
   ✓ Purchase Reception Items API (nested) > POST /purchase-receptions/:receptionId/items > should fail to add duplicate item for the same PO line 37ms
   ✓ Purchase Reception Items API (nested) > POST /purchase-receptions/:receptionId/items > should fail if quantity received exceeds remaining PO item quantity 37ms
   ✓ Purchase Reception Items API (nested) > GET /purchase-receptions/:receptionId/items > should list all items for a specific purchase reception 32ms  
   ✓ Purchase Reception Items API (nested) > GET /purchase-receptions/:receptionId/items > should return 404 if reception does not exist 13ms
   ✓ Purchase Reception Items API (nested) > GET /purchase-receptions/:receptionId/items/:itemId > should get a specific item from a purchase reception 34ms
   ✓ Purchase Reception Items API (nested) > GET /purchase-receptions/:receptionId/items/:itemId > should return 404 for non-existent itemId 28ms        
   ✓ Purchase Reception Items API (nested) > GET /purchase-receptions/:receptionId/items/:itemId > should return 404 if item does not belong to reception 26ms
   ✓ Purchase Reception Items API (nested) > PUT /purchase-receptions/:receptionId/items/:itemId > should update a specific item in a purchase reception 67ms
   ✓ Purchase Reception Items API (nested) > PUT /purchase-receptions/:receptionId/items/:itemId > should fail to update item if reception status does not allow modification 30ms
   ✓ Purchase Reception Items API (nested) > PUT /purchase-receptions/:receptionId/items/:itemId > should fail to update item with negative quantity 7ms 
   ✓ Purchase Reception Items API (nested) > PUT /purchase-receptions/:receptionId/items/:itemId > should fail if updated quantity exceeds remaining PO item quantity 36ms
   × Purchase Reception Items API (nested) > DELETE /purchase-receptions/:receptionId/items/:itemId > should remove an item from a purchase reception 8ms
     → expected 403 to be 204 // Object.is equality
   ✓ Purchase Reception Items API (nested) > DELETE /purchase-receptions/:receptionId/items/:itemId > should fail to remove item if reception status does not allow modification 6ms
   × Purchase Reception Items API (nested) > DELETE /purchase-receptions/:receptionId/items/:itemId > should return 404 for non-existent itemId on delete 8ms
     → expected 403 to be 404 // Object.is equality
stdout | src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts
Avant init DB

stdout | src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts
Après init DB

stdout | src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts (22 tests | 7 failed) 385ms
   ✓ CashRegisterSession API > Sequential Tests > POST /cash-register-sessions/open > should open a new cash register session (as admin) 24ms
   ✓ CashRegisterSession API > Sequential Tests > GET /cash-register-sessions/:id > should return a specific session by ID (as admin) 16ms
   ✓ CashRegisterSession API > Sequential Tests > GET /cash-register-sessions/:id > should return 404 for a non-existent session ID 8ms
   ✓ CashRegisterSession API > Sequential Tests > GET /cash-register-sessions/:id > should return 400 for an invalid session ID format 6ms
   × CashRegisterSession API > Sequential Tests > GET /cash-register-sessions/:id > should fail to get a session without authentication 14ms
     → expected 200 to be 401 // Object.is equality
   ✓ CashRegisterSession API > Sequential Tests > PATCH /cash-register-sessions/:id/close > should close an open session (as admin) 37ms
   ✓ CashRegisterSession API > Sequential Tests > PATCH /cash-register-sessions/:id/close > should return 400 for closing an already closed session 22ms 
   ✓ CashRegisterSession API > Sequential Tests > PATCH /cash-register-sessions/:id/close > should return 404 for closing a non-existent session 10ms    
   ✓ CashRegisterSession API > Sequential Tests > PATCH /cash-register-sessions/:id/close > should return 400 for invalid session ID format 8ms
   ✓ CashRegisterSession API > Sequential Tests > PATCH /cash-register-sessions/:id/close > should return 400 for missing required closingBalanceActual 29ms
   × CashRegisterSession API > Sequential Tests > PATCH /cash-register-sessions/:id/close > should fail to close a session without authentication 20ms   
     → expected 400 to be 401 // Object.is equality
   × CashRegisterSession API > POST /cash-register-sessions/open > should fail to open a session without authentication 11ms
     → expected 400 to be 401 // Object.is equality
   ✓ CashRegisterSession API > POST /cash-register-sessions/open > should return 400 for missing required cashRegisterId 10ms
   ✓ CashRegisterSession API > POST /cash-register-sessions/open > should return 400 for missing required openingBalance 7ms
   ✓ CashRegisterSession API > POST /cash-register-sessions/open > should return 400 for opening a session on a register with already open session 6ms   
   × CashRegisterSession API > GET /cash-register-sessions > should return a list of cash register sessions (as admin) 7ms
     → expected 400 to be 200 // Object.is equality
   × CashRegisterSession API > GET /cash-register-sessions > should fail to return sessions without authentication 6ms
     → expected 400 to be 401 // Object.is equality
   × CashRegisterSession API > GET /cash-register-sessions > should support pagination, sorting, and filtering 7ms
     → expected 400 to be 200 // Object.is equality
   ✓ CashRegisterSession API > GET /cash-registers/:cashRegisterId/sessions/active > should return the active session for a cash register (as admin) 15ms
   ✓ CashRegisterSession API > GET /cash-registers/:cashRegisterId/sessions/active > should return the active session for cash register 1 (as admin) 15ms
   ✓ CashRegisterSession API > GET /cash-registers/:cashRegisterId/sessions/active > should return 400 for invalid cash register ID 6ms
   × CashRegisterSession API > GET /cash-registers/:cashRegisterId/sessions/active > should fail to get active session without authentication 14ms       
     → expected 200 to be 401 // Object.is equality
stdout | src/modules/quotes/__tests__/quote.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/quotes/__tests__/quote.spec.ts
Avant init DB

stdout | src/modules/quotes/__tests__/quote.spec.ts
Après init DB

stdout | src/modules/quotes/__tests__/quote.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/quotes/__tests__/quote.spec.ts (11 tests | 1 failed) 593ms
   ✓ Quotes API > POST /quotes > should create a new quote with items  89ms
   ✓ Quotes API > POST /quotes > should fail to create a quote with invalid customerId  21ms
   ✓ Quotes API > POST /quotes > should fail to create a quote without items  23ms
   × Quotes API > POST /quotes > should fail to create quote without authentication 81ms
     → expected 201 to be 401 // Object.is equality
   ✓ Quotes API > GET /quotes > should return a list of quotes  36ms
   ✓ Quotes API > GET /quotes/:id > should return a specific quote by ID  28ms
   ✓ Quotes API > GET /quotes/:id > should return 404 for a non-existent quote ID  14ms
   ✓ Quotes API > PUT /quotes/:id > should update an existing quote  99ms
   ✓ Quotes API > PATCH /quotes/:id/status > should update quote status  52ms
   ✓ Quotes API > DELETE /quotes/:id > should soft delete a quote  35ms
   ✓ Quotes API > DELETE /quotes/:id > should return 400 if the quote has been converted to an order 14ms
stdout | src/modules/auth/__tests__/authorization.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/auth/__tests__/authorization.spec.ts
Avant init DB

stdout | src/modules/auth/__tests__/authorization.spec.ts
Après init DB

stdout | src/modules/auth/__tests__/authorization.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
Bypass d'authentification activé : aucun login admin nécessaire.

 ✓ src/modules/auth/__tests__/authorization.spec.ts (15 tests) 452ms
stdout | src/modules/customers/__tests__/customer.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/customers/__tests__/customer.spec.ts
Avant init DB

stdout | src/modules/customers/__tests__/customer.spec.ts
Après init DB

stdout | src/modules/customers/__tests__/customer.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/customers/__tests__/customer.spec.ts (20 tests | 5 failed) 342ms
   ✓ Customer API > POST /customers > should create a new customer (as admin) 35ms
   × Customer API > POST /customers > should fail to create a customer without authentication 16ms
     → expected 400 to be 401 // Object.is equality
   ✓ Customer API > POST /customers > should return 400 for invalid customer data 10ms
   ✓ Customer API > GET /customers > should return a list of customers (as admin) 17ms
   × Customer API > GET /customers > should fail to return customers without authentication 15ms
     → expected 200 to be 401 // Object.is equality
   ✓ Customer API > GET /customers > should support pagination, sorting, and filtering 17ms
   ✓ Customer API > GET /customers/:id > should return a specific customer by ID (as admin) 12ms
   ✓ Customer API > GET /customers/:id > should return 404 for a non-existent customer ID 8ms
   ✓ Customer API > GET /customers/:id > should return 400 for an invalid customer ID format 6ms
   × Customer API > GET /customers/:id > should fail to get a customer without authentication 14ms
     → expected 200 to be 401 // Object.is equality
   ✓ Customer API > PUT /customers/:id > should update a customer by ID (as admin) 27ms
   ✓ Customer API > PUT /customers/:id > should return 404 for updating a non-existent customer ID 9ms
   ✓ Customer API > PUT /customers/:id > should return 400 for an invalid customer ID format 6ms
   ✓ Customer API > PUT /customers/:id > should return 400 for invalid update data 13ms
   × Customer API > PUT /customers/:id > should fail to update a customer without authentication 24ms
     → expected 200 to be 401 // Object.is equality
   ✓ Customer API > DELETE /customers/:id > should soft delete a customer by ID (as admin) 25ms
   ✓ Customer API > DELETE /customers/:id > should return 404 for deleting a non-existent customer ID 8ms
   ✓ Customer API > DELETE /customers/:id > should return 400 for an invalid customer ID format 6ms
   × Customer API > DELETE /customers/:id > should fail to delete a customer without authentication 8ms
     → expected 404 to be 401 // Object.is equality
   ✓ Customer API > DELETE /customers/:id > should return 400 if the customer has associated sales orders or invoices 16ms
stdout | src/modules/warehouses/__tests__/warehouse.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/warehouses/__tests__/warehouse.spec.ts
Avant init DB

stdout | src/modules/warehouses/__tests__/warehouse.spec.ts
Après init DB

stdout | src/modules/warehouses/__tests__/warehouse.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/warehouses/__tests__/warehouse.spec.ts (23 tests | 5 failed) 367ms
   ✓ Warehouse API > POST /warehouses > should create a new warehouse (as admin) 46ms
   × Warehouse API > POST /warehouses > should fail to create a warehouse without authentication 12ms
     → expected 400 to be 401 // Object.is equality
   ✓ Warehouse API > POST /warehouses > should return 400 for missing required name 11ms
   ✓ Warehouse API > POST /warehouses > should return 400 for missing required addressId 10ms
   ✓ Warehouse API > POST /warehouses > should return 400 for duplicate name 10ms
   ✓ Warehouse API > POST /warehouses > should return 400 for duplicate code 13ms
   ✓ Warehouse API > GET /warehouses > should return a list of warehouses (as admin) 13ms
   × Warehouse API > GET /warehouses > should fail to return warehouses without authentication 13ms
     → expected 200 to be 401 // Object.is equality
   ✓ Warehouse API > GET /warehouses > should support pagination, sorting, and filtering 14ms
   ✓ Warehouse API > GET /warehouses/:id > should return a specific warehouse by ID (as admin) 13ms
   ✓ Warehouse API > GET /warehouses/:id > should return 404 for a non-existent warehouse ID 9ms
   ✓ Warehouse API > GET /warehouses/:id > should return 400 for an invalid warehouse ID format 7ms
   × Warehouse API > GET /warehouses/:id > should fail to get a warehouse without authentication 11ms
     → expected 200 to be 401 // Object.is equality
   ✓ Warehouse API > PUT /warehouses/:id > should update a warehouse by ID (as admin) 29ms
   ✓ Warehouse API > PUT /warehouses/:id > should return 404 for updating a non-existent warehouse ID 8ms
   ✓ Warehouse API > PUT /warehouses/:id > should return 400 for an invalid warehouse ID format 6ms
   ✓ Warehouse API > PUT /warehouses/:id > should return 400 for invalid update data 10ms
   × Warehouse API > PUT /warehouses/:id > should fail to update a warehouse without authentication 21ms
     → expected 200 to be 401 // Object.is equality
   ✓ Warehouse API > DELETE /warehouses/:id > should soft delete a warehouse by ID (as admin) 24ms
   ✓ Warehouse API > DELETE /warehouses/:id > should return 404 for deleting a non-existent warehouse ID 8ms
   ✓ Warehouse API > DELETE /warehouses/:id > should return 400 for an invalid warehouse ID format 6ms
   × Warehouse API > DELETE /warehouses/:id > should fail to delete a warehouse without authentication 8ms
     → expected 404 to be 401 // Object.is equality
   ✓ Warehouse API > DELETE /warehouses/:id > should return 400 if the warehouse has associated records 11ms
stdout | src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts
Avant init DB

stdout | src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts
Après init DB

stdout | src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts (19 tests | 7 failed) 397ms
   ✓ Cash Register Transaction API > POST /cash-register-transactions > should record a new manual cash register transaction 66ms
   ✓ Cash Register Transaction API > POST /cash-register-transactions > should record a new manual cash register transaction linked to a sales order 58ms
   × Cash Register Transaction API > POST /cash-register-transactions > should fail to record a transaction without authentication 57ms
     → expected 201 to be 401 // Object.is equality
   ✓ Cash Register Transaction API > POST /cash-register-transactions > should return 400 for missing required fields 9ms
   ✓ Cash Register Transaction API > POST /cash-register-transactions > should return 400 for invalid transaction type for manual entry 7ms
   ✓ Cash Register Transaction API > POST /cash-register-transactions > should return 404 if cash register session not found 12ms
   ✓ Cash Register Transaction API > POST /cash-register-transactions > should return 403 if cash register session is not open 17ms
   ✓ Cash Register Transaction API > POST /cash-register-transactions > should return 400 if payment method not found 22ms
   ✓ Cash Register Transaction API > POST /cash-register-transactions > should return 400 if related sales order not found 21ms
   ✓ Cash Register Transaction API > POST /cash-register-transactions > should return 400 if user not found 11ms
   × Cash Register Transaction API > GET /cash-register-transactions > should return a list of cash register transactions 9ms
     → expected 400 to be 200 // Object.is equality
   × Cash Register Transaction API > GET /cash-register-transactions > should fail to return transactions without authentication 8ms
     → expected 400 to be 401 // Object.is equality
   × Cash Register Transaction API > GET /cash-register-transactions > should filter transactions by cashRegisterSessionId 6ms
     → expected 400 to be 200 // Object.is equality
   × Cash Register Transaction API > GET /cash-register-transactions > should filter transactions by type 7ms
     → expected 400 to be 200 // Object.is equality
   × Cash Register Transaction API > GET /cash-register-transactions > should filter transactions by userId 7ms
     → expected 400 to be 200 // Object.is equality
   ✓ Cash Register Transaction API > GET /cash-register-transactions/:id > should return a specific cash register transaction by ID 17ms
   ✓ Cash Register Transaction API > GET /cash-register-transactions/:id > should return 404 for a non-existent transaction ID 10ms
   ✓ Cash Register Transaction API > GET /cash-register-transactions/:id > should return 400 for an invalid transaction ID format 6ms
   × Cash Register Transaction API > GET /cash-register-transactions/:id > should fail to get a transaction without authentication 18ms
     → expected 200 to be 401 // Object.is equality
stdout | src/modules/cash-registers/__tests__/cash-register.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/cash-registers/__tests__/cash-register.spec.ts
Avant init DB

stdout | src/modules/cash-registers/__tests__/cash-register.spec.ts
Après init DB

stdout | src/modules/cash-registers/__tests__/cash-register.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/cash-registers/__tests__/cash-register.spec.ts (21 tests | 5 failed) 371ms
   ✓ CashRegister API > POST /cash-registers > should create a new cash register (as admin) 33ms
   × CashRegister API > POST /cash-registers > should fail to create a cash register without authentication 27ms
     → expected 400 to be 401 // Object.is equality
   ✓ CashRegister API > POST /cash-registers > should return 400 for missing required name 19ms
   ✓ CashRegister API > POST /cash-registers > should return 400 for missing required currencyId 18ms
   ✓ CashRegister API > POST /cash-registers > should return 400 for duplicate name 15ms
   ✓ CashRegister API > GET /cash-registers > should return a list of cash registers (as admin) 17ms
   × CashRegister API > GET /cash-registers > should fail to return cash registers without authentication 12ms
     → expected 200 to be 401 // Object.is equality
   ✓ CashRegister API > GET /cash-registers > should support pagination, sorting, and filtering 12ms
   ✓ CashRegister API > GET /cash-registers/:id > should return a specific cash register by ID (as admin) 11ms
   ✓ CashRegister API > GET /cash-registers/:id > should return 404 for a non-existent cash register ID 14ms
   ✓ CashRegister API > GET /cash-registers/:id > should return 400 for an invalid cash register ID format 7ms
   × CashRegister API > GET /cash-registers/:id > should fail to get a cash register without authentication 11ms
     → expected 200 to be 401 // Object.is equality
   ✓ CashRegister API > PUT /cash-registers/:id > should update a cash register by ID (as admin) 29ms
   ✓ CashRegister API > PUT /cash-registers/:id > should return 404 for updating a non-existent cash register ID 8ms
   ✓ CashRegister API > PUT /cash-registers/:id > should return 400 for an invalid cash register ID format 6ms
   ✓ CashRegister API > PUT /cash-registers/:id > should return 400 for invalid update data 10ms
   × CashRegister API > PUT /cash-registers/:id > should fail to update a cash register without authentication 23ms
     → expected 200 to be 401 // Object.is equality
   ✓ CashRegister API > DELETE /cash-registers/:id > should soft delete a cash register by ID (as admin) 22ms
   ✓ CashRegister API > DELETE /cash-registers/:id > should return 404 for deleting a non-existent cash register ID 8ms
   ✓ CashRegister API > DELETE /cash-registers/:id > should return 400 for an invalid cash register ID format 6ms
   × CashRegister API > DELETE /cash-registers/:id > should fail to delete a cash register without authentication 8ms
     → expected 404 to be 401 // Object.is equality
stdout | src/modules/shops/__tests__/shop.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/shops/__tests__/shop.spec.ts
Avant init DB

stdout | src/modules/shops/__tests__/shop.spec.ts
Après init DB

stdout | src/modules/shops/__tests__/shop.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/shops/__tests__/shop.spec.ts (22 tests | 5 failed) 333ms
   ✓ Shop API > POST /shops > should create a new shop (as admin) 38ms
   × Shop API > POST /shops > should fail to create a shop without authentication 10ms
     → expected 400 to be 401 // Object.is equality
   ✓ Shop API > POST /shops > should return 400 for missing required name 11ms
   ✓ Shop API > POST /shops > should return 400 for missing required addressId 9ms
   ✓ Shop API > POST /shops > should return 400 for duplicate name 11ms
   ✓ Shop API > POST /shops > should return 400 for duplicate code 17ms
   ✓ Shop API > GET /shops > should return a list of shops (as admin) 12ms
   × Shop API > GET /shops > should fail to return shops without authentication 11ms
     → expected 200 to be 401 // Object.is equality
   ✓ Shop API > GET /shops > should support pagination, sorting, and filtering 11ms
   ✓ Shop API > GET /shops/:id > should return a specific shop by ID (as admin) 9ms
   ✓ Shop API > GET /shops/:id > should return 404 for a non-existent shop ID 8ms
   ✓ Shop API > GET /shops/:id > should return 400 for an invalid shop ID format 8ms
   × Shop API > GET /shops/:id > should fail to get a shop without authentication 10ms
     → expected 200 to be 401 // Object.is equality
   ✓ Shop API > PUT /shops/:id > should update a shop by ID (as admin) 29ms
   ✓ Shop API > PUT /shops/:id > should return 404 for updating a non-existent shop ID 8ms
   ✓ Shop API > PUT /shops/:id > should return 400 for an invalid shop ID format 6ms
   ✓ Shop API > PUT /shops/:id > should return 400 for invalid update data 11ms
   × Shop API > PUT /shops/:id > should fail to update a shop without authentication 22ms
     → expected 200 to be 401 // Object.is equality
   ✓ Shop API > DELETE /shops/:id > should soft delete a shop by ID (as admin) 18ms
   ✓ Shop API > DELETE /shops/:id > should return 404 for deleting a non-existent shop ID 8ms
   ✓ Shop API > DELETE /shops/:id > should return 400 for an invalid shop ID format 7ms
   × Shop API > DELETE /shops/:id > should fail to delete a shop without authentication 8ms
     → expected 404 to be 401 // Object.is equality
stdout | src/modules/products/__tests__/product.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/products/__tests__/product.spec.ts
Avant init DB

stdout | src/modules/products/__tests__/product.spec.ts
Après init DB

stdout | src/modules/products/__tests__/product.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/products/__tests__/product.spec.ts (19 tests | 5 failed) 310ms
   ✓ Products API > POST /products > should create a new product with required fields 40ms
   ✓ Products API > POST /products > should fail to create a product without required fields 7ms
   ✓ Products API > POST /products > should fail to create a product with duplicate SKU 13ms
   × Products API > POST /products > should fail to create a product without authentication 15ms
     → expected 400 to be 401 // Object.is equality
   ✓ Products API > GET /products > should return a paginated list of products (as admin) 16ms
   ✓ Products API > GET /products > should filter products by name 9ms
   × Products API > GET /products > should fail to get products without authentication 12ms
     → expected 200 to be 401 // Object.is equality
   ✓ Products API > GET /products/:id > should return a product by id (as admin) 13ms
   ✓ Products API > GET /products/:id > should return 404 for non-existent product 9ms
   ✓ Products API > GET /products/:id > should return 400 for invalid id 5ms
   × Products API > GET /products/:id > should fail to get a product without authentication 13ms
     → expected 200 to be 401 // Object.is equality
   ✓ Products API > PUT /products/:id > should update an existing product (as admin) 35ms
   ✓ Products API > PUT /products/:id > should return 404 for updating a non-existent product 8ms
   ✓ Products API > PUT /products/:id > should return 400 for invalid id 8ms
   × Products API > PUT /products/:id > should fail to update a product without authentication 22ms
     → expected 200 to be 401 // Object.is equality
   ✓ Products API > DELETE /products/:id > should soft delete a product (as admin) 37ms
   ✓ Products API > DELETE /products/:id > should return 404 for deleting a non-existent product 9ms
   ✓ Products API > DELETE /products/:id > should return 400 for invalid id 6ms
   × Products API > DELETE /products/:id > should fail to delete a product without authentication 11ms
     → expected 404 to be 401 // Object.is equality
stdout | src/modules/suppliers/__test__/supplier.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/suppliers/__test__/supplier.spec.ts
Avant init DB

stdout | src/modules/suppliers/__test__/supplier.spec.ts
Après init DB

stdout | src/modules/suppliers/__test__/supplier.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/suppliers/__test__/supplier.spec.ts (20 tests | 5 failed) 325ms
   ✓ Supplier API > POST /suppliers > should create a new supplier (as admin) 32ms
   × Supplier API > POST /suppliers > should fail to create a supplier without authentication 16ms
     → expected 400 to be 401 // Object.is equality
   ✓ Supplier API > POST /suppliers > should return 400 for invalid supplier data 12ms
   ✓ Supplier API > GET /suppliers > should return a list of suppliers (as admin) 14ms
   × Supplier API > GET /suppliers > should fail to return suppliers without authentication 15ms
     → expected 200 to be 401 // Object.is equality
   ✓ Supplier API > GET /suppliers > should support pagination, sorting, and filtering 18ms
   ✓ Supplier API > GET /suppliers/:id > should return a specific supplier by ID (as admin) 12ms
   ✓ Supplier API > GET /suppliers/:id > should return 404 for a non-existent supplier ID 8ms
   ✓ Supplier API > GET /suppliers/:id > should return 400 for an invalid supplier ID format 7ms
   × Supplier API > GET /suppliers/:id > should fail to get a supplier without authentication 9ms
     → expected 200 to be 401 // Object.is equality
   ✓ Supplier API > PUT /suppliers/:id > should update a supplier by ID (as admin) 25ms
   ✓ Supplier API > PUT /suppliers/:id > should return 404 for updating a non-existent supplier ID 8ms
   ✓ Supplier API > PUT /suppliers/:id > should return 400 for an invalid supplier ID format 6ms
   ✓ Supplier API > PUT /suppliers/:id > should return 400 for invalid update data 12ms
   × Supplier API > PUT /suppliers/:id > should fail to update a supplier without authentication 22ms
     → expected 200 to be 401 // Object.is equality
   ✓ Supplier API > DELETE /suppliers/:id > should soft delete a supplier by ID (as admin) 25ms
   ✓ Supplier API > DELETE /suppliers/:id > should return 404 for deleting a non-existent supplier ID 9ms
   ✓ Supplier API > DELETE /suppliers/:id > should return 400 for an invalid supplier ID format 6ms
   × Supplier API > DELETE /suppliers/:id > should fail to delete a supplier without authentication 8ms
     → expected 404 to be 401 // Object.is equality
   ✓ Supplier API > DELETE /suppliers/:id > should return 400 if the supplier has associated records 13ms
stdout | src/modules/notifications/__tests__/notification.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/notifications/__tests__/notification.spec.ts
Avant init DB

stdout | src/modules/notifications/__tests__/notification.spec.ts
Après init DB

stdout | src/modules/notifications/__tests__/notification.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/notifications/__tests__/notification.spec.ts (22 tests | 9 failed) 297ms
   ✓ Notifications API > POST /notifications > should create a new notification for the authenticated user (admin) 19ms
   ✓ Notifications API > POST /notifications > should fail to create a notification without required fields 9ms
   × Notifications API > POST /notifications > should fail to create a notification without authentication 15ms
     → expected 201 to be 401 // Object.is equality
   × Notifications API > POST /notifications/mark-all-as-read > should mark all unread notifications as read for admin 8ms
     → expected 4 to be 3 // Object.is equality
   × Notifications API > POST /notifications/mark-all-as-read > should fail to mark all as read without authentication 10ms
     → expected 200 to be 401 // Object.is equality
   × Notifications API > GET /notifications > should return a paginated list of notifications for the authenticated admin (all are now read) 17ms        
     → expected 4 to be 3 // Object.is equality
   ✓ Notifications API > GET /notifications > should filter notifications by isRead status (false) - should be 0 now 10ms
   × Notifications API > GET /notifications > should filter notifications by isRead status (true) - should be 3 now 15ms
     → expected 4 to be 3 // Object.is equality
   × Notifications API > GET /notifications > should filter notifications by type (e.g., info, which is now read) 17ms
     → expected 4 to be 3 // Object.is equality
   ✓ Notifications API > GET /notifications/unread-count > should return the correct unread count for admin (should be 0 now) 8ms
   ✓ Notifications API > PATCH /notifications/:id/read > should return 204 if a specific notification is already read for the owner (admin) 9ms
   ✓ Notifications API > PATCH /notifications/:id/read > should return 404 for non-existent notification 8ms
   ✓ Notifications API > PATCH /notifications/:id/read > should return 400 for invalid id format 6ms
   ✓ Notifications API > PATCH /notifications/:id/read > should return 403 if admin tries to mark a notification of another user 10ms
   × Notifications API > PATCH /notifications/:id/read > should fail to mark as read without authentication 8ms
     → expected 204 to be 401 // Object.is equality
   ✓ Notifications API > DELETE /notifications/:id > should soft delete a specific notification for the owner (admin) 33ms
   ✓ Notifications API > DELETE /notifications/:id > should return 404 for deleting a non-existent notification 9ms
   ✓ Notifications API > DELETE /notifications/:id > should return 400 for invalid id format 6ms
   ✓ Notifications API > DELETE /notifications/:id > should return 403 if admin tries to delete a notification of another user 10ms
   × Notifications API > DELETE /notifications/:id > should fail to delete a notification without authentication 11ms
     → expected 204 to be 401 // Object.is equality
   ✓ Notifications API > DELETE /notifications > should soft delete all remaining notifications for the authenticated admin 25ms
   × Notifications API > DELETE /notifications > should fail to delete all notifications without authentication 8ms
     → expected 204 to be 401 // Object.is equality
stdout | src/modules/customer-returns/__tests__/customer-return.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/customer-returns/__tests__/customer-return.spec.ts
Avant init DB

stdout | src/modules/customer-returns/__tests__/customer-return.spec.ts
Après init DB

stdout | src/modules/customer-returns/__tests__/customer-return.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts (28 tests | 28 failed) 324ms
   × CustomerReturns API > POST /customer-returns > should create a new customer return with items 7ms
     → expected 403 to be 201 // Object.is equality
   × CustomerReturns API > POST /customer-returns > should create a new customer return without items 11ms
     → expected 403 to be 201 // Object.is equality
   × CustomerReturns API > GET /customer-returns > should return a paginated list of customer returns 10ms
     → expected 403 to be 200 // Object.is equality
   × CustomerReturns API > GET /customer-returns > should filter customer returns by customerId 8ms
     → expected 403 to be 200 // Object.is equality
   × CustomerReturns API > GET /customer-returns > should filter customer returns by status 8ms
     → expected 403 to be 200 // Object.is equality
   × CustomerReturns API > GET /customer-returns/:id > should return a customer return by id 7ms
     → expected 403 to be 200 // Object.is equality
   × CustomerReturns API > GET /customer-returns/:id > should return 404 for non-existent customer return 8ms
     → expected 403 to be 404 // Object.is equality
   × CustomerReturns API > GET /customer-returns/:id > should return 400 for invalid id format 6ms
     → expected 403 to be 400 // Object.is equality
   × CustomerReturns API > PUT /customer-returns/:id > should update a customer return 7ms
     → expected 403 to be 200 // Object.is equality
   × CustomerReturns API > PUT /customer-returns/:id > should return 404 for updating a non-existent customer return 9ms
     → expected 403 to be 404 // Object.is equality
   × CustomerReturns API > PUT /customer-returns/:id > should return 400 for invalid id format 8ms
     → expected 403 to be 400 // Object.is equality
   × CustomerReturns API > PATCH /customer-returns/:id/approve > should approve a customer return request 15ms
     → expected 403 to be 200 // Object.is equality
   × CustomerReturns API > PATCH /customer-returns/:id/approve > should return 404 for non-existent customer return 14ms
     → expected 403 to be 404 // Object.is equality
   × CustomerReturns API > PATCH /customer-returns/:id/approve > should return 400 for invalid id format 14ms
     → expected 403 to be 400 // Object.is equality
   × CustomerReturns API > PATCH /customer-returns/:id/receive > should record reception of returned items 8ms
     → Cannot read properties of undefined (reading '0')
   × CustomerReturns API > PATCH /customer-returns/:id/receive > should return 404 for non-existent customer return 7ms
     → Cannot read properties of undefined (reading '0')
   × CustomerReturns API > PATCH /customer-returns/:id/receive > should return 400 for invalid id format 7ms
     → Cannot read properties of undefined (reading '0')
   × CustomerReturns API > PATCH /customer-returns/:id/receive > should return 400 if quantityReceived exceeds quantity to return 11ms
     → Cannot read properties of undefined (reading '0')
   × CustomerReturns API > POST /customer-returns/:id/complete > should complete the customer return process 15ms
     → expected 403 to be 200 // Object.is equality
   × CustomerReturns API > POST /customer-returns/:id/complete > should return 404 for non-existent customer return 13ms
     → expected 403 to be 404 // Object.is equality
   × CustomerReturns API > POST /customer-returns/:id/complete > should return 400 for invalid id format 15ms
     → expected 403 to be 400 // Object.is equality
   × CustomerReturns API > PATCH /customer-returns/:id/cancel > should cancel a customer return request 13ms
     → expected 403 to be 200 // Object.is equality
   × CustomerReturns API > PATCH /customer-returns/:id/cancel > should return 404 for non-existent customer return 13ms
     → expected 403 to be 404 // Object.is equality
   × CustomerReturns API > PATCH /customer-returns/:id/cancel > should return 400 for invalid id format 12ms
     → expected 403 to be 400 // Object.is equality
   × CustomerReturns API > DELETE /customer-returns/:id > should delete a customer return 13ms
     → expected 403 to be 204 // Object.is equality
   × CustomerReturns API > DELETE /customer-returns/:id > should return 404 for deleting a non-existent customer return 12ms
     → expected 403 to be 404 // Object.is equality
   × CustomerReturns API > DELETE /customer-returns/:id > should return 400 for invalid id format 13ms
     → expected 403 to be 400 // Object.is equality
   × CustomerReturns API > DELETE /customer-returns/:id > should return 400 if the return has processed financial transactions 12ms
     → expected 403 to be 400 // Object.is equality
stdout | src/modules/payment-methods/__tests__/payment-method.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/payment-methods/__tests__/payment-method.spec.ts
Avant init DB

stdout | src/modules/payment-methods/__tests__/payment-method.spec.ts
Après init DB

stdout | src/modules/payment-methods/__tests__/payment-method.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/payment-methods/__tests__/payment-method.spec.ts (23 tests | 5 failed) 245ms
   ✓ PaymentMethod API > POST /payment-methods > should create a new payment method (as admin) 18ms
   × PaymentMethod API > POST /payment-methods > should fail to create a payment method without authentication 7ms
     → expected 400 to be 401 // Object.is equality
   ✓ PaymentMethod API > POST /payment-methods > should return 400 for missing required name 7ms
   ✓ PaymentMethod API > POST /payment-methods > should return 400 for missing required type 7ms
   ✓ PaymentMethod API > POST /payment-methods > should return 400 for invalid type 6ms
   ✓ PaymentMethod API > POST /payment-methods > should return 400 for duplicate name 7ms
   ✓ PaymentMethod API > GET /payment-methods > should return a list of payment methods (as admin) 8ms
   × PaymentMethod API > GET /payment-methods > should fail to return payment methods without authentication 8ms
     → expected 200 to be 401 // Object.is equality
   ✓ PaymentMethod API > GET /payment-methods > should support pagination, sorting, and filtering 8ms
   ✓ PaymentMethod API > GET /payment-methods/:id > should return a specific payment method by ID (as admin) 8ms
   ✓ PaymentMethod API > GET /payment-methods/:id > should return 404 for a non-existent payment method ID 6ms
   ✓ PaymentMethod API > GET /payment-methods/:id > should return 400 for an invalid payment method ID format 8ms
   × PaymentMethod API > GET /payment-methods/:id > should fail to get a payment method without authentication 9ms
     → expected 200 to be 401 // Object.is equality
   ✓ PaymentMethod API > PUT /payment-methods/:id > should update a payment method by ID (as admin) 17ms
   ✓ PaymentMethod API > PUT /payment-methods/:id > should return 404 for updating a non-existent payment method ID 9ms
   ✓ PaymentMethod API > PUT /payment-methods/:id > should return 400 for an invalid payment method ID format 6ms
   ✓ PaymentMethod API > PUT /payment-methods/:id > should return 400 for invalid update data 8ms
   × PaymentMethod API > PUT /payment-methods/:id > should fail to update a payment method without authentication 19ms
     → expected 200 to be 401 // Object.is equality
   ✓ PaymentMethod API > DELETE /payment-methods/:id > should soft delete a payment method by ID (as admin) 14ms
   ✓ PaymentMethod API > DELETE /payment-methods/:id > should return 404 for deleting a non-existent payment method ID 6ms
   ✓ PaymentMethod API > DELETE /payment-methods/:id > should return 400 for an invalid payment method ID format 5ms
   × PaymentMethod API > DELETE /payment-methods/:id > should fail to delete a payment method without authentication 7ms
     → expected 404 to be 401 // Object.is equality
   ✓ PaymentMethod API > DELETE /payment-methods/:id > should return 400 if the payment method has associated payments 7ms
stdout | src/modules/product-categories/__test__/product-category.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/product-categories/__test__/product-category.spec.ts
Avant init DB

stdout | src/modules/product-categories/__test__/product-category.spec.ts
Après init DB

stdout | src/modules/product-categories/__test__/product-category.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/product-categories/__test__/product-category.spec.ts (21 tests | 5 failed) 271ms
   ✓ Product Category API > POST /product-categories > should create a new product category (as admin) 21ms
   × Product Category API > POST /product-categories > should fail to create a new product category without authentication 10ms
     → expected 400 to be 401 // Object.is equality
   ✓ Product Category API > POST /product-categories > should return 400 for invalid product category data (as admin) 7ms
   ✓ Product Category API > GET /product-categories > should return a list of product categories (as admin) 9ms
   × Product Category API > GET /product-categories > should fail to return a list of product categories without authentication 10ms
     → expected 200 to be 401 // Object.is equality
   ✓ Product Category API > GET /product-categories > should support pagination, sorting, and filtering (as admin) 10ms
   ✓ Product Category API > GET /product-categories/:id > should return a specific product category by ID (as admin) 9ms
   ✓ Product Category API > GET /product-categories/:id > should return 404 for a non-existent product category ID (as admin) 6ms
   ✓ Product Category API > GET /product-categories/:id > should return 400 for an invalid product category ID format (as admin) 7ms
   × Product Category API > GET /product-categories/:id > should fail to get a specific product category without authentication 8ms
     → expected 200 to be 401 // Object.is equality
   ✓ Product Category API > GET /product-categories/:id > should include children if includeChildren=true (as admin) 16ms
   ✓ Product Category API > PUT /product-categories/:id > should update a product category by ID (as admin) 17ms
   ✓ Product Category API > PUT /product-categories/:id > should return 404 for updating a non-existent product category ID (as admin) 8ms
   ✓ Product Category API > PUT /product-categories/:id > should return 400 for an invalid product category ID format (as admin) 6ms
   ✓ Product Category API > PUT /product-categories/:id > should return 400 for invalid update data (as admin) 8ms
   × Product Category API > PUT /product-categories/:id > should fail to update a product category without authentication 13ms
     → expected 200 to be 401 // Object.is equality
   ✓ Product Category API > DELETE /product-categories/:id > should soft delete a product category by ID (as admin) 14ms
   ✓ Product Category API > DELETE /product-categories/:id > should return 404 for deleting a non-existent product category ID (as admin) 8ms
   ✓ Product Category API > DELETE /product-categories/:id > should return 400 for an invalid product category ID format (as admin) 6ms
   ✓ Product Category API > DELETE /product-categories/:id > should return 400 if category is in use by another entity (e.g., Product) 10ms
   × Product Category API > DELETE /product-categories/:id > should fail to delete a product category without authentication 9ms
     → expected 404 to be 401 // Object.is equality
stdout | src/modules/bank-accounts/__tests__/bank-account.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/bank-accounts/__tests__/bank-account.spec.ts
Avant init DB

stdout | src/modules/bank-accounts/__tests__/bank-account.spec.ts
Après init DB

stdout | src/modules/bank-accounts/__tests__/bank-account.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts (23 tests | 23 failed) 177ms
   × BankAccount API > POST /bank-accounts > should create a new bank account (as admin) 7ms
     → expected 403 to be 201 // Object.is equality
   × BankAccount API > POST /bank-accounts > should fail to create a bank account without authentication 6ms
     → expected 403 to be 401 // Object.is equality
   × BankAccount API > POST /bank-accounts > should return 400 for missing required accountName 6ms
     → expected 403 to be 400 // Object.is equality
   × BankAccount API > POST /bank-accounts > should return 400 for missing required bankName 6ms
     → expected 403 to be 400 // Object.is equality
   × BankAccount API > POST /bank-accounts > should return 400 for missing required currencyId 6ms
     → expected 403 to be 400 // Object.is equality
   × BankAccount API > POST /bank-accounts > should return 400 for duplicate accountName 6ms
     → expected 403 to be 400 // Object.is equality
   × BankAccount API > POST /bank-accounts > should return 400 for duplicate IBAN 6ms
     → expected 403 to be 400 // Object.is equality
   × BankAccount API > GET /bank-accounts > should return a list of bank accounts (as admin) 8ms
     → expected 403 to be 200 // Object.is equality
   × BankAccount API > GET /bank-accounts > should fail to return bank accounts without authentication 6ms
     → expected 403 to be 401 // Object.is equality
   × BankAccount API > GET /bank-accounts > should support pagination, sorting, and filtering 6ms
     → expected 403 to be 200 // Object.is equality
   × BankAccount API > GET /bank-accounts/:id > should return a specific bank account by ID (as admin) 6ms
     → expected 403 to be 200 // Object.is equality
   × BankAccount API > GET /bank-accounts/:id > should return 404 for a non-existent bank account ID 6ms
     → expected 403 to be 404 // Object.is equality
   × BankAccount API > GET /bank-accounts/:id > should return 400 for an invalid bank account ID format 6ms
     → expected 403 to be 400 // Object.is equality
   × BankAccount API > GET /bank-accounts/:id > should fail to get a bank account without authentication 6ms
     → expected 403 to be 401 // Object.is equality
   × BankAccount API > PUT /bank-accounts/:id > should update a bank account by ID (as admin) 7ms
     → expected 403 to be 200 // Object.is equality
   × BankAccount API > PUT /bank-accounts/:id > should return 404 for updating a non-existent bank account ID 6ms
     → expected 403 to be 404 // Object.is equality
   × BankAccount API > PUT /bank-accounts/:id > should return 400 for an invalid bank account ID format 6ms
     → expected 403 to be 400 // Object.is equality
   × BankAccount API > PUT /bank-accounts/:id > should return 400 for invalid update data 6ms
     → expected 403 to be 400 // Object.is equality
   × BankAccount API > PUT /bank-accounts/:id > should fail to update a bank account without authentication 6ms
     → expected 403 to be 401 // Object.is equality
   × BankAccount API > DELETE /bank-accounts/:id > should soft delete a bank account by ID (as admin) 7ms
     → expected 403 to be 204 // Object.is equality
   × BankAccount API > DELETE /bank-accounts/:id > should return 404 for deleting a non-existent bank account ID 10ms
     → expected 403 to be 404 // Object.is equality
   × BankAccount API > DELETE /bank-accounts/:id > should return 400 for an invalid bank account ID format 7ms
     → expected 403 to be 400 // Object.is equality
   × BankAccount API > DELETE /bank-accounts/:id > should fail to delete a bank account without authentication 8ms
     → expected 403 to be 401 // Object.is equality
stdout | src/modules/deliveries/__tests__/delivery.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/deliveries/__tests__/delivery.spec.ts
Avant init DB

stdout | src/modules/deliveries/__tests__/delivery.spec.ts
Après init DB

stdout | src/modules/deliveries/__tests__/delivery.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts (34 tests | 34 failed) 240ms
   × Deliveries API > POST /deliveries > should create a new delivery with items 9ms
     → expected 403 to be 201 // Object.is equality
   × Deliveries API > POST /deliveries > should create a new delivery without items 6ms
     → expected 403 to be 201 // Object.is equality
   × Deliveries API > POST /deliveries > should fail to create a delivery without authentication 7ms
     → expected 403 to be 401 // Object.is equality
   × Deliveries API > POST /deliveries > should fail to create a delivery with invalid salesOrderId 6ms
     → expected 403 to be 400 // Object.is equality
   × Deliveries API > POST /deliveries > should fail to create a delivery with invalid salesOrderItemId 6ms
     → expected 403 to be 400 // Object.is equality
   × Deliveries API > POST /deliveries > should fail to create a delivery with quantityShipped exceeding available quantity 7ms
     → expected 403 to be 400 // Object.is equality
   × Deliveries API > GET /deliveries > should return a paginated list of deliveries 5ms
     → expected 403 to be 200 // Object.is equality
   × Deliveries API > GET /deliveries > should filter deliveries by salesOrderId 6ms
     → expected 403 to be 200 // Object.is equality
   × Deliveries API > GET /deliveries > should filter deliveries by status 6ms
     → expected 403 to be 200 // Object.is equality
   × Deliveries API > GET /deliveries > should search deliveries by deliveryNumber 1ms
     → Cannot read properties of undefined (reading 'substring')
   × Deliveries API > GET /deliveries > should fail to get deliveries without authentication 6ms
     → expected 403 to be 401 // Object.is equality
   × Deliveries API > GET /deliveries/:id > should return a delivery by id 6ms
     → expected 403 to be 200 // Object.is equality
   × Deliveries API > GET /deliveries/:id > should return 404 for non-existent delivery 6ms
     → expected 403 to be 404 // Object.is equality
   × Deliveries API > GET /deliveries/:id > should return 400 for invalid id format 7ms
     → expected 403 to be 400 // Object.is equality
   × Deliveries API > GET /deliveries/:id > should fail to get a delivery without authentication 6ms
     → expected 403 to be 401 // Object.is equality
   × Deliveries API > PUT /deliveries/:id > should update a delivery header 6ms
     → expected 403 to be 200 // Object.is equality
   × Deliveries API > PUT /deliveries/:id > should return 404 for updating a non-existent delivery 7ms
     → expected 403 to be 404 // Object.is equality
   × Deliveries API > PUT /deliveries/:id > should return 400 for invalid id format 6ms
     → expected 403 to be 400 // Object.is equality
   × Deliveries API > PUT /deliveries/:id > should fail to update a delivery without authentication 6ms
     → expected 403 to be 401 // Object.is equality
   × Deliveries API > PUT /deliveries/:id > should fail to update a delivery if status is SHIPPED or DELIVERED 6ms
     → expected 403 to be 201 // Object.is equality
   × Deliveries API > PATCH /deliveries/:id/ship > should create a delivery to be shipped 7ms
     → expected 403 to be 201 // Object.is equality
   × Deliveries API > PATCH /deliveries/:id/ship > should mark a delivery as shipped 6ms
     → expected 403 to be 200 // Object.is equality
   × Deliveries API > PATCH /deliveries/:id/ship > should fail to ship a non-existent delivery 6ms
     → expected 403 to be 404 // Object.is equality
   × Deliveries API > PATCH /deliveries/:id/ship > should fail to ship a delivery already shipped or delivered 11ms
     → expected 403 to be 400 // Object.is equality
   × Deliveries API > PATCH /deliveries/:id/deliver > should create and ship a delivery to be delivered 6ms
     → expected 403 to be 201 // Object.is equality
   × Deliveries API > PATCH /deliveries/:id/deliver > should mark a delivery as delivered 7ms
     → expected 403 to be 200 // Object.is equality
   × Deliveries API > PATCH /deliveries/:id/deliver > should fail to deliver a non-existent delivery 6ms
     → expected 403 to be 404 // Object.is equality
   × Deliveries API > PATCH /deliveries/:id/deliver > should fail to deliver a delivery not in SHIPPED status 7ms
     → expected 403 to be 400 // Object.is equality
   × Deliveries API > DELETE /deliveries/:id > should create a delivery to be deleted 6ms
     → expected 403 to be 201 // Object.is equality
   × Deliveries API > DELETE /deliveries/:id > should soft delete a delivery 5ms
     → expected 403 to be 204 // Object.is equality
   × Deliveries API > DELETE /deliveries/:id > should return 404 for deleting a non-existent delivery 6ms
     → expected 403 to be 404 // Object.is equality
   × Deliveries API > DELETE /deliveries/:id > should return 400 for invalid id format 5ms
     → expected 403 to be 400 // Object.is equality
   × Deliveries API > DELETE /deliveries/:id > should fail to delete a delivery without authentication 6ms
     → expected 403 to be 401 // Object.is equality
   × Deliveries API > DELETE /deliveries/:id > should return 400 if the delivery is linked to an invoice 7ms
     → expected 403 to be 400 // Object.is equality
stdout | src/modules/customer-groups/__tests__/customer-group.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/customer-groups/__tests__/customer-group.spec.ts
Avant init DB

stdout | src/modules/customer-groups/__tests__/customer-group.spec.ts
Après init DB

stdout | src/modules/customer-groups/__tests__/customer-group.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/customer-groups/__tests__/customer-group.spec.ts (19 tests | 7 failed) 232ms
   ✓ CustomerGroup API > POST /customer-groups > should create a new customer group (as user) 23ms
   × CustomerGroup API > POST /customer-groups > should fail to create a group without authentication 10ms
     → expected 400 to be 401 // Object.is equality
   ✓ CustomerGroup API > POST /customer-groups > should return 400 for invalid group data 7ms
   × CustomerGroup API > GET /customer-groups > should return a list of customer groups (as user) 7ms
     → expected 400 to be 200 // Object.is equality
   × CustomerGroup API > GET /customer-groups > should fail to return groups without authentication 6ms
     → expected 400 to be 401 // Object.is equality
   × CustomerGroup API > GET /customer-groups > should support pagination, sorting, and filtering 7ms
     → expected 400 to be 200 // Object.is equality
   ✓ CustomerGroup API > GET /customer-groups/:id > should return a specific group by ID (as user) 8ms
   ✓ CustomerGroup API > GET /customer-groups/:id > should return 404 for a non-existent group ID 8ms
   ✓ CustomerGroup API > GET /customer-groups/:id > should return 400 for an invalid group ID format 6ms
   × CustomerGroup API > GET /customer-groups/:id > should fail to get a group without authentication 7ms
     → expected 200 to be 401 // Object.is equality
   ✓ CustomerGroup API > PUT /customer-groups/:id > should update a group by ID (as user) 18ms
   ✓ CustomerGroup API > PUT /customer-groups/:id > should return 404 for updating a non-existent group ID 11ms
   ✓ CustomerGroup API > PUT /customer-groups/:id > should return 400 for an invalid group ID format 9ms
   ✓ CustomerGroup API > PUT /customer-groups/:id > should return 400 for invalid update data 8ms
   × CustomerGroup API > PUT /customer-groups/:id > should fail to update a group without authentication 18ms
     → expected 200 to be 401 // Object.is equality
   ✓ CustomerGroup API > DELETE /customer-groups/:id > should soft delete a group by ID (as user) 16ms
   ✓ CustomerGroup API > DELETE /customer-groups/:id > should return 404 for deleting a non-existent group ID 7ms
   ✓ CustomerGroup API > DELETE /customer-groups/:id > should return 400 for an invalid group ID format 6ms
   × CustomerGroup API > DELETE /customer-groups/:id > should fail to delete a group without authentication 7ms
     → expected 404 to be 401 // Object.is equality
stdout | src/modules/currencies/__tests__/currency.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/currencies/__tests__/currency.spec.ts
Avant init DB

stdout | src/modules/currencies/__tests__/currency.spec.ts
Après init DB

stdout | src/modules/currencies/__tests__/currency.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/currencies/__tests__/currency.spec.ts (24 tests | 24 failed) 215ms
   × Currency API > POST /currencies > should create a new currency (as admin) 7ms
     → expected 403 to be 201 // Object.is equality
   × Currency API > POST /currencies > should fail to create a new currency without authentication 6ms
     → expected 403 to be 401 // Object.is equality
   × Currency API > POST /currencies > should return 400 for invalid currency data (as admin) 8ms
     → expected 403 to be 400 // Object.is equality
   × Currency API > GET /currencies > should return a list of currencies (as admin) 6ms
     → expected 400 to be 200 // Object.is equality
   × Currency API > GET /currencies > should fail to return a list of currencies without authentication 7ms
     → expected 400 to be 401 // Object.is equality
   × Currency API > GET /currencies > should support pagination, sorting, and filtering (as admin) 6ms
     → expected 400 to be 200 // Object.is equality
   × Currency API > GET /currencies/:id > should return a specific currency by ID (as admin) 6ms
     → expected 403 to be 200 // Object.is equality
   × Currency API > GET /currencies/:id > should return 404 for a non-existent currency ID (as admin) 6ms
     → expected 403 to be 404 // Object.is equality
   × Currency API > GET /currencies/:id > should return 400 for an invalid currency ID format (as admin) 7ms
     → expected 403 to be 400 // Object.is equality
   × Currency API > GET /currencies/:id > should fail to get a specific currency without authentication 7ms
     → expected 403 to be 401 // Object.is equality
   × Currency API > PUT /currencies/:id > should update a currency by ID (as admin) 9ms
     → expected 403 to be 200 // Object.is equality
   × Currency API > PUT /currencies/:id > should return 404 for updating a non-existent currency ID (as admin) 8ms
     → expected 403 to be 404 // Object.is equality
   × Currency API > PUT /currencies/:id > should return 400 for an invalid currency ID format (as admin) 9ms
     → expected 403 to be 400 // Object.is equality
   × Currency API > PUT /currencies/:id > should return 400 for invalid update data (as admin) 10ms
     → expected 403 to be 400 // Object.is equality
   × Currency API > PUT /currencies/:id > should fail to update a currency without authentication 7ms
     → expected 403 to be 401 // Object.is equality
   × Currency API > DELETE /currencies/:id > should soft delete a currency by ID (as admin) 9ms
     → expected 403 to be 204 // Object.is equality
   × Currency API > DELETE /currencies/:id > should return 400 if trying to delete a currency used by a company 9ms
     → expected 403 to be 400 // Object.is equality
   × Currency API > DELETE /currencies/:id > should return 404 for deleting a non-existent currency ID (as admin) 9ms
     → expected 403 to be 404 // Object.is equality
   × Currency API > DELETE /currencies/:id > should return 400 for an invalid currency ID format (as admin) 7ms
     → expected 403 to be 400 // Object.is equality
   × Currency API > DELETE /currencies/:id > should fail to delete a currency without authentication 6ms
     → expected 403 to be 401 // Object.is equality
   × Currency API > PATCH /currencies/:id/set-default > should set a currency as the default company currency (as admin) 6ms
     → expected 403 to be 200 // Object.is equality
   × Currency API > PATCH /currencies/:id/set-default > should return 404 for setting a non-existent currency as default (as admin) 6ms
     → expected 403 to be 404 // Object.is equality
   × Currency API > PATCH /currencies/:id/set-default > should return 400 for an invalid currency ID format when setting default (as admin) 7ms
     → expected 403 to be 400 // Object.is equality
   × Currency API > PATCH /currencies/:id/set-default > should fail to set default currency without authentication 7ms
     → expected 403 to be 401 // Object.is equality
stdout | src/modules/imports/__tests__/import-sales-order.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/imports/__tests__/import-sales-order.spec.ts
Avant init DB

stdout | src/modules/imports/__tests__/import-sales-order.spec.ts
Après init DB

stdout | src/modules/imports/__tests__/import-sales-order.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

stdout | src/modules/imports/__tests__/import-sales-order.spec.ts
query failed: SELECT `SalesOrder`.`id` AS `SalesOrder_id`, `SalesOrder`.`created_time` AS `SalesOrder_created_time`, `SalesOrder`.`updated_time` AS `SalesOrder_updated_time`, `SalesOrder`.`deleted_time` AS `SalesOrder_deleted_time`, `SalesOrder`.`order_number` AS `SalesOrder_order_number`, `SalesOrder`.`customer_id` AS `SalesOrder_customer_id`, `SalesOrder`.`quote_id` AS `SalesOrder_quote_id`, `SalesOrder`.`order_date` AS `SalesOrder_order_date`, `SalesOrder`.`status` AS `SalesOrder_status`, `SalesOrder`.`currency_id` AS `SalesOrder_currency_id`, `SalesOrder`.`total_amount_ht` AS `SalesOrder_total_amount_ht`, `SalesOrder`.`total_vat_amount` AS `SalesOrder_total_vat_amount`, `SalesOrder`.`total_amount_ttc` AS `SalesOrder_total_amount_ttc`, `SalesOrder`.`shipping_fees_ht` AS `SalesOrder_shipping_fees_ht`, `SalesOrder`.`shipping_address_id` AS `SalesOrder_shipping_address_id`, `SalesOrder`.`billing_address_id` AS `SalesOrder_billing_address_id`, `SalesOrder`.`dispatch_warehouse_id` AS `SalesOrder_dispatch_warehouse_id`, `SalesOrder`.`dispatch_shop_id` AS `SalesOrder_dispatch_shop_id`, `SalesOrder`.`notes` AS `SalesOrder_notes`, `SalesOrder`.`created_by_user_id` AS `SalesOrder_created_by_user_id`, `SalesOrder`.`updated_by_user_id` AS `SalesOrder_updated_by_user_id` FROM `sales_orders` `SalesOrder` WHERE `SalesOrder`.`id` IN (?) -- PARAMETERS: [29]
error: Error: Can't add new command when connection is in closed state
query failed: SELECT `SalesOrderItem`.`id` AS `SalesOrderItem_id`, `SalesOrderItem`.`created_time` AS `SalesOrderItem_created_time`, `SalesOrderItem`.`updated_time` AS `SalesOrderItem_updated_time`, `SalesOrderItem`.`deleted_time` AS `SalesOrderItem_deleted_time`, `SalesOrderItem`.`sales_order_id` AS `SalesOrderItem_sales_order_id`, `SalesOrderItem`.`product_id` AS `SalesOrderItem_product_id`, `SalesOrderItem`.`product_variant_id` AS `SalesOrderItem_product_variant_id`, `SalesOrderItem`.`description` AS `SalesOrderItem_description`, `SalesOrderItem`.`quantity` AS `SalesOrderItem_quantity`, `SalesOrderItem`.`unit_price_ht` AS `SalesOrderItem_unit_price_ht`, `SalesOrderItem`.`discount_percentage` AS `SalesOrderItem_discount_percentage`, `SalesOrderItem`.`vat_rate_percentage` AS `SalesOrderItem_vat_rate_percentage`, `SalesOrderItem`.`total_line_amount_ht` AS `SalesOrderItem_total_line_amount_ht`, `SalesOrderItem`.`quantity_shipped` AS `SalesOrderItem_quantity_shipped`, `SalesOrderItem`.`quantity_invoiced` AS `SalesOrderItem_quantity_invoiced` FROM `sales_order_items` `SalesOrderItem` WHERE `SalesOrderItem`.`id` IN (?, ?) -- PARAMETERS: [32,33]
error: Error: Can't add new command when connection is in closed state

stdout | src/modules/imports/__tests__/import-sales-order.spec.ts
query failed: ROLLBACK
error: Error: Can't add new command when connection is in closed state

stdout | src/modules/imports/__tests__/import-sales-order.spec.ts
query failed: SELECT `SalesOrder`.`id` AS `SalesOrder_id`, `SalesOrder`.`created_time` AS `SalesOrder_created_time`, `SalesOrder`.`updated_time` AS `SalesOrder_updated_time`, `SalesOrder`.`deleted_time` AS `SalesOrder_deleted_time`, `SalesOrder`.`order_number` AS `SalesOrder_order_number`, `SalesOrder`.`customer_id` AS `SalesOrder_customer_id`, `SalesOrder`.`quote_id` AS `SalesOrder_quote_id`, `SalesOrder`.`order_date` AS `SalesOrder_order_date`, `SalesOrder`.`status` AS `SalesOrder_status`, `SalesOrder`.`currency_id` AS `SalesOrder_currency_id`, `SalesOrder`.`total_amount_ht` AS `SalesOrder_total_amount_ht`, `SalesOrder`.`total_vat_amount` AS `SalesOrder_total_vat_amount`, `SalesOrder`.`total_amount_ttc` AS `SalesOrder_total_amount_ttc`, `SalesOrder`.`shipping_fees_ht` AS `SalesOrder_shipping_fees_ht`, `SalesOrder`.`shipping_address_id` AS `SalesOrder_shipping_address_id`, `SalesOrder`.`billing_address_id` AS `SalesOrder_billing_address_id`, `SalesOrder`.`dispatch_warehouse_id` AS `SalesOrder_dispatch_warehouse_id`, `SalesOrder`.`dispatch_shop_id` AS `SalesOrder_dispatch_shop_id`, `SalesOrder`.`notes` AS `SalesOrder_notes`, `SalesOrder`.`created_by_user_id` AS `SalesOrder_created_by_user_id`, `SalesOrder`.`updated_by_user_id` AS `SalesOrder_updated_by_user_id`, `SalesOrder__SalesOrder_customer`.`id` AS `SalesOrder__SalesOrder_customer_id`, `SalesOrder__SalesOrder_customer`.`created_time` AS `SalesOrder__SalesOrder_customer_created_time`, `SalesOrder__SalesOrder_customer`.`updated_time` AS `SalesOrder__SalesOrder_customer_updated_time`, `SalesOrder__SalesOrder_customer`.`deleted_time` AS `SalesOrder__SalesOrder_customer_deleted_time`, `SalesOrder__SalesOrder_customer`.`first_name` AS `SalesOrder__SalesOrder_customer_first_name`, `SalesOrder__SalesOrder_customer`.`last_name` AS `SalesOrder__SalesOrder_customer_last_name`, `SalesOrder__SalesOrder_customer`.`company_name` AS `SalesOrder__SalesOrder_customer_company_name`, `SalesOrder__SalesOrder_customer`.`email` AS `SalesOrder__SalesOrder_customer_email`, `SalesOrder__SalesOrder_customer`.`phone_number` AS `SalesOrder__SalesOrder_customer_phone_number`, `SalesOrder__SalesOrder_customer`.`vat_number` AS `SalesOrder__SalesOrder_customer_vat_number`, `SalesOrder__SalesOrder_customer`.`siret_number` AS `SalesOrder__SalesOrder_customer_siret_number`, `SalesOrder__SalesOrder_customer`.`default_currency_id` AS `SalesOrder__SalesOrder_customer_default_currency_id`, `SalesOrder__SalesOrder_customer`.`default_payment_terms_days` AS `SalesOrder__SalesOrder_customer_default_payment_terms_days`, `SalesOrder__SalesOrder_customer`.`credit_limit` AS `SalesOrder__SalesOrder_customer_credit_limit`, `SalesOrder__SalesOrder_customer`.`customer_group_id` AS `SalesOrder__SalesOrder_customer_customer_group_id`, `SalesOrder__SalesOrder_customer`.`billing_address_id` AS `SalesOrder__SalesOrder_customer_billing_address_id`, `SalesOrder__SalesOrder_customer`.`default_shipping_address_id` AS `SalesOrder__SalesOrder_customer_default_shipping_address_id`, `SalesOrder__SalesOrder_customer`.`notes` AS `SalesOrder__SalesOrder_customer_notes`, `SalesOrder__SalesOrder_customer`.`created_by_user_id` AS `SalesOrder__SalesOrder_customer_created_by_user_id`, `SalesOrder__SalesOrder_customer`.`updated_by_user_id` AS `SalesOrder__SalesOrder_customer_updated_by_user_id`, `4834180fc505e0204224950d2b7cc28e11e1f746`.`id` AS `4834180fc505e0204224950d2b7cc28e11e1f746_id`, `4834180fc505e0204224950d2b7cc28e11e1f746`.`created_time` AS `4834180fc505e0204224950d2b7cc28e11e1f746_created_time`, `4834180fc505e0204224950d2b7cc28e11e1f746`.`updated_time` AS `4834180fc505e0204224950d2b7cc28e11e1f746_updated_time`, `4834180fc505e0204224950d2b7cc28e11e1f746`.`deleted_time` AS `4834180fc505e0204224950d2b7cc28e11e1f746_deleted_time`, `4834180fc505e0204224950d2b7cc28e11e1f746`.`street_line1` AS `4834180fc505e0204224950d2b7cc28e11e1f746_street_line1`, `4834180fc505e0204224950d2b7cc28e11e1f746`.`street_line2` AS `4834180fc505e0204224950d2b7cc28e11e1f746_street_line2`, `4834180fc505e0204224950d2b7cc28e11e1f746`.`city` AS `4834180fc505e0204224950d2b7cc28e11e1f746_city`, `4834180fc505e0204224950d2b7cc28e11e1f746`.`postal_code` AS `4834180fc505e0204224950d2b7cc28e11e1f746_postal_code`, `4834180fc505e0204224950d2b7cc28e11e1f746`.`state_province` AS `4834180fc505e0204224950d2b7cc28e11e1f746_state_province`, `4834180fc505e0204224950d2b7cc28e11e1f746`.`country` AS `4834180fc505e0204224950d2b7cc28e11e1f746_country`, `4834180fc505e0204224950d2b7cc28e11e1f746`.`notes` AS `4834180fc505e0204224950d2b7cc28e11e1f746_notes`, `746c85b0681cecfc62b152d0f0419df796048a26`.`id` AS `746c85b0681cecfc62b152d0f0419df796048a26_id`, `746c85b0681cecfc62b152d0f0419df796048a26`.`created_time` AS `746c85b0681cecfc62b152d0f0419df796048a26_created_time`, `746c85b0681cecfc62b152d0f0419df796048a26`.`updated_time` AS `746c85b0681cecfc62b152d0f0419df796048a26_updated_time`, `746c85b0681cecfc62b152d0f0419df796048a26`.`deleted_time` AS `746c85b0681cecfc62b152d0f0419df796048a26_deleted_time`, `746c85b0681cecfc62b152d0f0419df796048a26`.`street_line1` AS `746c85b0681cecfc62b152d0f0419df796048a26_street_line1`, `746c85b0681cecfc62b152d0f0419df796048a26`.`street_line2` AS `746c85b0681cecfc62b152d0f0419df796048a26_street_line2`, `746c85b0681cecfc62b152d0f0419df796048a26`.`city` AS `746c85b0681cecfc62b152d0f0419df796048a26_city`, `746c85b0681cecfc62b152d0f0419df796048a26`.`postal_code` AS `746c85b0681cecfc62b152d0f0419df796048a26_postal_code`, `746c85b0681cecfc62b152d0f0419df796048a26`.`state_province` AS `746c85b0681cecfc62b152d0f0419df796048a26_state_province`, `746c85b0681cecfc62b152d0f0419df796048a26`.`country` AS `746c85b0681cecfc62b152d0f0419df796048a26_country`, `746c85b0681cecfc62b152d0f0419df796048a26`.`notes` AS `746c85b0681cecfc62b152d0f0419df796048a26_notes`, `SalesOrder__SalesOrder_quote`.`id` AS `SalesOrder__SalesOrder_quote_id`, `SalesOrder__SalesOrder_quote`.`created_time` AS `SalesOrder__SalesOrder_quote_created_time`, `SalesOrder__SalesOrder_quote`.`updated_time` AS `SalesOrder__SalesOrder_quote_updated_time`, `SalesOrder__SalesOrder_quote`.`deleted_time` AS `SalesOrder__SalesOrder_quote_deleted_time`, `SalesOrder__SalesOrder_quote`.`quote_number` AS `SalesOrder__SalesOrder_quote_quote_number`, `SalesOrder__SalesOrder_quote`.`customer_id` AS `SalesOrder__SalesOrder_quote_customer_id`, `SalesOrder__SalesOrder_quote`.`issue_date` AS `SalesOrder__SalesOrder_quote_issue_date`, `SalesOrder__SalesOrder_quote`.`expiry_date` AS `SalesOrder__SalesOrder_quote_expiry_date`, `SalesOrder__SalesOrder_quote`.`status` AS `SalesOrder__SalesOrder_quote_status`, `SalesOrder__SalesOrder_quote`.`currency_id` AS `SalesOrder__SalesOrder_quote_currency_id`, `SalesOrder__SalesOrder_quote`.`shipping_address_id` AS `SalesOrder__SalesOrder_quote_shipping_address_id`, `SalesOrder__SalesOrder_quote`.`billing_address_id` AS `SalesOrder__SalesOrder_quote_billing_address_id`, `SalesOrder__SalesOrder_quote`.`total_amount_ht` AS `SalesOrder__SalesOrder_quote_total_amount_ht`, `SalesOrder__SalesOrder_quote`.`total_vat_amount` AS `SalesOrder__SalesOrder_quote_total_vat_amount`, `SalesOrder__SalesOrder_quote`.`total_amount_ttc` AS `SalesOrder__SalesOrder_quote_total_amount_ttc`, `SalesOrder__SalesOrder_quote`.`notes` AS `SalesOrder__SalesOrder_quote_notes`, `SalesOrder__SalesOrder_quote`.`terms_and_conditions` AS `SalesOrder__SalesOrder_quote_terms_and_conditions`, `SalesOrder__SalesOrder_quote`.`created_by_user_id` AS `SalesOrder__SalesOrder_quote_created_by_user_id`, `SalesOrder__SalesOrder_quote`.`updated_by_user_id` AS `SalesOrder__SalesOrder_quote_updated_by_user_id`, `SalesOrder__SalesOrder_currency`.`id` AS `SalesOrder__SalesOrder_currency_id`, `SalesOrder__SalesOrder_currency`.`created_time` AS `SalesOrder__SalesOrder_currency_created_time`, `SalesOrder__SalesOrder_currency`.`updated_time` AS `SalesOrder__SalesOrder_currency_updated_time`, `SalesOrder__SalesOrder_currency`.`deleted_time` AS `SalesOrder__SalesOrder_currency_deleted_time`, `SalesOrder__SalesOrder_currency`.`code` AS `SalesOrder__SalesOrder_currency_code`, `SalesOrder__SalesOrder_currency`.`name` AS `SalesOrder__SalesOrder_currency_name`, `SalesOrder__SalesOrder_currency`.`symbol` AS `SalesOrder__SalesOrder_currency_symbol`, `SalesOrder__SalesOrder_currency`.`exchange_rate_to_company_default` AS `f82f500cbb36b91f27b6df617b93c138da4bb4d8`, `SalesOrder__SalesOrder_currency`.`is_active` AS `SalesOrder__SalesOrder_currency_is_active`, `SalesOrder__SalesOrder_shippingAddress`.`id` AS `SalesOrder__SalesOrder_shippingAddress_id`, `SalesOrder__SalesOrder_shippingAddress`.`created_time` AS `SalesOrder__SalesOrder_shippingAddress_created_time`, `SalesOrder__SalesOrder_shippingAddress`.`updated_time` AS `SalesOrder__SalesOrder_shippingAddress_updated_time`, `SalesOrder__SalesOrder_shippingAddress`.`deleted_time` AS `SalesOrder__SalesOrder_shippingAddress_deleted_time`, `SalesOrder__SalesOrder_shippingAddress`.`street_line1` AS `SalesOrder__SalesOrder_shippingAddress_street_line1`, `SalesOrder__SalesOrder_shippingAddress`.`street_line2` AS `SalesOrder__SalesOrder_shippingAddress_street_line2`, `SalesOrder__SalesOrder_shippingAddress`.`city` AS `SalesOrder__SalesOrder_shippingAddress_city`, `SalesOrder__SalesOrder_shippingAddress`.`postal_code` AS `SalesOrder__SalesOrder_shippingAddress_postal_code`, `SalesOrder__SalesOrder_shippingAddress`.`state_province` AS `SalesOrder__SalesOrder_shippingAddress_state_province`, `SalesOrder__SalesOrder_shippingAddress`.`country` AS `SalesOrder__SalesOrder_shippingAddress_country`, `SalesOrder__SalesOrder_shippingAddress`.`notes` AS `SalesOrder__SalesOrder_shippingAddress_notes`, `SalesOrder__SalesOrder_billingAddress`.`id` AS `SalesOrder__SalesOrder_billingAddress_id`, `SalesOrder__SalesOrder_billingAddress`.`created_time` AS `SalesOrder__SalesOrder_billingAddress_created_time`, `SalesOrder__SalesOrder_billingAddress`.`updated_time` AS `SalesOrder__SalesOrder_billingAddress_updated_time`, `SalesOrder__SalesOrder_billingAddress`.`deleted_time` AS `SalesOrder__SalesOrder_billingAddress_deleted_time`, `SalesOrder__SalesOrder_billingAddress`.`street_line1` AS `SalesOrder__SalesOrder_billingAddress_street_line1`, `SalesOrder__SalesOrder_billingAddress`.`street_line2` AS `SalesOrder__SalesOrder_billingAddress_street_line2`, `SalesOrder__SalesOrder_billingAddress`.`city` AS `SalesOrder__SalesOrder_billingAddress_city`, `SalesOrder__SalesOrder_billingAddress`.`postal_code` AS `SalesOrder__SalesOrder_billingAddress_postal_code`, `SalesOrder__SalesOrder_billingAddress`.`state_province` AS `SalesOrder__SalesOrder_billingAddress_state_province`, `SalesOrder__SalesOrder_billingAddress`.`country` AS `SalesOrder__SalesOrder_billingAddress_country`, `SalesOrder__SalesOrder_billingAddress`.`notes` AS `SalesOrder__SalesOrder_billingAddress_notes`, `SalesOrder__SalesOrder_dispatchWarehouse`.`id` AS `SalesOrder__SalesOrder_dispatchWarehouse_id`, `SalesOrder__SalesOrder_dispatchWarehouse`.`created_time` AS `SalesOrder__SalesOrder_dispatchWarehouse_created_time`, `SalesOrder__SalesOrder_dispatchWarehouse`.`updated_time` AS `SalesOrder__SalesOrder_dispatchWarehouse_updated_time`, `SalesOrder__SalesOrder_dispatchWarehouse`.`deleted_time` AS `SalesOrder__SalesOrder_dispatchWarehouse_deleted_time`, `SalesOrder__SalesOrder_dispatchWarehouse`.`name` AS `SalesOrder__SalesOrder_dispatchWarehouse_name`, `SalesOrder__SalesOrder_dispatchWarehouse`.`code` AS `SalesOrder__SalesOrder_dispatchWarehouse_code`, `SalesOrder__SalesOrder_dispatchWarehouse`.`address_id` AS `SalesOrder__SalesOrder_dispatchWarehouse_address_id`, `SalesOrder__SalesOrder_dispatchWarehouse`.`manager_id` AS `SalesOrder__SalesOrder_dispatchWarehouse_manager_id`, `SalesOrder__SalesOrder_dispatchWarehouse`.`capacity_notes` AS `SalesOrder__SalesOrder_dispatchWarehouse_capacity_notes`, `SalesOrder__SalesOrder_dispatchWarehouse`.`created_by_user_id` AS `SalesOrder__SalesOrder_dispatchWarehouse_created_by_user_id`, `SalesOrder__SalesOrder_dispatchWarehouse`.`updated_by_user_id` AS `SalesOrder__SalesOrder_dispatchWarehouse_updated_by_user_id`, `SalesOrder__SalesOrder_dispatchShop`.`id` AS `SalesOrder__SalesOrder_dispatchShop_id`, `SalesOrder__SalesOrder_dispatchShop`.`created_time` AS `SalesOrder__SalesOrder_dispatchShop_created_time`, `SalesOrder__SalesOrder_dispatchShop`.`updated_time` AS `SalesOrder__SalesOrder_dispatchShop_updated_time`, `SalesOrder__SalesOrder_dispatchShop`.`deleted_time` AS `SalesOrder__SalesOrder_dispatchShop_deleted_time`, `SalesOrder__SalesOrder_dispatchShop`.`name` AS `SalesOrder__SalesOrder_dispatchShop_name`, `SalesOrder__SalesOrder_dispatchShop`.`code` AS `SalesOrder__SalesOrder_dispatchShop_code`, `SalesOrder__SalesOrder_dispatchShop`.`address_id` AS `SalesOrder__SalesOrder_dispatchShop_address_id`, `SalesOrder__SalesOrder_dispatchShop`.`manager_id` AS `SalesOrder__SalesOrder_dispatchShop_manager_id`, `SalesOrder__SalesOrder_dispatchShop`.`opening_hours_notes` AS `SalesOrder__SalesOrder_dispatchShop_opening_hours_notes`, `SalesOrder__SalesOrder_dispatchShop`.`created_by_user_id` AS `SalesOrder__SalesOrder_dispatchShop_created_by_user_id`, `SalesOrder__SalesOrder_dispatchShop`.`updated_by_user_id` AS `SalesOrder__SalesOrder_dispatchShop_updated_by_user_id`, `SalesOrder__SalesOrder_items`.`id` AS `SalesOrder__SalesOrder_items_id`, `SalesOrder__SalesOrder_items`.`created_time` AS `SalesOrder__SalesOrder_items_created_time`, `SalesOrder__SalesOrder_items`.`updated_time` AS `SalesOrder__SalesOrder_items_updated_time`, `SalesOrder__SalesOrder_items`.`deleted_time` AS `SalesOrder__SalesOrder_items_deleted_time`, `SalesOrder__SalesOrder_items`.`sales_order_id` AS `SalesOrder__SalesOrder_items_sales_order_id`, `SalesOrder__SalesOrder_items`.`product_id` AS `SalesOrder__SalesOrder_items_product_id`, `SalesOrder__SalesOrder_items`.`product_variant_id` AS `SalesOrder__SalesOrder_items_product_variant_id`, `SalesOrder__SalesOrder_items`.`description` AS `SalesOrder__SalesOrder_items_description`, `SalesOrder__SalesOrder_items`.`quantity` AS `SalesOrder__SalesOrder_items_quantity`, `SalesOrder__SalesOrder_items`.`unit_price_ht` AS `SalesOrder__SalesOrder_items_unit_price_ht`, `SalesOrder__SalesOrder_items`.`discount_percentage` AS `SalesOrder__SalesOrder_items_discount_percentage`, `SalesOrder__SalesOrder_items`.`vat_rate_percentage` AS `SalesOrder__SalesOrder_items_vat_rate_percentage`, `SalesOrder__SalesOrder_items`.`total_line_amount_ht` AS `SalesOrder__SalesOrder_items_total_line_amount_ht`, `SalesOrder__SalesOrder_items`.`quantity_shipped` AS `SalesOrder__SalesOrder_items_quantity_shipped`, `SalesOrder__SalesOrder_items`.`quantity_invoiced` AS `SalesOrder__SalesOrder_items_quantity_invoiced`, `2015665013dcd75dc733aa93fabb00b453267281`.`id` AS `2015665013dcd75dc733aa93fabb00b453267281_id`, `2015665013dcd75dc733aa93fabb00b453267281`.`created_time` AS `2015665013dcd75dc733aa93fabb00b453267281_created_time`, `2015665013dcd75dc733aa93fabb00b453267281`.`updated_time` AS `2015665013dcd75dc733aa93fabb00b453267281_updated_time`, `2015665013dcd75dc733aa93fabb00b453267281`.`deleted_time` AS `2015665013dcd75dc733aa93fabb00b453267281_deleted_time`, `2015665013dcd75dc733aa93fabb00b453267281`.`sku` AS `2015665013dcd75dc733aa93fabb00b453267281_sku`, `2015665013dcd75dc733aa93fabb00b453267281`.`name` AS `2015665013dcd75dc733aa93fabb00b453267281_name`, `2015665013dcd75dc733aa93fabb00b453267281`.`description` AS `2015665013dcd75dc733aa93fabb00b453267281_description`, `2015665013dcd75dc733aa93fabb00b453267281`.`product_category_id` AS `2015665013dcd75dc733aa93fabb00b453267281_product_category_id`, `2015665013dcd75dc733aa93fabb00b453267281`.`unit_of_measure` AS `2015665013dcd75dc733aa93fabb00b453267281_unit_of_measure`, `2015665013dcd75dc733aa93fabb00b453267281`.`weight` AS `2015665013dcd75dc733aa93fabb00b453267281_weight`, `2015665013dcd75dc733aa93fabb00b453267281`.`weight_unit` AS `2015665013dcd75dc733aa93fabb00b453267281_weight_unit`, `2015665013dcd75dc733aa93fabb00b453267281`.`length` AS `2015665013dcd75dc733aa93fabb00b453267281_length`, `2015665013dcd75dc733aa93fabb00b453267281`.`width` AS `2015665013dcd75dc733aa93fabb00b453267281_width`, `2015665013dcd75dc733aa93fabb00b453267281`.`height` AS `2015665013dcd75dc733aa93fabb00b453267281_height`, `2015665013dcd75dc733aa93fabb00b453267281`.`dimension_unit` AS `2015665013dcd75dc733aa93fabb00b453267281_dimension_unit`, `2015665013dcd75dc733aa93fabb00b453267281`.`barcode_qr_code` AS `2015665013dcd75dc733aa93fabb00b453267281_barcode_qr_code`, `2015665013dcd75dc733aa93fabb00b453267281`.`min_stock_level` AS `2015665013dcd75dc733aa93fabb00b453267281_min_stock_level`, `2015665013dcd75dc733aa93fabb00b453267281`.`max_stock_level` AS `2015665013dcd75dc733aa93fabb00b453267281_max_stock_level`, `2015665013dcd75dc733aa93fabb00b453267281`.`default_purchase_price` AS `2015665013dcd75dc733aa93fabb00b453267281_default_purchase_price`, `2015665013dcd75dc733aa93fabb00b453267281`.`default_selling_price_ht` AS `49bc071ebd20281578e41afee905fbf7bbbcaf67`, `2015665013dcd75dc733aa93fabb00b453267281`.`default_vat_rate_percentage` AS `7255730bfd5d2083d4fbdc0471167b3c37360b41`, `2015665013dcd75dc733aa93fabb00b453267281`.`status` AS `2015665013dcd75dc733aa93fabb00b453267281_status`, `2015665013dcd75dc733aa93fabb00b453267281`.`is_composite_product` AS `2015665013dcd75dc733aa93fabb00b453267281_is_composite_product`, `2015665013dcd75dc733aa93fabb00b453267281`.`notes` AS `2015665013dcd75dc733aa93fabb00b453267281_notes`, `2015665013dcd75dc733aa93fabb00b453267281`.`created_by_user_id` AS `2015665013dcd75dc733aa93fabb00b453267281_created_by_user_id`, `2015665013dcd75dc733aa93fabb00b453267281`.`updated_by_user_id` AS `2015665013dcd75dc733aa93fabb00b453267281_updated_by_user_id`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`id` AS `f1b77f7e63dbda5d770067e8578854ed4768f3d6_id`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`created_time` AS `f1b77f7e63dbda5d770067e8578854ed4768f3d6_created_time`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`updated_time` AS `f1b77f7e63dbda5d770067e8578854ed4768f3d6_updated_time`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`deleted_time` AS `f1b77f7e63dbda5d770067e8578854ed4768f3d6_deleted_time`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`product_id` AS `f1b77f7e63dbda5d770067e8578854ed4768f3d6_product_id`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`sku_variant` AS `f1b77f7e63dbda5d770067e8578854ed4768f3d6_sku_variant`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`name_variant` AS `f1b77f7e63dbda5d770067e8578854ed4768f3d6_name_variant`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`attributes` AS `f1b77f7e63dbda5d770067e8578854ed4768f3d6_attributes`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`purchase_price` AS `f1b77f7e63dbda5d770067e8578854ed4768f3d6_purchase_price`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`selling_price_ht` AS `f1b77f7e63dbda5d770067e8578854ed4768f3d6_selling_price_ht`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`barcode_qr_code_variant` AS `b87078ca5972f8c518a5e8ff8767be430d8c1d29`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`min_stock_level_variant` AS `bcbc8ccc247b01fbd08ac7f4f859d2eecf37ff87`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`max_stock_level_variant` AS `763205658f5bd60127c2199c74d4940cbcc2d5e1`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`weight_variant` AS `f1b77f7e63dbda5d770067e8578854ed4768f3d6_weight_variant`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`image_id` AS `f1b77f7e63dbda5d770067e8578854ed4768f3d6_image_id`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`created_by_user_id` AS `f1b77f7e63dbda5d770067e8578854ed4768f3d6_created_by_user_id`, `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`updated_by_user_id` AS `f1b77f7e63dbda5d770067e8578854ed4768f3d6_updated_by_user_id`, `SalesOrder__SalesOrder_createdByUser`.`id` AS `SalesOrder__SalesOrder_createdByUser_id`, `SalesOrder__SalesOrder_createdByUser`.`created_time` AS `SalesOrder__SalesOrder_createdByUser_created_time`, `SalesOrder__SalesOrder_createdByUser`.`updated_time` AS `SalesOrder__SalesOrder_createdByUser_updated_time`, `SalesOrder__SalesOrder_createdByUser`.`deleted_time` AS `SalesOrder__SalesOrder_createdByUser_deleted_time`, `SalesOrder__SalesOrder_createdByUser`.`uid` AS `SalesOrder__SalesOrder_createdByUser_uid`, `SalesOrder__SalesOrder_createdByUser`.`email` AS `SalesOrder__SalesOrder_createdByUser_email`, `SalesOrder__SalesOrder_createdByUser`.`first_name` AS `SalesOrder__SalesOrder_createdByUser_first_name`, `SalesOrder__SalesOrder_createdByUser`.`last_name` AS `SalesOrder__SalesOrder_createdByUser_last_name`, `SalesOrder__SalesOrder_createdByUser`.`level` AS `SalesOrder__SalesOrder_createdByUser_level`, `SalesOrder__SalesOrder_createdByUser`.`internal_level` AS `SalesOrder__SalesOrder_createdByUser_internal_level`, `SalesOrder__SalesOrder_createdByUser`.`internal` AS `SalesOrder__SalesOrder_createdByUser_internal`, `SalesOrder__SalesOrder_createdByUser`.`color` AS `SalesOrder__SalesOrder_createdByUser_color`, `SalesOrder__SalesOrder_createdByUser`.`password_status` AS `SalesOrder__SalesOrder_createdByUser_password_status`, `SalesOrder__SalesOrder_createdByUser`.`password_time` AS `SalesOrder__SalesOrder_createdByUser_password_time`, `SalesOrder__SalesOrder_createdByUser`.`preferences` AS `SalesOrder__SalesOrder_createdByUser_preferences`, `SalesOrder__SalesOrder_createdByUser`.`authorisation_overrides` AS `SalesOrder__SalesOrder_createdByUser_authorisation_overrides`, `SalesOrder__SalesOrder_createdByUser`.`permissions_expire_at` AS `SalesOrder__SalesOrder_createdByUser_permissions_expire_at`, `SalesOrder__SalesOrder_createdByUser`.`is_active` AS `SalesOrder__SalesOrder_createdByUser_is_active`, `SalesOrder__SalesOrder_createdByUser`.`google_id` AS `SalesOrder__SalesOrder_createdByUser_google_id`, `SalesOrder__SalesOrder_updatedByUser`.`id` AS `SalesOrder__SalesOrder_updatedByUser_id`, `SalesOrder__SalesOrder_updatedByUser`.`created_time` AS `SalesOrder__SalesOrder_updatedByUser_created_time`, `SalesOrder__SalesOrder_updatedByUser`.`updated_time` AS `SalesOrder__SalesOrder_updatedByUser_updated_time`, `SalesOrder__SalesOrder_updatedByUser`.`deleted_time` AS `SalesOrder__SalesOrder_updatedByUser_deleted_time`, `SalesOrder__SalesOrder_updatedByUser`.`uid` AS `SalesOrder__SalesOrder_updatedByUser_uid`, `SalesOrder__SalesOrder_updatedByUser`.`email` AS `SalesOrder__SalesOrder_updatedByUser_email`, `SalesOrder__SalesOrder_updatedByUser`.`first_name` AS `SalesOrder__SalesOrder_updatedByUser_first_name`, `SalesOrder__SalesOrder_updatedByUser`.`last_name` AS `SalesOrder__SalesOrder_updatedByUser_last_name`, `SalesOrder__SalesOrder_updatedByUser`.`level` AS `SalesOrder__SalesOrder_updatedByUser_level`, `SalesOrder__SalesOrder_updatedByUser`.`internal_level` AS `SalesOrder__SalesOrder_updatedByUser_internal_level`, `SalesOrder__SalesOrder_updatedByUser`.`internal` AS `SalesOrder__SalesOrder_updatedByUser_internal`, `SalesOrder__SalesOrder_updatedByUser`.`color` AS `SalesOrder__SalesOrder_updatedByUser_color`, `SalesOrder__SalesOrder_updatedByUser`.`password_status` AS `SalesOrder__SalesOrder_updatedByUser_password_status`, `SalesOrder__SalesOrder_updatedByUser`.`password_time` AS `SalesOrder__SalesOrder_updatedByUser_password_time`, `SalesOrder__SalesOrder_updatedByUser`.`preferences` AS `SalesOrder__SalesOrder_updatedByUser_preferences`, `SalesOrder__SalesOrder_updatedByUser`.`authorisation_overrides` AS `SalesOrder__SalesOrder_updatedByUser_authorisation_overrides`, `SalesOrder__SalesOrder_updatedByUser`.`permissions_expire_at` AS `SalesOrder__SalesOrder_updatedByUser_permissions_expire_at`, `SalesOrder__SalesOrder_updatedByUser`.`is_active` AS `SalesOrder__SalesOrder_updatedByUser_is_active`, `SalesOrder__SalesOrder_updatedByUser`.`google_id` AS `SalesOrder__SalesOrder_updatedByUser_google_id`, `f348beade047df59fc11d85c4d4e2b215a9833d3`.`id` AS `f348beade047df59fc11d85c4d4e2b215a9833d3_id`, `f348beade047df59fc11d85c4d4e2b215a9833d3`.`created_time` AS `f348beade047df59fc11d85c4d4e2b215a9833d3_created_time`, `f348beade047df59fc11d85c4d4e2b215a9833d3`.`updated_time` AS `f348beade047df59fc11d85c4d4e2b215a9833d3_updated_time`, `f348beade047df59fc11d85c4d4e2b215a9833d3`.`deleted_time` AS `f348beade047df59fc11d85c4d4e2b215a9833d3_deleted_time`, `f348beade047df59fc11d85c4d4e2b215a9833d3`.`code` AS `f348beade047df59fc11d85c4d4e2b215a9833d3_code`, `f348beade047df59fc11d85c4d4e2b215a9833d3`.`name` AS `f348beade047df59fc11d85c4d4e2b215a9833d3_name`, `f348beade047df59fc11d85c4d4e2b215a9833d3`.`symbol` AS `f348beade047df59fc11d85c4d4e2b215a9833d3_symbol`, `f348beade047df59fc11d85c4d4e2b215a9833d3`.`exchange_rate_to_company_default` AS `5b5c9e79e23da59829c510aac510d2b9d07f9ef1`, `f348beade047df59fc11d85c4d4e2b215a9833d3`.`is_active` AS `f348beade047df59fc11d85c4d4e2b215a9833d3_is_active`, `a9ce36d1639fa8be3e5f62568692fb13b56b823b`.`id` AS `a9ce36d1639fa8be3e5f62568692fb13b56b823b_id`, `a9ce36d1639fa8be3e5f62568692fb13b56b823b`.`created_time` AS `a9ce36d1639fa8be3e5f62568692fb13b56b823b_created_time`, `a9ce36d1639fa8be3e5f62568692fb13b56b823b`.`updated_time` AS `a9ce36d1639fa8be3e5f62568692fb13b56b823b_updated_time`, `a9ce36d1639fa8be3e5f62568692fb13b56b823b`.`deleted_time` AS `a9ce36d1639fa8be3e5f62568692fb13b56b823b_deleted_time`, `a9ce36d1639fa8be3e5f62568692fb13b56b823b`.`name` AS `a9ce36d1639fa8be3e5f62568692fb13b56b823b_name`, `a9ce36d1639fa8be3e5f62568692fb13b56b823b`.`description` AS `a9ce36d1639fa8be3e5f62568692fb13b56b823b_description`, `a9ce36d1639fa8be3e5f62568692fb13b56b823b`.`discount_percentage` AS `a9ce36d1639fa8be3e5f62568692fb13b56b823b_discount_percentage`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`id` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_id`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`created_time` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_created_time`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`updated_time` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_updated_time`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`deleted_time` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_deleted_time`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`first_name` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_first_name`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`last_name` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_last_name`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`company_name` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_company_name`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`email` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_email`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`phone_number` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_phone_number`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`vat_number` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_vat_number`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`siret_number` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_siret_number`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`default_currency_id` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_default_currency_id`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`default_payment_terms_days` AS `3510556248c9132e83610164da7d3a42489dd448`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`credit_limit` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_credit_limit`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`customer_group_id` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_customer_group_id`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`billing_address_id` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_billing_address_id`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`default_shipping_address_id` AS `e8b84aa1b6085f3c74d4b7ccfacf3efaeebe1367`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`notes` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_notes`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`created_by_user_id` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_created_by_user_id`, `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`updated_by_user_id` AS `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3_updated_by_user_id`, `bca3499ee8a279bd7d5030e55631d200e7df3ce3`.`id` AS `bca3499ee8a279bd7d5030e55631d200e7df3ce3_id`, `bca3499ee8a279bd7d5030e55631d200e7df3ce3`.`created_time` AS `bca3499ee8a279bd7d5030e55631d200e7df3ce3_created_time`, `bca3499ee8a279bd7d5030e55631d200e7df3ce3`.`updated_time` AS `bca3499ee8a279bd7d5030e55631d200e7df3ce3_updated_time`, `bca3499ee8a279bd7d5030e55631d200e7df3ce3`.`deleted_time` AS `bca3499ee8a279bd7d5030e55631d200e7df3ce3_deleted_time`, `bca3499ee8a279bd7d5030e55631d200e7df3ce3`.`code` AS `bca3499ee8a279bd7d5030e55631d200e7df3ce3_code`, `bca3499ee8a279bd7d5030e55631d200e7df3ce3`.`name` AS `bca3499ee8a279bd7d5030e55631d200e7df3ce3_name`, `bca3499ee8a279bd7d5030e55631d200e7df3ce3`.`symbol` AS `bca3499ee8a279bd7d5030e55631d200e7df3ce3_symbol`, `bca3499ee8a279bd7d5030e55631d200e7df3ce3`.`exchange_rate_to_company_default` AS `574ab4b0bd3db49f396e4e0210da051a8d607798`, `bca3499ee8a279bd7d5030e55631d200e7df3ce3`.`is_active` AS `bca3499ee8a279bd7d5030e55631d200e7df3ce3_is_active`, `3a73b63e300aef4feb350d05facd45be30e1e0d7`.`id` AS `3a73b63e300aef4feb350d05facd45be30e1e0d7_id`, `3a73b63e300aef4feb350d05facd45be30e1e0d7`.`created_time` AS `3a73b63e300aef4feb350d05facd45be30e1e0d7_created_time`, `3a73b63e300aef4feb350d05facd45be30e1e0d7`.`updated_time` AS `3a73b63e300aef4feb350d05facd45be30e1e0d7_updated_time`, `3a73b63e300aef4feb350d05facd45be30e1e0d7`.`deleted_time` AS `3a73b63e300aef4feb350d05facd45be30e1e0d7_deleted_time`, `3a73b63e300aef4feb350d05facd45be30e1e0d7`.`street_line1` AS `3a73b63e300aef4feb350d05facd45be30e1e0d7_street_line1`, `3a73b63e300aef4feb350d05facd45be30e1e0d7`.`street_line2` AS `3a73b63e300aef4feb350d05facd45be30e1e0d7_street_line2`, `3a73b63e300aef4feb350d05facd45be30e1e0d7`.`city` AS `3a73b63e300aef4feb350d05facd45be30e1e0d7_city`, `3a73b63e300aef4feb350d05facd45be30e1e0d7`.`postal_code` AS `3a73b63e300aef4feb350d05facd45be30e1e0d7_postal_code`, `3a73b63e300aef4feb350d05facd45be30e1e0d7`.`state_province` AS `3a73b63e300aef4feb350d05facd45be30e1e0d7_state_province`, `3a73b63e300aef4feb350d05facd45be30e1e0d7`.`country` AS `3a73b63e300aef4feb350d05facd45be30e1e0d7_country`, `3a73b63e300aef4feb350d05facd45be30e1e0d7`.`notes` AS `3a73b63e300aef4feb350d05facd45be30e1e0d7_notes`, `24c2d3b4259256500334f12e66eec3a5fc7a236d`.`id` AS `24c2d3b4259256500334f12e66eec3a5fc7a236d_id`, `24c2d3b4259256500334f12e66eec3a5fc7a236d`.`created_time` AS `24c2d3b4259256500334f12e66eec3a5fc7a236d_created_time`, `24c2d3b4259256500334f12e66eec3a5fc7a236d`.`updated_time` AS `24c2d3b4259256500334f12e66eec3a5fc7a236d_updated_time`, `24c2d3b4259256500334f12e66eec3a5fc7a236d`.`deleted_time` AS `24c2d3b4259256500334f12e66eec3a5fc7a236d_deleted_time`, `24c2d3b4259256500334f12e66eec3a5fc7a236d`.`street_line1` AS `24c2d3b4259256500334f12e66eec3a5fc7a236d_street_line1`, `24c2d3b4259256500334f12e66eec3a5fc7a236d`.`street_line2` AS `24c2d3b4259256500334f12e66eec3a5fc7a236d_street_line2`, `24c2d3b4259256500334f12e66eec3a5fc7a236d`.`city` AS `24c2d3b4259256500334f12e66eec3a5fc7a236d_city`, `24c2d3b4259256500334f12e66eec3a5fc7a236d`.`postal_code` AS `24c2d3b4259256500334f12e66eec3a5fc7a236d_postal_code`, `24c2d3b4259256500334f12e66eec3a5fc7a236d`.`state_province` AS `24c2d3b4259256500334f12e66eec3a5fc7a236d_state_province`, `24c2d3b4259256500334f12e66eec3a5fc7a236d`.`country` AS `24c2d3b4259256500334f12e66eec3a5fc7a236d_country`, `24c2d3b4259256500334f12e66eec3a5fc7a236d`.`notes` AS `24c2d3b4259256500334f12e66eec3a5fc7a236d_notes`, `d969e2c9a767afadd82e506a327056eea91f770d`.`id` AS `d969e2c9a767afadd82e506a327056eea91f770d_id`, `d969e2c9a767afadd82e506a327056eea91f770d`.`created_time` AS `d969e2c9a767afadd82e506a327056eea91f770d_created_time`, `d969e2c9a767afadd82e506a327056eea91f770d`.`updated_time` AS `d969e2c9a767afadd82e506a327056eea91f770d_updated_time`, `d969e2c9a767afadd82e506a327056eea91f770d`.`deleted_time` AS `d969e2c9a767afadd82e506a327056eea91f770d_deleted_time`, `d969e2c9a767afadd82e506a327056eea91f770d`.`quote_id` AS `d969e2c9a767afadd82e506a327056eea91f770d_quote_id`, `d969e2c9a767afadd82e506a327056eea91f770d`.`product_id` AS `d969e2c9a767afadd82e506a327056eea91f770d_product_id`, `d969e2c9a767afadd82e506a327056eea91f770d`.`product_variant_id` AS `d969e2c9a767afadd82e506a327056eea91f770d_product_variant_id`, `d969e2c9a767afadd82e506a327056eea91f770d`.`description` AS `d969e2c9a767afadd82e506a327056eea91f770d_description`, `d969e2c9a767afadd82e506a327056eea91f770d`.`quantity` AS `d969e2c9a767afadd82e506a327056eea91f770d_quantity`, `d969e2c9a767afadd82e506a327056eea91f770d`.`unit_price_ht` AS `d969e2c9a767afadd82e506a327056eea91f770d_unit_price_ht`, `d969e2c9a767afadd82e506a327056eea91f770d`.`discount_percentage` AS `d969e2c9a767afadd82e506a327056eea91f770d_discount_percentage`, `d969e2c9a767afadd82e506a327056eea91f770d`.`vat_rate_percentage` AS `d969e2c9a767afadd82e506a327056eea91f770d_vat_rate_percentage`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`id` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_id`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`created_time` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_created_time`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`updated_time` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_updated_time`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`deleted_time` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_deleted_time`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`uid` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_uid`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`email` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_email`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`first_name` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_first_name`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`last_name` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_last_name`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`level` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_level`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`internal_level` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_internal_level`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`internal` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_internal`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`color` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_color`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`password_status` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_password_status`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`password_time` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_password_time`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`preferences` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_preferences`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`authorisation_overrides` AS `f1115ea507585e63665f2db6cb5ed3e17cf529e4`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`permissions_expire_at` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_permissions_expire_at`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`is_active` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_is_active`, `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`google_id` AS `0c4bd12e108422ac4122566a4ec9da3b87a2e144_google_id`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`id` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_id`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`created_time` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_created_time`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`updated_time` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_updated_time`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`deleted_time` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_deleted_time`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`uid` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_uid`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`email` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_email`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`first_name` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_first_name`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`last_name` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_last_name`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`level` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_level`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`internal_level` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_internal_level`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`internal` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_internal`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`color` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_color`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`password_status` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_password_status`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`password_time` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_password_time`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`preferences` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_preferences`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`authorisation_overrides` AS `88c0bfa1dd87e78496cc26afb80d4ba06cbe8152`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`permissions_expire_at` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_permissions_expire_at`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`is_active` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_is_active`, `2084707e7e8e898e933f737d95156a0a4ece2d58`.`google_id` AS `2084707e7e8e898e933f737d95156a0a4ece2d58_google_id`, `ba36da94256eb294fef133578a3e67a80d79ad08`.`id` AS `ba36da94256eb294fef133578a3e67a80d79ad08_id`, `ba36da94256eb294fef133578a3e67a80d79ad08`.`created_time` AS `ba36da94256eb294fef133578a3e67a80d79ad08_created_time`, `ba36da94256eb294fef133578a3e67a80d79ad08`.`updated_time` AS `ba36da94256eb294fef133578a3e67a80d79ad08_updated_time`, `ba36da94256eb294fef133578a3e67a80d79ad08`.`deleted_time` AS `ba36da94256eb294fef133578a3e67a80d79ad08_deleted_time`, `ba36da94256eb294fef133578a3e67a80d79ad08`.`street_line1` AS `ba36da94256eb294fef133578a3e67a80d79ad08_street_line1`, `ba36da94256eb294fef133578a3e67a80d79ad08`.`street_line2` AS `ba36da94256eb294fef133578a3e67a80d79ad08_street_line2`, `ba36da94256eb294fef133578a3e67a80d79ad08`.`city` AS `ba36da94256eb294fef133578a3e67a80d79ad08_city`, `ba36da94256eb294fef133578a3e67a80d79ad08`.`postal_code` AS `ba36da94256eb294fef133578a3e67a80d79ad08_postal_code`, `ba36da94256eb294fef133578a3e67a80d79ad08`.`state_province` AS `ba36da94256eb294fef133578a3e67a80d79ad08_state_province`, `ba36da94256eb294fef133578a3e67a80d79ad08`.`country` AS `ba36da94256eb294fef133578a3e67a80d79ad08_country`, `ba36da94256eb294fef133578a3e67a80d79ad08`.`notes` AS `ba36da94256eb294fef133578a3e67a80d79ad08_notes`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`id` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_id`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`created_time` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_created_time`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`updated_time` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_updated_time`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`deleted_time` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_deleted_time`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`uid` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_uid`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`email` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_email`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`first_name` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_first_name`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`last_name` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_last_name`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`level` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_level`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`internal_level` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_internal_level`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`internal` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_internal`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`color` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_color`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`password_status` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_password_status`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`password_time` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_password_time`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`preferences` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_preferences`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`authorisation_overrides` AS `d9e0bf8c37da4f84eb42dc85168dc85324d40d9e`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`permissions_expire_at` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_permissions_expire_at`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`is_active` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_is_active`, `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`google_id` AS `ecb8eb6057f71450d30512dd0cfd225cbf3449fc_google_id`, `48e0f2a12c7f7263895657f0b36544285ece3c02`.`id` AS `48e0f2a12c7f7263895657f0b36544285ece3c02_id`, `48e0f2a12c7f7263895657f0b36544285ece3c02`.`created_time` AS `48e0f2a12c7f7263895657f0b36544285ece3c02_created_time`, `48e0f2a12c7f7263895657f0b36544285ece3c02`.`updated_time` AS `48e0f2a12c7f7263895657f0b36544285ece3c02_updated_time`, `48e0f2a12c7f7263895657f0b36544285ece3c02`.`deleted_time` AS `48e0f2a12c7f7263895657f0b36544285ece3c02_deleted_time`, `48e0f2a12c7f7263895657f0b36544285ece3c02`.`street_line1` AS `48e0f2a12c7f7263895657f0b36544285ece3c02_street_line1`, `48e0f2a12c7f7263895657f0b36544285ece3c02`.`street_line2` AS `48e0f2a12c7f7263895657f0b36544285ece3c02_street_line2`, `48e0f2a12c7f7263895657f0b36544285ece3c02`.`city` AS `48e0f2a12c7f7263895657f0b36544285ece3c02_city`, `48e0f2a12c7f7263895657f0b36544285ece3c02`.`postal_code` AS `48e0f2a12c7f7263895657f0b36544285ece3c02_postal_code`, `48e0f2a12c7f7263895657f0b36544285ece3c02`.`state_province` AS `48e0f2a12c7f7263895657f0b36544285ece3c02_state_province`, `48e0f2a12c7f7263895657f0b36544285ece3c02`.`country` AS `48e0f2a12c7f7263895657f0b36544285ece3c02_country`, `48e0f2a12c7f7263895657f0b36544285ece3c02`.`notes` AS `48e0f2a12c7f7263895657f0b36544285ece3c02_notes`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`id` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_id`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`created_time` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_created_time`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`updated_time` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_updated_time`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`deleted_time` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_deleted_time`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`uid` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_uid`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`email` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_email`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`first_name` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_first_name`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`last_name` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_last_name`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`level` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_level`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`internal_level` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_internal_level`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`internal` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_internal`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`color` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_color`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`password_status` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_password_status`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`password_time` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_password_time`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`preferences` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_preferences`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`authorisation_overrides` AS `15f10f7be3ae7a2bb4952f866c9b1535aba602ea`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`permissions_expire_at` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_permissions_expire_at`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`is_active` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_is_active`, `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`google_id` AS `be5d25ef05328736a6dbe8455b44a9022f1ad1b7_google_id`, `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e`.`id` AS `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e_id`, `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e`.`created_time` AS `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e_created_time`, `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e`.`updated_time` AS `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e_updated_time`, `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e`.`deleted_time` AS `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e_deleted_time`, `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e`.`name` AS `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e_name`, `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e`.`description` AS `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e_description`, `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e`.`image_url` AS `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e_image_url`, `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e`.`parent_category_id` AS `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e_parent_category_id`, `1fdbf894b66e0bb3cbab705f1941bb271b772a40`.`id` AS `1fdbf894b66e0bb3cbab705f1941bb271b772a40_id`, `1fdbf894b66e0bb3cbab705f1941bb271b772a40`.`created_time` AS `1fdbf894b66e0bb3cbab705f1941bb271b772a40_created_time`, `1fdbf894b66e0bb3cbab705f1941bb271b772a40`.`updated_time` AS `1fdbf894b66e0bb3cbab705f1941bb271b772a40_updated_time`, `1fdbf894b66e0bb3cbab705f1941bb271b772a40`.`deleted_time` AS `1fdbf894b66e0bb3cbab705f1941bb271b772a40_deleted_time`, `1fdbf894b66e0bb3cbab705f1941bb271b772a40`.`product_id` AS `1fdbf894b66e0bb3cbab705f1941bb271b772a40_product_id`, `1fdbf894b66e0bb3cbab705f1941bb271b772a40`.`image_url` AS `1fdbf894b66e0bb3cbab705f1941bb271b772a40_image_url`, `1fdbf894b66e0bb3cbab705f1941bb271b772a40`.`alt_text` AS `1fdbf894b66e0bb3cbab705f1941bb271b772a40_alt_text`, `1fdbf894b66e0bb3cbab705f1941bb271b772a40`.`is_primary` AS `1fdbf894b66e0bb3cbab705f1941bb271b772a40_is_primary`, `SalesOrder__customer`.`id` AS `SalesOrder__customer_id`, `SalesOrder__customer`.`created_time` AS `SalesOrder__customer_created_time`, `SalesOrder__customer`.`updated_time` AS `SalesOrder__customer_updated_time`, `SalesOrder__customer`.`deleted_time` AS `SalesOrder__customer_deleted_time`, `SalesOrder__customer`.`first_name` AS `SalesOrder__customer_first_name`, `SalesOrder__customer`.`last_name` AS `SalesOrder__customer_last_name`, `SalesOrder__customer`.`company_name` AS `SalesOrder__customer_company_name`, `SalesOrder__customer`.`email` AS `SalesOrder__customer_email`, `SalesOrder__customer`.`phone_number` AS `SalesOrder__customer_phone_number`, `SalesOrder__customer`.`vat_number` AS `SalesOrder__customer_vat_number`, `SalesOrder__customer`.`siret_number` AS `SalesOrder__customer_siret_number`, `SalesOrder__customer`.`default_currency_id` AS `SalesOrder__customer_default_currency_id`, `SalesOrder__customer`.`default_payment_terms_days` AS `SalesOrder__customer_default_payment_terms_days`, `SalesOrder__customer`.`credit_limit` AS `SalesOrder__customer_credit_limit`, `SalesOrder__customer`.`customer_group_id` AS `SalesOrder__customer_customer_group_id`, `SalesOrder__customer`.`billing_address_id` AS `SalesOrder__customer_billing_address_id`, `SalesOrder__customer`.`default_shipping_address_id` AS `SalesOrder__customer_default_shipping_address_id`, `SalesOrder__customer`.`notes` AS `SalesOrder__customer_notes`, `SalesOrder__customer`.`created_by_user_id` AS `SalesOrder__customer_created_by_user_id`, `SalesOrder__customer`.`updated_by_user_id` AS `SalesOrder__customer_updated_by_user_id`, `SalesOrder__customer__defaultCurrency`.`id` AS `SalesOrder__customer__defaultCurrency_id`, `SalesOrder__customer__defaultCurrency`.`created_time` AS `SalesOrder__customer__defaultCurrency_created_time`, `SalesOrder__customer__defaultCurrency`.`updated_time` AS `SalesOrder__customer__defaultCurrency_updated_time`, `SalesOrder__customer__defaultCurrency`.`deleted_time` AS `SalesOrder__customer__defaultCurrency_deleted_time`, `SalesOrder__customer__defaultCurrency`.`code` AS `SalesOrder__customer__defaultCurrency_code`, `SalesOrder__customer__defaultCurrency`.`name` AS `SalesOrder__customer__defaultCurrency_name`, `SalesOrder__customer__defaultCurrency`.`symbol` AS `SalesOrder__customer__defaultCurrency_symbol`, `SalesOrder__customer__defaultCurrency`.`exchange_rate_to_company_default` AS `21e4fd9a50af4ea8374f88e3a0ef46fb3fce2799`, `SalesOrder__customer__defaultCurrency`.`is_active` AS `SalesOrder__customer__defaultCurrency_is_active`, `SalesOrder__customer__customerGroup`.`id` AS `SalesOrder__customer__customerGroup_id`, `SalesOrder__customer__customerGroup`.`created_time` AS `SalesOrder__customer__customerGroup_created_time`, `SalesOrder__customer__customerGroup`.`updated_time` AS `SalesOrder__customer__customerGroup_updated_time`, `SalesOrder__customer__customerGroup`.`deleted_time` AS `SalesOrder__customer__customerGroup_deleted_time`, `SalesOrder__customer__customerGroup`.`name` AS `SalesOrder__customer__customerGroup_name`, `SalesOrder__customer__customerGroup`.`description` AS `SalesOrder__customer__customerGroup_description`, `SalesOrder__customer__customerGroup`.`discount_percentage` AS `SalesOrder__customer__customerGroup_discount_percentage`, `SalesOrder__customer__billingAddress`.`id` AS `SalesOrder__customer__billingAddress_id`, `SalesOrder__customer__billingAddress`.`created_time` AS `SalesOrder__customer__billingAddress_created_time`, `SalesOrder__customer__billingAddress`.`updated_time` AS `SalesOrder__customer__billingAddress_updated_time`, `SalesOrder__customer__billingAddress`.`deleted_time` AS `SalesOrder__customer__billingAddress_deleted_time`, `SalesOrder__customer__billingAddress`.`street_line1` AS `SalesOrder__customer__billingAddress_street_line1`, `SalesOrder__customer__billingAddress`.`street_line2` AS `SalesOrder__customer__billingAddress_street_line2`, `SalesOrder__customer__billingAddress`.`city` AS `SalesOrder__customer__billingAddress_city`, `SalesOrder__customer__billingAddress`.`postal_code` AS `SalesOrder__customer__billingAddress_postal_code`, `SalesOrder__customer__billingAddress`.`state_province` AS `SalesOrder__customer__billingAddress_state_province`, `SalesOrder__customer__billingAddress`.`country` AS `SalesOrder__customer__billingAddress_country`, `SalesOrder__customer__billingAddress`.`notes` AS `SalesOrder__customer__billingAddress_notes`, `SalesOrder__customer__defaultShippingAddress`.`id` AS `SalesOrder__customer__defaultShippingAddress_id`, `SalesOrder__customer__defaultShippingAddress`.`created_time` AS `SalesOrder__customer__defaultShippingAddress_created_time`, `SalesOrder__customer__defaultShippingAddress`.`updated_time` AS `SalesOrder__customer__defaultShippingAddress_updated_time`, `SalesOrder__customer__defaultShippingAddress`.`deleted_time` AS `SalesOrder__customer__defaultShippingAddress_deleted_time`, `SalesOrder__customer__defaultShippingAddress`.`street_line1` AS `SalesOrder__customer__defaultShippingAddress_street_line1`, `SalesOrder__customer__defaultShippingAddress`.`street_line2` AS `SalesOrder__customer__defaultShippingAddress_street_line2`, `SalesOrder__customer__defaultShippingAddress`.`city` AS `SalesOrder__customer__defaultShippingAddress_city`, `SalesOrder__customer__defaultShippingAddress`.`postal_code` AS `SalesOrder__customer__defaultShippingAddress_postal_code`, `SalesOrder__customer__defaultShippingAddress`.`state_province` AS `SalesOrder__customer__defaultShippingAddress_state_province`, `SalesOrder__customer__defaultShippingAddress`.`country` AS `SalesOrder__customer__defaultShippingAddress_country`, `SalesOrder__customer__defaultShippingAddress`.`notes` AS `SalesOrder__customer__defaultShippingAddress_notes`, `SalesOrder__currency`.`id` AS `SalesOrder__currency_id`, `SalesOrder__currency`.`created_time` AS `SalesOrder__currency_created_time`, `SalesOrder__currency`.`updated_time` AS `SalesOrder__currency_updated_time`, `SalesOrder__currency`.`deleted_time` AS `SalesOrder__currency_deleted_time`, `SalesOrder__currency`.`code` AS `SalesOrder__currency_code`, `SalesOrder__currency`.`name` AS `SalesOrder__currency_name`, `SalesOrder__currency`.`symbol` AS `SalesOrder__currency_symbol`, `SalesOrder__currency`.`exchange_rate_to_company_default` AS `SalesOrder__currency_exchange_rate_to_company_default`, `SalesOrder__currency`.`is_active` AS `SalesOrder__currency_is_active`, `SalesOrder__shippingAddress`.`id` AS `SalesOrder__shippingAddress_id`, `SalesOrder__shippingAddress`.`created_time` AS `SalesOrder__shippingAddress_created_time`, `SalesOrder__shippingAddress`.`updated_time` AS `SalesOrder__shippingAddress_updated_time`, `SalesOrder__shippingAddress`.`deleted_time` AS `SalesOrder__shippingAddress_deleted_time`, `SalesOrder__shippingAddress`.`street_line1` AS `SalesOrder__shippingAddress_street_line1`, `SalesOrder__shippingAddress`.`street_line2` AS `SalesOrder__shippingAddress_street_line2`, `SalesOrder__shippingAddress`.`city` AS `SalesOrder__shippingAddress_city`, `SalesOrder__shippingAddress`.`postal_code` AS `SalesOrder__shippingAddress_postal_code`, `SalesOrder__shippingAddress`.`state_province` AS `SalesOrder__shippingAddress_state_province`, `SalesOrder__shippingAddress`.`country` AS `SalesOrder__shippingAddress_country`, `SalesOrder__shippingAddress`.`notes` AS `SalesOrder__shippingAddress_notes`, `SalesOrder__billingAddress`.`id` AS `SalesOrder__billingAddress_id`, `SalesOrder__billingAddress`.`created_time` AS `SalesOrder__billingAddress_created_time`, `SalesOrder__billingAddress`.`updated_time` AS `SalesOrder__billingAddress_updated_time`, `SalesOrder__billingAddress`.`deleted_time` AS `SalesOrder__billingAddress_deleted_time`, `SalesOrder__billingAddress`.`street_line1` AS `SalesOrder__billingAddress_street_line1`, `SalesOrder__billingAddress`.`street_line2` AS `SalesOrder__billingAddress_street_line2`, `SalesOrder__billingAddress`.`city` AS `SalesOrder__billingAddress_city`, `SalesOrder__billingAddress`.`postal_code` AS `SalesOrder__billingAddress_postal_code`, `SalesOrder__billingAddress`.`state_province` AS `SalesOrder__billingAddress_state_province`, `SalesOrder__billingAddress`.`country` AS `SalesOrder__billingAddress_country`, `SalesOrder__billingAddress`.`notes` AS `SalesOrder__billingAddress_notes`, `SalesOrder__dispatchWarehouse`.`id` AS `SalesOrder__dispatchWarehouse_id`, `SalesOrder__dispatchWarehouse`.`created_time` AS `SalesOrder__dispatchWarehouse_created_time`, `SalesOrder__dispatchWarehouse`.`updated_time` AS `SalesOrder__dispatchWarehouse_updated_time`, `SalesOrder__dispatchWarehouse`.`deleted_time` AS `SalesOrder__dispatchWarehouse_deleted_time`, `SalesOrder__dispatchWarehouse`.`name` AS `SalesOrder__dispatchWarehouse_name`, `SalesOrder__dispatchWarehouse`.`code` AS `SalesOrder__dispatchWarehouse_code`, `SalesOrder__dispatchWarehouse`.`address_id` AS `SalesOrder__dispatchWarehouse_address_id`, `SalesOrder__dispatchWarehouse`.`manager_id` AS `SalesOrder__dispatchWarehouse_manager_id`, `SalesOrder__dispatchWarehouse`.`capacity_notes` AS `SalesOrder__dispatchWarehouse_capacity_notes`, `SalesOrder__dispatchWarehouse`.`created_by_user_id` AS `SalesOrder__dispatchWarehouse_created_by_user_id`, `SalesOrder__dispatchWarehouse`.`updated_by_user_id` AS `SalesOrder__dispatchWarehouse_updated_by_user_id`, `SalesOrder__dispatchWarehouse__address`.`id` AS `SalesOrder__dispatchWarehouse__address_id`, `SalesOrder__dispatchWarehouse__address`.`created_time` AS `SalesOrder__dispatchWarehouse__address_created_time`, `SalesOrder__dispatchWarehouse__address`.`updated_time` AS `SalesOrder__dispatchWarehouse__address_updated_time`, `SalesOrder__dispatchWarehouse__address`.`deleted_time` AS `SalesOrder__dispatchWarehouse__address_deleted_time`, `SalesOrder__dispatchWarehouse__address`.`street_line1` AS `SalesOrder__dispatchWarehouse__address_street_line1`, `SalesOrder__dispatchWarehouse__address`.`street_line2` AS `SalesOrder__dispatchWarehouse__address_street_line2`, `SalesOrder__dispatchWarehouse__address`.`city` AS `SalesOrder__dispatchWarehouse__address_city`, `SalesOrder__dispatchWarehouse__address`.`postal_code` AS `SalesOrder__dispatchWarehouse__address_postal_code`, `SalesOrder__dispatchWarehouse__address`.`state_province` AS `SalesOrder__dispatchWarehouse__address_state_province`, `SalesOrder__dispatchWarehouse__address`.`country` AS `SalesOrder__dispatchWarehouse__address_country`, `SalesOrder__dispatchWarehouse__address`.`notes` AS `SalesOrder__dispatchWarehouse__address_notes`, `SalesOrder__dispatchWarehouse__manager`.`id` AS `SalesOrder__dispatchWarehouse__manager_id`, `SalesOrder__dispatchWarehouse__manager`.`created_time` AS `SalesOrder__dispatchWarehouse__manager_created_time`, `SalesOrder__dispatchWarehouse__manager`.`updated_time` AS `SalesOrder__dispatchWarehouse__manager_updated_time`, `SalesOrder__dispatchWarehouse__manager`.`deleted_time` AS `SalesOrder__dispatchWarehouse__manager_deleted_time`, `SalesOrder__dispatchWarehouse__manager`.`uid` AS `SalesOrder__dispatchWarehouse__manager_uid`, `SalesOrder__dispatchWarehouse__manager`.`email` AS `SalesOrder__dispatchWarehouse__manager_email`, `SalesOrder__dispatchWarehouse__manager`.`first_name` AS `SalesOrder__dispatchWarehouse__manager_first_name`, `SalesOrder__dispatchWarehouse__manager`.`last_name` AS `SalesOrder__dispatchWarehouse__manager_last_name`, `SalesOrder__dispatchWarehouse__manager`.`level` AS `SalesOrder__dispatchWarehouse__manager_level`, `SalesOrder__dispatchWarehouse__manager`.`internal_level` AS `SalesOrder__dispatchWarehouse__manager_internal_level`, `SalesOrder__dispatchWarehouse__manager`.`internal` AS `SalesOrder__dispatchWarehouse__manager_internal`, `SalesOrder__dispatchWarehouse__manager`.`color` AS `SalesOrder__dispatchWarehouse__manager_color`, `SalesOrder__dispatchWarehouse__manager`.`password_status` AS `SalesOrder__dispatchWarehouse__manager_password_status`, `SalesOrder__dispatchWarehouse__manager`.`password_time` AS `SalesOrder__dispatchWarehouse__manager_password_time`, `SalesOrder__dispatchWarehouse__manager`.`preferences` AS `SalesOrder__dispatchWarehouse__manager_preferences`, `SalesOrder__dispatchWarehouse__manager`.`authorisation_overrides` AS `SalesOrder__dispatchWarehouse__manager_authorisation_overrides`, `SalesOrder__dispatchWarehouse__manager`.`permissions_expire_at` AS `SalesOrder__dispatchWarehouse__manager_permissions_expire_at`, `SalesOrder__dispatchWarehouse__manager`.`is_active` AS `SalesOrder__dispatchWarehouse__manager_is_active`, `SalesOrder__dispatchWarehouse__manager`.`google_id` AS `SalesOrder__dispatchWarehouse__manager_google_id`, `SalesOrder__dispatchShop`.`id` AS `SalesOrder__dispatchShop_id`, `SalesOrder__dispatchShop`.`created_time` AS `SalesOrder__dispatchShop_created_time`, `SalesOrder__dispatchShop`.`updated_time` AS `SalesOrder__dispatchShop_updated_time`, `SalesOrder__dispatchShop`.`deleted_time` AS `SalesOrder__dispatchShop_deleted_time`, `SalesOrder__dispatchShop`.`name` AS `SalesOrder__dispatchShop_name`, `SalesOrder__dispatchShop`.`code` AS `SalesOrder__dispatchShop_code`, `SalesOrder__dispatchShop`.`address_id` AS `SalesOrder__dispatchShop_address_id`, `SalesOrder__dispatchShop`.`manager_id` AS `SalesOrder__dispatchShop_manager_id`, `SalesOrder__dispatchShop`.`opening_hours_notes` AS `SalesOrder__dispatchShop_opening_hours_notes`, `SalesOrder__dispatchShop`.`created_by_user_id` AS `SalesOrder__dispatchShop_created_by_user_id`, `SalesOrder__dispatchShop`.`updated_by_user_id` AS `SalesOrder__dispatchShop_updated_by_user_id`, `SalesOrder__dispatchShop__address`.`id` AS `SalesOrder__dispatchShop__address_id`, `SalesOrder__dispatchShop__address`.`created_time` AS `SalesOrder__dispatchShop__address_created_time`, `SalesOrder__dispatchShop__address`.`updated_time` AS `SalesOrder__dispatchShop__address_updated_time`, `SalesOrder__dispatchShop__address`.`deleted_time` AS `SalesOrder__dispatchShop__address_deleted_time`, `SalesOrder__dispatchShop__address`.`street_line1` AS `SalesOrder__dispatchShop__address_street_line1`, `SalesOrder__dispatchShop__address`.`street_line2` AS `SalesOrder__dispatchShop__address_street_line2`, `SalesOrder__dispatchShop__address`.`city` AS `SalesOrder__dispatchShop__address_city`, `SalesOrder__dispatchShop__address`.`postal_code` AS `SalesOrder__dispatchShop__address_postal_code`, `SalesOrder__dispatchShop__address`.`state_province` AS `SalesOrder__dispatchShop__address_state_province`, `SalesOrder__dispatchShop__address`.`country` AS `SalesOrder__dispatchShop__address_country`, `SalesOrder__dispatchShop__address`.`notes` AS `SalesOrder__dispatchShop__address_notes`, `SalesOrder__dispatchShop__manager`.`id` AS `SalesOrder__dispatchShop__manager_id`, `SalesOrder__dispatchShop__manager`.`created_time` AS `SalesOrder__dispatchShop__manager_created_time`, `SalesOrder__dispatchShop__manager`.`updated_time` AS `SalesOrder__dispatchShop__manager_updated_time`, `SalesOrder__dispatchShop__manager`.`deleted_time` AS `SalesOrder__dispatchShop__manager_deleted_time`, `SalesOrder__dispatchShop__manager`.`uid` AS `SalesOrder__dispatchShop__manager_uid`, `SalesOrder__dispatchShop__manager`.`email` AS `SalesOrder__dispatchShop__manager_email`, `SalesOrder__dispatchShop__manager`.`first_name` AS `SalesOrder__dispatchShop__manager_first_name`, `SalesOrder__dispatchShop__manager`.`last_name` AS `SalesOrder__dispatchShop__manager_last_name`, `SalesOrder__dispatchShop__manager`.`level` AS `SalesOrder__dispatchShop__manager_level`, `SalesOrder__dispatchShop__manager`.`internal_level` AS `SalesOrder__dispatchShop__manager_internal_level`, `SalesOrder__dispatchShop__manager`.`internal` AS `SalesOrder__dispatchShop__manager_internal`, `SalesOrder__dispatchShop__manager`.`color` AS `SalesOrder__dispatchShop__manager_color`, `SalesOrder__dispatchShop__manager`.`password_status` AS `SalesOrder__dispatchShop__manager_password_status`, `SalesOrder__dispatchShop__manager`.`password_time` AS `SalesOrder__dispatchShop__manager_password_time`, `SalesOrder__dispatchShop__manager`.`preferences` AS `SalesOrder__dispatchShop__manager_preferences`, `SalesOrder__dispatchShop__manager`.`authorisation_overrides` AS `SalesOrder__dispatchShop__manager_authorisation_overrides`, `SalesOrder__dispatchShop__manager`.`permissions_expire_at` AS `SalesOrder__dispatchShop__manager_permissions_expire_at`, `SalesOrder__dispatchShop__manager`.`is_active` AS `SalesOrder__dispatchShop__manager_is_active`, `SalesOrder__dispatchShop__manager`.`google_id` AS `SalesOrder__dispatchShop__manager_google_id`, `SalesOrder__createdByUser`.`id` AS `SalesOrder__createdByUser_id`, `SalesOrder__createdByUser`.`created_time` AS `SalesOrder__createdByUser_created_time`, `SalesOrder__createdByUser`.`updated_time` AS `SalesOrder__createdByUser_updated_time`, `SalesOrder__createdByUser`.`deleted_time` AS `SalesOrder__createdByUser_deleted_time`, `SalesOrder__createdByUser`.`uid` AS `SalesOrder__createdByUser_uid`, `SalesOrder__createdByUser`.`email` AS `SalesOrder__createdByUser_email`, `SalesOrder__createdByUser`.`first_name` AS `SalesOrder__createdByUser_first_name`, `SalesOrder__createdByUser`.`last_name` AS `SalesOrder__createdByUser_last_name`, `SalesOrder__createdByUser`.`level` AS `SalesOrder__createdByUser_level`, `SalesOrder__createdByUser`.`internal_level` AS `SalesOrder__createdByUser_internal_level`, `SalesOrder__createdByUser`.`internal` AS `SalesOrder__createdByUser_internal`, `SalesOrder__createdByUser`.`color` AS `SalesOrder__createdByUser_color`, `SalesOrder__createdByUser`.`password_status` AS `SalesOrder__createdByUser_password_status`, `SalesOrder__createdByUser`.`password_time` AS `SalesOrder__createdByUser_password_time`, `SalesOrder__createdByUser`.`preferences` AS `SalesOrder__createdByUser_preferences`, `SalesOrder__createdByUser`.`authorisation_overrides` AS `SalesOrder__createdByUser_authorisation_overrides`, `SalesOrder__createdByUser`.`permissions_expire_at` AS `SalesOrder__createdByUser_permissions_expire_at`, `SalesOrder__createdByUser`.`is_active` AS `SalesOrder__createdByUser_is_active`, `SalesOrder__createdByUser`.`google_id` AS `SalesOrder__createdByUser_google_id` FROM `sales_orders` `SalesOrder` LEFT JOIN `customers` `SalesOrder__SalesOrder_customer` ON `SalesOrder__SalesOrder_customer`.`id`=`SalesOrder`.`customer_id` AND (`SalesOrder__SalesOrder_customer`.`deleted_time` IS NULL)  LEFT JOIN `addresses` `4834180fc505e0204224950d2b7cc28e11e1f746` ON `4834180fc505e0204224950d2b7cc28e11e1f746`.`id`=`SalesOrder__SalesOrder_customer`.`billing_address_id` AND (`4834180fc505e0204224950d2b7cc28e11e1f746`.`deleted_time` IS NULL)  LEFT JOIN `addresses` `746c85b0681cecfc62b152d0f0419df796048a26` ON `746c85b0681cecfc62b152d0f0419df796048a26`.`id`=`SalesOrder__SalesOrder_customer`.`default_shipping_address_id` AND (`746c85b0681cecfc62b152d0f0419df796048a26`.`deleted_time` IS NULL)  LEFT JOIN `quotes` `SalesOrder__SalesOrder_quote` ON `SalesOrder__SalesOrder_quote`.`id`=`SalesOrder`.`quote_id` AND (`SalesOrder__SalesOrder_quote`.`deleted_time` IS NULL)  LEFT JOIN `currencies` `SalesOrder__SalesOrder_currency` ON `SalesOrder__SalesOrder_currency`.`id`=`SalesOrder`.`currency_id` AND (`SalesOrder__SalesOrder_currency`.`deleted_time` IS NULL)  LEFT JOIN `addresses` `SalesOrder__SalesOrder_shippingAddress` ON `SalesOrder__SalesOrder_shippingAddress`.`id`=`SalesOrder`.`shipping_address_id` AND (`SalesOrder__SalesOrder_shippingAddress`.`deleted_time` IS NULL)  LEFT JOIN `addresses` `SalesOrder__SalesOrder_billingAddress` ON `SalesOrder__SalesOrder_billingAddress`.`id`=`SalesOrder`.`billing_address_id` AND (`SalesOrder__SalesOrder_billingAddress`.`deleted_time` IS NULL)  LEFT JOIN `warehouses` `SalesOrder__SalesOrder_dispatchWarehouse` ON `SalesOrder__SalesOrder_dispatchWarehouse`.`id`=`SalesOrder`.`dispatch_warehouse_id` AND (`SalesOrder__SalesOrder_dispatchWarehouse`.`deleted_time` IS NULL)  LEFT JOIN `shops` `SalesOrder__SalesOrder_dispatchShop` ON `SalesOrder__SalesOrder_dispatchShop`.`id`=`SalesOrder`.`dispatch_shop_id` AND (`SalesOrder__SalesOrder_dispatchShop`.`deleted_time` IS NULL)  LEFT JOIN `sales_order_items` `SalesOrder__SalesOrder_items` ON `SalesOrder__SalesOrder_items`.`sales_order_id`=`SalesOrder`.`id` AND (`SalesOrder__SalesOrder_items`.`deleted_time` IS NULL)  LEFT JOIN `products` `2015665013dcd75dc733aa93fabb00b453267281` ON `2015665013dcd75dc733aa93fabb00b453267281`.`id`=`SalesOrder__SalesOrder_items`.`product_id` AND (`2015665013dcd75dc733aa93fabb00b453267281`.`deleted_time` IS NULL)  LEFT JOIN `product_variants` `f1b77f7e63dbda5d770067e8578854ed4768f3d6` ON `f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`id`=`SalesOrder__SalesOrder_items`.`product_variant_id` AND (`f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`deleted_time` IS NULL)  LEFT JOIN `user` `SalesOrder__SalesOrder_createdByUser` ON `SalesOrder__SalesOrder_createdByUser`.`id`=`SalesOrder`.`created_by_user_id` AND (`SalesOrder__SalesOrder_createdByUser`.`deleted_time` IS NULL)  LEFT JOIN `user` `SalesOrder__SalesOrder_updatedByUser` ON `SalesOrder__SalesOrder_updatedByUser`.`id`=`SalesOrder`.`updated_by_user_id` AND (`SalesOrder__SalesOrder_updatedByUser`.`deleted_time` IS NULL)  LEFT JOIN `currencies` `f348beade047df59fc11d85c4d4e2b215a9833d3` ON `f348beade047df59fc11d85c4d4e2b215a9833d3`.`id`=`SalesOrder__SalesOrder_customer`.`default_currency_id` AND (`f348beade047df59fc11d85c4d4e2b215a9833d3`.`deleted_time` IS NULL)  LEFT JOIN `customer_groups` `a9ce36d1639fa8be3e5f62568692fb13b56b823b` ON `a9ce36d1639fa8be3e5f62568692fb13b56b823b`.`id`=`SalesOrder__SalesOrder_customer`.`customer_group_id` AND (`a9ce36d1639fa8be3e5f62568692fb13b56b823b`.`deleted_time` IS NULL)  LEFT JOIN `customers` `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3` ON `7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`id`=`SalesOrder__SalesOrder_quote`.`customer_id` AND (`7544938a213e9ac5e449172f6a7f2c6bbaae0fa3`.`deleted_time` IS NULL)  LEFT JOIN `currencies` `bca3499ee8a279bd7d5030e55631d200e7df3ce3` ON `bca3499ee8a279bd7d5030e55631d200e7df3ce3`.`id`=`SalesOrder__SalesOrder_quote`.`currency_id` AND (`bca3499ee8a279bd7d5030e55631d200e7df3ce3`.`deleted_time` IS NULL)  LEFT JOIN `addresses` `3a73b63e300aef4feb350d05facd45be30e1e0d7` ON `3a73b63e300aef4feb350d05facd45be30e1e0d7`.`id`=`SalesOrder__SalesOrder_quote`.`shipping_address_id` AND (`3a73b63e300aef4feb350d05facd45be30e1e0d7`.`deleted_time` IS NULL)  LEFT JOIN `addresses` `24c2d3b4259256500334f12e66eec3a5fc7a236d` ON `24c2d3b4259256500334f12e66eec3a5fc7a236d`.`id`=`SalesOrder__SalesOrder_quote`.`billing_address_id` AND (`24c2d3b4259256500334f12e66eec3a5fc7a236d`.`deleted_time` IS NULL)  LEFT JOIN `quote_items` `d969e2c9a767afadd82e506a327056eea91f770d` ON `d969e2c9a767afadd82e506a327056eea91f770d`.`quote_id`=`SalesOrder__SalesOrder_quote`.`id` AND (`d969e2c9a767afadd82e506a327056eea91f770d`.`deleted_time` IS NULL)  LEFT JOIN `user` `0c4bd12e108422ac4122566a4ec9da3b87a2e144` ON `0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`id`=`SalesOrder__SalesOrder_quote`.`created_by_user_id` AND (`0c4bd12e108422ac4122566a4ec9da3b87a2e144`.`deleted_time` IS NULL)  LEFT JOIN `user` `2084707e7e8e898e933f737d95156a0a4ece2d58` ON `2084707e7e8e898e933f737d95156a0a4ece2d58`.`id`=`SalesOrder__SalesOrder_quote`.`updated_by_user_id` AND (`2084707e7e8e898e933f737d95156a0a4ece2d58`.`deleted_time` IS NULL)  LEFT JOIN `addresses` `ba36da94256eb294fef133578a3e67a80d79ad08` ON `ba36da94256eb294fef133578a3e67a80d79ad08`.`id`=`SalesOrder__SalesOrder_dispatchWarehouse`.`address_id` AND (`ba36da94256eb294fef133578a3e67a80d79ad08`.`deleted_time` IS NULL)  LEFT JOIN `user` `ecb8eb6057f71450d30512dd0cfd225cbf3449fc` ON `ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`id`=`SalesOrder__SalesOrder_dispatchWarehouse`.`manager_id` AND (`ecb8eb6057f71450d30512dd0cfd225cbf3449fc`.`deleted_time` IS NULL)  LEFT JOIN `addresses` `48e0f2a12c7f7263895657f0b36544285ece3c02` ON `48e0f2a12c7f7263895657f0b36544285ece3c02`.`id`=`SalesOrder__SalesOrder_dispatchShop`.`address_id` AND (`48e0f2a12c7f7263895657f0b36544285ece3c02`.`deleted_time` IS NULL)  LEFT JOIN `user` `be5d25ef05328736a6dbe8455b44a9022f1ad1b7` ON `be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`id`=`SalesOrder__SalesOrder_dispatchShop`.`manager_id` AND (`be5d25ef05328736a6dbe8455b44a9022f1ad1b7`.`deleted_time` IS NULL)  LEFT JOIN `product_categories` `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e` ON `dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e`.`id`=`2015665013dcd75dc733aa93fabb00b453267281`.`product_category_id` AND (`dbfb36b5a7baf6f4e2be584b9112e33e64a2da3e`.`deleted_time` IS NULL)  LEFT JOIN `product_images` `1fdbf894b66e0bb3cbab705f1941bb271b772a40` ON `1fdbf894b66e0bb3cbab705f1941bb271b772a40`.`id`=`f1b77f7e63dbda5d770067e8578854ed4768f3d6`.`image_id` AND (`1fdbf894b66e0bb3cbab705f1941bb271b772a40`.`deleted_time` IS NULL)  LEFT JOIN `customers` `SalesOrder__customer` ON `SalesOrder__customer`.`id`=`SalesOrder`.`customer_id` AND (`SalesOrder__customer`.`deleted_time` IS NULL)  LEFT JOIN `currencies` `SalesOrder__customer__defaultCurrency` ON `SalesOrder__customer__defaultCurrency`.`id`=`SalesOrder__customer`.`default_currency_id` AND (`SalesOrder__customer__defaultCurrency`.`deleted_time` IS NULL)  LEFT JOIN `customer_groups` `SalesOrder__customer__customerGroup` ON `SalesOrder__customer__customerGroup`.`id`=`SalesOrder__customer`.`customer_group_id` AND (`SalesOrder__customer__customerGroup`.`deleted_time` IS NULL)  LEFT JOIN `addresses` `SalesOrder__customer__billingAddress` ON `SalesOrder__customer__billingAddress`.`id`=`SalesOrder__customer`.`billing_address_id` AND (`SalesOrder__customer__billingAddress`.`deleted_time` IS NULL)  LEFT JOIN `addresses` `SalesOrder__customer__defaultShippingAddress` ON `SalesOrder__customer__defaultShippingAddress`.`id`=`SalesOrder__customer`.`default_shipping_address_id` AND (`SalesOrder__customer__defaultShippingAddress`.`deleted_time` IS NULL)  LEFT JOIN `currencies` `SalesOrder__currency` ON `SalesOrder__currency`.`id`=`SalesOrder`.`currency_id` AND (`SalesOrder__currency`.`deleted_time` IS NULL)  LEFT JOIN `addresses` `SalesOrder__shippingAddress` ON `SalesOrder__shippingAddress`.`id`=`SalesOrder`.`shipping_address_id` AND (`SalesOrder__shippingAddress`.`deleted_time` IS NULL)  LEFT JOIN `addresses` `SalesOrder__billingAddress` ON `SalesOrder__billingAddress`.`id`=`SalesOrder`.`billing_address_id` AND (`SalesOrder__billingAddress`.`deleted_time` IS NULL)  LEFT JOIN `warehouses` `SalesOrder__dispatchWarehouse` ON `SalesOrder__dispatchWarehouse`.`id`=`SalesOrder`.`dispatch_warehouse_id` AND (`SalesOrder__dispatchWarehouse`.`deleted_time` IS NULL)  LEFT JOIN `addresses` `SalesOrder__dispatchWarehouse__address` ON `SalesOrder__dispatchWarehouse__address`.`id`=`SalesOrder__dispatchWarehouse`.`address_id` AND (`SalesOrder__dispatchWarehouse__address`.`deleted_time` IS NULL)  LEFT JOIN `user` `SalesOrder__dispatchWarehouse__manager` ON `SalesOrder__dispatchWarehouse__manager`.`id`=`SalesOrder__dispatchWarehouse`.`manager_id` AND (`SalesOrder__dispatchWarehouse__manager`.`deleted_time` IS NULL)  LEFT JOIN `shops` `SalesOrder__dispatchShop` ON `SalesOrder__dispatchShop`.`id`=`SalesOrder`.`dispatch_shop_id` AND (`SalesOrder__dispatchShop`.`deleted_time` IS NULL)  LEFT JOIN `addresses` `SalesOrder__dispatchShop__address` ON `SalesOrder__dispatchShop__address`.`id`=`SalesOrder__dispatchShop`.`address_id` AND (`SalesOrder__dispatchShop__address`.`deleted_time` IS NULL)  LEFT JOIN `user` `SalesOrder__dispatchShop__manager` ON `SalesOrder__dispatchShop__manager`.`id`=`SalesOrder__dispatchShop`.`manager_id` AND (`SalesOrder__dispatchShop__manager`.`deleted_time` IS NULL)  LEFT JOIN `user` `SalesOrder__createdByUser` ON `SalesOrder__createdByUser`.`id`=`SalesOrder`.`created_by_user_id` AND (`SalesOrder__createdByUser`.`deleted_time` IS NULL) WHERE ( ((`SalesOrder`.`id` = ?) AND (`SalesOrder`.`deleted_time` IS NULL)) ) AND ( `SalesOrder`.`deleted_time` IS NULL ) AND ( `SalesOrder`.`id` IN (28) ) -- PARAMETERS: [28]
error: Error: Can't add new command when connection is in closed state

stdout | src/modules/imports/__tests__/import-sales-order.spec.ts
query failed: ROLLBACK
error: Error: Can't add new command when connection is in closed state

 ❯ src/modules/imports/__tests__/import-sales-order.spec.ts (7 tests | 2 failed) 197ms
   ✓ Import API - Sales Order > POST /import/sales-orders > should schedule a sales order import successfully 17ms
   ✓ Import API - Sales Order > POST /import/sales-orders > should return 400 if data payload is empty 14ms
   × Import API - Sales Order > POST /import/sales-orders > should return 401 if not authenticated 30ms
     → expected 202 to be 401 // Object.is equality
   ✓ Import API - Sales Order > GET /import/batches/{id} > should return the status of the sales order import batch 18ms
   ✓ Import API - Sales Order > GET /import/batches/{id} > should return 404 for a non-existent batch ID 22ms
   ✓ Import API - Sales Order > GET /import/batches/{id} > should return 400 for an invalid batch ID format 14ms
   × Import API - Sales Order > GET /import/batches/{id} > should return 401 if not authenticated 23ms
     → expected 200 to be 401 // Object.is equality
stdout | src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts
Avant init DB

stdout | src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts
Après init DB

stdout | src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts (18 tests | 15 failed) 165ms
   × DeliveryItems API > POST /deliveries/:deliveryId/items > should add a new item to a delivery 8ms
     → expected 403 to be 201 // Object.is equality
   × DeliveryItems API > POST /deliveries/:deliveryId/items > should fail to add an item to a non-existent delivery 8ms
     → expected 403 to be 404 // Object.is equality
   ✓ DeliveryItems API > POST /deliveries/:deliveryId/items > should fail to add an item to a delivery if status is not editable (PENDING or IN_PREPARATION) 7ms
   × DeliveryItems API > GET /deliveries/:deliveryId/items > should return a list of items for a delivery 7ms
     → expected 403 to be 200 // Object.is equality
   × DeliveryItems API > GET /deliveries/:deliveryId/items > should return 404 for a non-existent delivery 7ms
     → expected 403 to be 404 // Object.is equality
   × DeliveryItems API > GET /deliveries/:deliveryId/items/:itemId > should return a specific item by ID for a delivery 8ms
     → expected 403 to be 200 // Object.is equality
   × DeliveryItems API > GET /deliveries/:deliveryId/items/:itemId > should return 404 for a non-existent item 7ms
     → expected 403 to be 404 // Object.is equality
   × DeliveryItems API > GET /deliveries/:deliveryId/items/:itemId > should return 404 for an item not belonging to the specified delivery 7ms
     → expected 403 to be 404 // Object.is equality
   × DeliveryItems API > GET /deliveries/:deliveryId/items/:itemId > should fail to get a specific item without authentication 12ms
     → expected 403 to be 401 // Object.is equality
   × DeliveryItems API > PUT /deliveries/:deliveryId/items/:itemId > should update an existing item in a delivery 10ms
     → expected 403 to be 200 // Object.is equality
   × DeliveryItems API > PUT /deliveries/:deliveryId/items/:itemId > should fail to update an item in a non-existent delivery 8ms
     → expected 403 to be 404 // Object.is equality
   × DeliveryItems API > PUT /deliveries/:deliveryId/items/:itemId > should fail to update a non-existent item in an existing delivery 9ms
     → expected 403 to be 404 // Object.is equality
   ✓ DeliveryItems API > PUT /deliveries/:deliveryId/items/:itemId > should fail to update an item if delivery status is not editable 9ms
   × DeliveryItems API > PUT /deliveries/:deliveryId/items/:itemId > should fail to update an item without authentication 8ms
     → expected 403 to be 401 // Object.is equality
   × DeliveryItems API > DELETE /deliveries/:deliveryId/items/:itemId > should delete an item from a delivery 6ms
     → expected 403 to be 204 // Object.is equality
   × DeliveryItems API > DELETE /deliveries/:deliveryId/items/:itemId > should fail to delete an item from a non-existent delivery 7ms
     → expected 403 to be 404 // Object.is equality
   × DeliveryItems API > DELETE /deliveries/:deliveryId/items/:itemId > should fail to delete a non-existent item from an existing delivery 6ms
     → expected 403 to be 404 // Object.is equality
   ✓ DeliveryItems API > DELETE /deliveries/:deliveryId/items/:itemId > should fail to delete an item if delivery status is not editable 6ms
stdout | src/modules/addresses/__tests__/address.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/addresses/__tests__/address.spec.ts
Avant init DB

stdout | src/modules/addresses/__tests__/address.spec.ts
Après init DB

stdout | src/modules/addresses/__tests__/address.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/addresses/__tests__/address.spec.ts (20 tests | 20 failed) 194ms
   × Address API > POST /addresses > should create a new address (as admin) 8ms
     → expected 403 to be 201 // Object.is equality
   × Address API > POST /addresses > should fail to create a new address without authentication 10ms
     → expected 403 to be 401 // Object.is equality
   × Address API > POST /addresses > should return 400 for invalid address data (as admin) 12ms
     → expected 403 to be 400 // Object.is equality
   × Address API > GET /addresses > should return a list of addresses (as admin) 6ms
     → expected 403 to be 200 // Object.is equality
   × Address API > GET /addresses > should fail to return a list of addresses without authentication 7ms
     → expected 403 to be 401 // Object.is equality
   × Address API > GET /addresses > should support pagination, sorting, filtering, and searching 8ms
     → expected 403 to be 200 // Object.is equality
   × Address API > GET /addresses/:id > should return a specific address by ID (as admin) 8ms
     → expected 403 to be 200 // Object.is equality
   × Address API > GET /addresses/:id > should return 404 for a non-existent address ID (as admin) 6ms
     → expected 403 to be 404 // Object.is equality
   × Address API > GET /addresses/:id > should return 400 for an invalid address ID format (as admin) 6ms
     → expected 403 to be 400 // Object.is equality
   × Address API > GET /addresses/:id > should fail to get a specific address without authentication 8ms
     → expected 403 to be 401 // Object.is equality
   × Address API > PUT /addresses/:id > should update an address by ID (as admin) 8ms
     → expected 403 to be 200 // Object.is equality
   × Address API > PUT /addresses/:id > should return 404 for updating a non-existent address ID (as admin) 10ms
     → expected 403 to be 404 // Object.is equality
   × Address API > PUT /addresses/:id > should return 400 for an invalid address ID format (as admin) 8ms
     → expected 403 to be 400 // Object.is equality
   × Address API > PUT /addresses/:id > should return 400 for invalid update data (as admin) 10ms
     → expected 403 to be 400 // Object.is equality
   × Address API > PUT /addresses/:id > should fail to update an address without authentication 7ms
     → expected 403 to be 401 // Object.is equality
   × Address API > DELETE /addresses/:id > should soft delete an address by ID (as admin) 8ms
     → expected 403 to be 204 // Object.is equality
   × Address API > DELETE /addresses/:id > should return 404 for deleting a non-existent address ID (as admin) 9ms
     → expected 403 to be 404 // Object.is equality
   × Address API > DELETE /addresses/:id > should return 400 for an invalid address ID format (as admin) 8ms
     → expected 403 to be 400 // Object.is equality
   × Address API > DELETE /addresses/:id > should fail to delete an address without authentication 8ms
     → expected 403 to be 401 // Object.is equality
   × Address API > DELETE /addresses/:id > should return 400 if address is in use by another entity (e.g., Company) 7ms
     → expected 403 to be 400 // Object.is equality
stdout | src/modules/imports/__tests__/import-opening-stock.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/imports/__tests__/import-opening-stock.spec.ts
Avant init DB

stdout | src/modules/imports/__tests__/import-opening-stock.spec.ts
Après init DB

stdout | src/modules/imports/__tests__/import-opening-stock.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

stdout | src/modules/imports/__tests__/import-opening-stock.spec.ts
query failed: COMMIT
error: Error: Can't add new command when connection is in closed state

stdout | src/modules/imports/__tests__/import-opening-stock.spec.ts
query failed: ROLLBACK
error: Error: Can't add new command when connection is in closed state

 ❯ src/modules/imports/__tests__/import-opening-stock.spec.ts (7 tests | 2 failed) 144ms
   ✓ Import API - Opening Stock > POST /import/opening-stock > should schedule an opening stock import successfully 25ms
   ✓ Import API - Opening Stock > POST /import/opening-stock > should return 400 if data payload is empty 14ms
   × Import API - Opening Stock > POST /import/opening-stock > should return 401 if not authenticated 18ms
     → expected 202 to be 401 // Object.is equality
   ✓ Import API - Opening Stock > GET /import/batches/{id} > should return the status of the opening stock import batch 17ms
   ✓ Import API - Opening Stock > GET /import/batches/{id} > should return 404 for a non-existent batch ID 16ms
   ✓ Import API - Opening Stock > GET /import/batches/{id} > should return 400 for an invalid batch ID format 10ms
   × Import API - Opening Stock > GET /import/batches/{id} > should return 401 if not authenticated 19ms
     → expected 200 to be 401 // Object.is equality
stdout | src/modules/imports/__tests__/import-product.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/imports/__tests__/import-product.spec.ts
Avant init DB

stdout | src/modules/imports/__tests__/import-product.spec.ts
Après init DB

stdout | src/modules/imports/__tests__/import-product.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/imports/__tests__/import-product.spec.ts (7 tests | 2 failed) 119ms
   ✓ Import API - Product > POST /import/products > should schedule a product import successfully 15ms
   ✓ Import API - Product > POST /import/products > should return 400 if data payload is empty 13ms
   × Import API - Product > POST /import/products > should return 401 if not authenticated 26ms
     → expected 202 to be 401 // Object.is equality
   ✓ Import API - Product > GET /import/batches/{id} > should return the status of the product import batch 12ms
   ✓ Import API - Product > GET /import/batches/{id} > should return 404 for a non-existent batch ID 11ms
   ✓ Import API - Product > GET /import/batches/{id} > should return 400 for an invalid batch ID format 8ms
   × Import API - Product > GET /import/batches/{id} > should return 401 if not authenticated 12ms
     → expected 200 to be 401 // Object.is equality
stdout | src/modules/imports/__tests__/import-purchase-order.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/imports/__tests__/import-purchase-order.spec.ts
Avant init DB

stdout | src/modules/imports/__tests__/import-purchase-order.spec.ts
Après init DB

stdout | src/modules/imports/__tests__/import-purchase-order.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

stdout | src/modules/imports/__tests__/import-purchase-order.spec.ts
query failed: COMMIT
error: Error: Can't add new command when connection is in closed state

stdout | src/modules/imports/__tests__/import-purchase-order.spec.ts
query failed: ROLLBACK
error: Error: Can't add new command when connection is in closed state

stdout | src/modules/imports/__tests__/import-purchase-order.spec.ts
query failed: COMMIT
error: Error: Can't add new command when connection is in closed state

stdout | src/modules/imports/__tests__/import-purchase-order.spec.ts
query failed: ROLLBACK
error: Error: Can't add new command when connection is in closed state

stdout | src/modules/imports/__tests__/import-purchase-order.spec.ts
query failed: SELECT `PurchaseOrder`.`id` AS `PurchaseOrder_id`, `PurchaseOrder`.`created_time` AS `PurchaseOrder_created_time`, `PurchaseOrder`.`updated_time` AS `PurchaseOrder_updated_time`, `PurchaseOrder`.`deleted_time` AS `PurchaseOrder_deleted_time`, `PurchaseOrder`.`status` AS `PurchaseOrder_status`, `PurchaseOrder`.`total_amount_ht` AS `PurchaseOrder_total_amount_ht`, `PurchaseOrder`.`total_vat_amount` AS `PurchaseOrder_total_vat_amount`, `PurchaseOrder`.`total_amount_ttc` AS `PurchaseOrder_total_amount_ttc` FROM `purchase_orders` `PurchaseOrder` WHERE ( `PurchaseOrder`.`id` = ? ) AND ( `PurchaseOrder`.`deleted_time` IS NULL ) -- PARAMETERS: [11]
error: Error: Can't add new command when connection is in closed state

stdout | src/modules/imports/__tests__/import-purchase-order.spec.ts
query failed: ROLLBACK
error: Error: Can't add new command when connection is in closed state

 ❯ src/modules/imports/__tests__/import-purchase-order.spec.ts (7 tests | 2 failed) 181ms
   ✓ Import API - Purchase Order > POST /import/purchase-orders > should schedule a purchase order import successfully 24ms
   ✓ Import API - Purchase Order > POST /import/purchase-orders > should return 400 if data payload is empty 33ms
   × Import API - Purchase Order > POST /import/purchase-orders > should return 401 if not authenticated 23ms
     → expected 202 to be 401 // Object.is equality
   ✓ Import API - Purchase Order > GET /import/batches/{id} > should return the status of the purchase order import batch 21ms
   ✓ Import API - Purchase Order > GET /import/batches/{id} > should return 404 for a non-existent batch ID 14ms
   ✓ Import API - Purchase Order > GET /import/batches/{id} > should return 400 for an invalid batch ID format 14ms
   × Import API - Purchase Order > GET /import/batches/{id} > should return 401 if not authenticated 16ms
     → expected 200 to be 401 // Object.is equality
stdout | src/modules/imports/__tests__/import-product-category.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/imports/__tests__/import-product-category.spec.ts
Avant init DB

stdout | src/modules/imports/__tests__/import-product-category.spec.ts
Après init DB

stdout | src/modules/imports/__tests__/import-product-category.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/imports/__tests__/import-product-category.spec.ts (7 tests | 2 failed) 126ms
   ✓ Import API - Product Category > POST /import/product-categories > should schedule a product category import successfully 13ms
   ✓ Import API - Product Category > POST /import/product-categories > should return 400 if data payload is empty 16ms
   × Import API - Product Category > POST /import/product-categories > should return 401 if not authenticated 18ms
     → expected 202 to be 401 // Object.is equality
   ✓ Import API - Product Category > GET /import/batches/{id} > should return the status of the product category import batch 22ms
   ✓ Import API - Product Category > GET /import/batches/{id} > should return 404 for a non-existent batch ID 12ms
   ✓ Import API - Product Category > GET /import/batches/{id} > should return 400 for an invalid batch ID format 6ms
   × Import API - Product Category > GET /import/batches/{id} > should return 401 if not authenticated 10ms
     → expected 200 to be 401 // Object.is equality
stdout | src/modules/imports/__tests__/import-customer.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/imports/__tests__/import-customer.spec.ts
Avant init DB

stdout | src/modules/imports/__tests__/import-customer.spec.ts
Après init DB

stdout | src/modules/imports/__tests__/import-customer.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ✓ src/modules/imports/__tests__/import-customer.spec.ts (5 tests) 102ms
stdout | src/modules/compagnies/__tests__/company.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/compagnies/__tests__/company.spec.ts
Avant init DB

stdout | src/modules/compagnies/__tests__/company.spec.ts
Après init DB

stdout | src/modules/compagnies/__tests__/company.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/compagnies/__tests__/company.spec.ts (9 tests | 9 failed) 101ms
   × Company API > GET /companies > should return a list of companies (as admin) 6ms
     → expected 400 to be 200 // Object.is equality
   × Company API > GET /companies > should fail to return a list of companies without authentication 6ms
     → expected 400 to be 401 // Object.is equality
   × Company API > GET /company/:id > should return a specific company by ID (as admin) 6ms
     → expected 403 to be 200 // Object.is equality
   × Company API > GET /company/:id > should return 404 for a non-existent company ID (as admin) 6ms
     → expected 403 to be 404 // Object.is equality
   × Company API > GET /company/:id > should fail to get a specific company without authentication 6ms
     → expected 403 to be 401 // Object.is equality
   × Company API > PUT /company/:id > should update a company by ID (as admin) 12ms
     → expected 403 to be 200 // Object.is equality
   × Company API > PUT /company/:id > should return 404 for updating a non-existent company ID (as admin) 12ms
     → expected 403 to be 404 // Object.is equality
   × Company API > PUT /company/:id > should return 400 for invalid update data (as admin) 11ms
     → expected 403 to be 400 // Object.is equality
   × Company API > PUT /company/:id > should fail to update a company without authentication 13ms
     → expected 403 to be 401 // Object.is equality
stdout | src/modules/inventory-sessions/__tests__/inventory-session.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/inventory-sessions/__tests__/inventory-session.spec.ts
Avant init DB

stdout | src/modules/inventory-sessions/__tests__/inventory-session.spec.ts
Après init DB

stdout | src/modules/inventory-sessions/__tests__/inventory-session.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/inventory-sessions/__tests__/inventory-session.spec.ts (11 tests | 9 failed) 99ms
   × InventorySessions API > POST /inventory-sessions > should create a new inventory session for a warehouse 7ms
     → expected 403 to be 201 // Object.is equality
   × InventorySessions API > POST /inventory-sessions > should fail to create a new inventory session for a shop if one already exists 6ms
     → expected 403 to be 400 // Object.is equality
   × InventorySessions API > GET /inventory-sessions > should return a paginated list of inventory sessions 6ms
     → expected 403 to be 200 // Object.is equality
   × InventorySessions API > GET /inventory-sessions/:id > should return an inventory session by id 7ms
     → expected 403 to be 200 // Object.is equality
   ✓ InventorySessions API > GET /inventory-sessions/:id > should return 404 for non-existent session 2ms
   × InventorySessions API > PUT /inventory-sessions/:id > should update notes and dates of an inventory session 6ms
     → expected 403 to be 200 // Object.is equality
   × InventorySessions API > PUT /inventory-sessions/:id > should not allow updating warehouseId or shopId 6ms
     → expected 403 to be 400 // Object.is equality
   × InventorySessions API > POST /inventory-sessions/:id/complete > should complete an inventory session 6ms
     → expected 403 to be 200 // Object.is equality
   × InventorySessions API > POST /inventory-sessions/:id/complete > should not complete an already completed session 7ms
     → expected 403 to be 400 // Object.is equality
   × InventorySessions API > PATCH /inventory-sessions/:id/cancel > should cancel a pending/in_progress inventory session 11ms
     → expected 403 to be 200 // Object.is equality
   ✓ InventorySessions API > PATCH /inventory-sessions/:id/cancel > should not cancel a completed session 5ms
stdout | src/modules/imports/__tests__/import-supplier.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/imports/__tests__/import-supplier.spec.ts
Avant init DB

stdout | src/modules/imports/__tests__/import-supplier.spec.ts
Après init DB

stdout | src/modules/imports/__tests__/import-supplier.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/imports/__tests__/import-supplier.spec.ts (5 tests | 1 failed) 81ms
   ✓ Import API - Supplier > POST /import/suppliers > should schedule a supplier import successfully 12ms
   ✓ Import API - Supplier > GET /import/batches/{id} > should return the status of the supplier import batch 16ms
   ✓ Import API - Supplier > GET /import/batches/{id} > should return 404 for a non-existent batch ID 12ms
   ✓ Import API - Supplier > GET /import/batches/{id} > should return 400 for an invalid batch ID format 10ms
   × Import API - Supplier > GET /import/batches/{id} > should return 401 if not authenticated 11ms
     → expected 200 to be 401 // Object.is equality
stdout | src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts
Avant init DB

stdout | src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts
Après init DB

stdout | src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ❯ src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts (10 tests | 9 failed) 55ms
   × Composite Product Items API > POST /products/:productId/components > should add a component (base product) to a composite product (as admin) 4ms    
     → expected 404 to be 201 // Object.is equality
   × Composite Product Items API > POST /products/:productId/components > should add a component (product variant) to a composite product (as admin) 4ms 
     → expected 404 to be 201 // Object.is equality
   × Composite Product Items API > POST /products/:productId/components > should fail if composite product is not marked as composite (as admin) 3ms     
     → expected 404 to be 400 // Object.is equality
   × Composite Product Items API > POST /products/:productId/components > should fail if component product does not exist (as admin) 3ms
     → expected 404 to be 400 // Object.is equality
   × Composite Product Items API > GET /products/:productId/components > should list all components for a composite product (as admin) 2ms
     → expected 404 to be 200 // Object.is equality
   × Composite Product Items API > GET /products/:productId/components/:itemId > should get a specific component link by its ID (as admin) 2ms
     → expected 404 to be 200 // Object.is equality
   ✓ Composite Product Items API > GET /products/:productId/components/:itemId > should return 404 for non-existent item ID (as admin) 2ms
   × Composite Product Items API > PUT /products/:productId/components/:itemId > should update a component quantity (as admin) 5ms
     → expected 404 to be 200 // Object.is equality
   × Composite Product Items API > PUT /products/:productId/components/:itemId > should fail to update with zero or negative quantity (as admin) 3ms     
     → expected 404 to be 400 // Object.is equality
   × Composite Product Items API > DELETE /products/:productId/components/:itemId > should remove a component from a composite product (as admin) 3ms    
     → expected 404 to be 204 // Object.is equality
stdout | src/modules/stock-transfers/__tests__/stock-transfert.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/stock-transfers/__tests__/stock-transfert.spec.ts
Avant init DB

stdout | src/modules/stock-transfers/__tests__/stock-transfert.spec.ts
Après init DB

stdout | src/modules/stock-transfers/__tests__/stock-transfert.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ✓ src/modules/stock-transfers/__tests__/stock-transfert.spec.ts (37 tests) 3535ms
   ✓ StockTransfers API > PATCH /stock-transfers/:id/receive > should mark a stock transfer as received (fully)  316ms
   ✓ StockTransfers API > PATCH /stock-transfers/:id/receive > should mark a stock transfer as partially_received  309ms
stdout | src/modules/supplier-returns/__tests__/supplier-return.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/supplier-returns/__tests__/supplier-return.spec.ts
Avant init DB

stdout | src/modules/supplier-returns/__tests__/supplier-return.spec.ts
Après init DB

stdout | src/modules/supplier-returns/__tests__/supplier-return.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ✓ src/modules/supplier-returns/__tests__/supplier-return.spec.ts (28 tests) 2828ms
   ✓ SupplierReturns API > PATCH /supplier-returns/:id/ship > should record shipment of returned items  323ms
   ✓ SupplierReturns API > PATCH /supplier-returns/:id/complete > should complete the supplier return process  306ms
stdout | src/modules/quotes/quote-items/__tests__/quote-item.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/quotes/quote-items/__tests__/quote-item.spec.ts
Avant init DB

stdout | src/modules/quotes/quote-items/__tests__/quote-item.spec.ts
Après init DB

stdout | src/modules/quotes/quote-items/__tests__/quote-item.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ✓ src/modules/quotes/quote-items/__tests__/quote-item.spec.ts (9 tests) 605ms
stdout | src/modules/supplier-invoices/__tests__/supplier-invoice.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/supplier-invoices/__tests__/supplier-invoice.spec.ts
Avant init DB

stdout | src/modules/supplier-invoices/__tests__/supplier-invoice.spec.ts
Après init DB

stdout | src/modules/supplier-invoices/__tests__/supplier-invoice.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ✓ src/modules/supplier-invoices/__tests__/supplier-invoice.spec.ts (19 tests) 631ms
stdout | src/modules/user-activity-logs/__tests__/user-activity-log.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/user-activity-logs/__tests__/user-activity-log.spec.ts
Avant init DB

stdout | src/modules/user-activity-logs/__tests__/user-activity-log.spec.ts
Après init DB

stdout | src/modules/user-activity-logs/__tests__/user-activity-log.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ✓ src/modules/user-activity-logs/__tests__/user-activity-log.spec.ts (13 tests) 482ms
stdout | src/modules/product-suppliers/__tests__/product-supplier.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/product-suppliers/__tests__/product-supplier.spec.ts
Avant init DB

stdout | src/modules/product-suppliers/__tests__/product-supplier.spec.ts
Après init DB

stdout | src/modules/product-suppliers/__tests__/product-supplier.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ✓ src/modules/product-suppliers/__tests__/product-supplier.spec.ts (10 tests) 288ms
stdout | src/modules/product-variants/__test__/product-variant.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/product-variants/__test__/product-variant.spec.ts
Avant init DB

stdout | src/modules/product-variants/__test__/product-variant.spec.ts
Après init DB

stdout | src/modules/product-variants/__test__/product-variant.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ✓ src/modules/product-variants/__test__/product-variant.spec.ts (11 tests) 233ms
stdout | src/modules/product-images/__tests__/product-image.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/product-images/__tests__/product-image.spec.ts
Avant init DB

stdout | src/modules/product-images/__tests__/product-image.spec.ts
Après init DB

stdout | src/modules/product-images/__tests__/product-image.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ✓ src/modules/product-images/__tests__/product-image.spec.ts (11 tests) 221ms
stdout | src/modules/auth/__tests__/password.services.spec.ts
DEBUT GLOBAL SETUP

stdout | src/modules/auth/__tests__/password.services.spec.ts
Avant init DB

stdout | src/modules/auth/__tests__/password.services.spec.ts
Après init DB

stdout | src/modules/auth/__tests__/password.services.spec.ts
Utilisateurs présents en base juste avant le login admin :
- id: 1, email: user.test1@example.com, isActive: true, level: 5
- id: 2, email: user.test2@example.com, isActive: true, level: 3
- id: 3, email: expired.user@example.com, isActive: true, level: 1
- id: 4, email: standard-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 5, email: reader-user-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 11, email: resetpref-main-ffad7a@mailtrap.com, isActive: true, level: 2
- id: 15, email: ztest-user-ffad7a@mailtrap.com, isActive: true, level: 3
- id: 16, email: auth-test-user-1751474489861@mailtrap.com, isActive: true, level: 2
Bypass d'authentification activé : aucun login admin nécessaire.

 ✓ src/modules/auth/__tests__/password.services.spec.ts (7 tests) 22ms

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Failed Tests 294 ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > POST /addresses > should create a new address (as admin)
AssertionError: expected 403 to be 201 // Object.is equality

- Expected
+ Received

- 201
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:25:26
     23|         .send(testAddress);
     24|
     25|       expect(res.status).toBe(201);
       |                          ^
     26|       expect(res.body.status).toBe('success');
     27|       expect(res.body).toHaveProperty('data');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > POST /addresses > should fail to create a new address without authentication      
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:36:26
     34|       const res = await request(app).post('/api/v1/addresses').send(testAddress);
     35|
     36|       expect(res.status).toBe(401);
       |                          ^
     37|       expect(res.body.status).toBe('fail');
     38|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > POST /addresses > should return 400 for invalid address data (as admin)
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:47:26
     45|         .send(invalidAddress);
     46|
     47|       expect(res.status).toBe(400);
       |                          ^
     48|       expect(res.body.status).toBe('fail');
     49|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > GET /addresses > should return a list of addresses (as admin)
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:58:26
     56|         .set('Authorization', `Bearer ${adminToken}`);
     57|
     58|       expect(res.status).toBe(200);
       |                          ^
     59|       expect(res.body.status).toBe('success');
     60|       expect(res.body).toHaveProperty('data');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > GET /addresses > should fail to return a list of addresses without authentication 
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:67:26
     65|       const res = await request(app).get('/api/v1/addresses');
     66|
     67|       expect(res.status).toBe(401);
       |                          ^
     68|       expect(res.body.status).toBe('fail');
     69|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > GET /addresses > should support pagination, sorting, filtering, and searching     
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:79:26
     77|         .set('Authorization', `Bearer ${adminToken}`);
     78|
     79|       expect(res.status).toBe(200);
       |                          ^
     80|       expect(res.body.status).toBe('success');
     81|       expect(res.body).toHaveProperty('data');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > GET /addresses/:id > should return a specific address by ID (as admin)
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:105:26
    103|         .set('Authorization', `Bearer ${adminToken}`);
    104|
    105|       expect(res.status).toBe(200);
       |                          ^
    106|       expect(res.body.status).toBe('success');
    107|       expect(res.body).toHaveProperty('data');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > GET /addresses/:id > should return 404 for a non-existent address ID (as admin)   
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:118:26
    116|         .set('Authorization', `Bearer ${adminToken}`);
    117|
    118|       expect(res.status).toBe(404);
       |                          ^
    119|       expect(res.body.status).toBe('fail');
    120|       expect(res.body.message).toBe('Not found');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > GET /addresses/:id > should return 400 for an invalid address ID format (as admin)
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:129:26
    127|         .set('Authorization', `Bearer ${adminToken}`);
    128|
    129|       expect(res.status).toBe(400);
       |                          ^
    130|       expect(res.body.status).toBe('fail');
    131|       expect(res.body.message).toBe('Bad request');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > GET /addresses/:id > should fail to get a specific address without authentication 
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:137:26
    135|       const res = await request(app).get(`/api/v1/addresses/${createdAddressId}`);
    136|
    137|       expect(res.status).toBe(401);
       |                          ^
    138|       expect(res.body.status).toBe('fail');
    139|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > PUT /addresses/:id > should update an address by ID (as admin)
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:156:26
    154|         .send(updatedAddress);
    155|
    156|       expect(res.status).toBe(200);
       |                          ^
    157|       expect(res.body.status).toBe('success');
    158|       expect(res.body).toHaveProperty('data');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > PUT /addresses/:id > should return 404 for updating a non-existent address ID (as admin)
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:170:26
    168|         .send(updatedAddress);
    169|
    170|       expect(res.status).toBe(404);
       |                          ^
    171|       expect(res.body.status).toBe('fail');
    172|       expect(res.body.message).toBe('Not found');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > PUT /addresses/:id > should return 400 for an invalid address ID format (as admin)
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:182:26
    180|         .send(updatedAddress);
    181|
    182|       expect(res.status).toBe(400);
       |                          ^
    183|       expect(res.body.status).toBe('fail');
    184|       expect(res.body.message).toBe('Bad request');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > PUT /addresses/:id > should return 400 for invalid update data (as admin)
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:194:26
    192|         .send(invalidUpdate);
    193|
    194|       expect(res.status).toBe(400);
       |                          ^
    195|       expect(res.body.status).toBe('fail');
    196|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > PUT /addresses/:id > should fail to update an address without authentication      
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:203:26
    201|         .send(updatedAddress);
    202|
    203|       expect(res.status).toBe(401);
       |                          ^
    204|       expect(res.body.status).toBe('fail');
    205|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[15/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > DELETE /addresses/:id > should soft delete an address by ID (as admin)
AssertionError: expected 403 to be 204 // Object.is equality

- Expected
+ Received

- 204
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:229:26
    227|         .set('Authorization', `Bearer ${adminToken}`);
    228|
    229|       expect(res.status).toBe(204);
       |                          ^
    230|     });
    231|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[16/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > DELETE /addresses/:id > should return 404 for deleting a non-existent address ID (as admin)
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:238:26
    236|         .set('Authorization', `Bearer ${adminToken}`);
    237|
    238|       expect(res.status).toBe(404);
       |                          ^
    239|       expect(res.body.status).toBe('fail');
    240|       expect(res.body.message).toBe('Not found');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[17/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > DELETE /addresses/:id > should return 400 for an invalid address ID format (as admin)
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:249:26
    247|         .set('Authorization', `Bearer ${adminToken}`);
    248|
    249|       expect(res.status).toBe(400);
       |                          ^
    250|       expect(res.body.status).toBe('fail');
    251|       expect(res.body.message).toBe('Bad request');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[18/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > DELETE /addresses/:id > should fail to delete an address without authentication   
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:257:26
    255|       const res = await request(app).delete(`/api/v1/addresses/${addressToDeleteId}`);
    256|
    257|       expect(res.status).toBe(401);
       |                          ^
    258|       expect(res.body.status).toBe('fail');
    259|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[19/294]⎯

 FAIL  src/modules/addresses/__tests__/address.spec.ts > Address API > DELETE /addresses/:id > should return 400 if address is in use by another entity (e.g., Company)
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/addresses/__tests__/address.spec.ts:269:26
    267|         .set('Authorization', `Bearer ${adminToken}`);
    268|
    269|       expect(res.status).toBe(400);
       |                          ^
    270|       expect(res.body.status).toBe('fail');
    271|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[20/294]⎯

 FAIL  src/modules/auth/__tests__/login.spec.ts > Auth API > POST /auth/logout > should logout successfully
AssertionError: expected 401 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 401

 ❯ src/modules/auth/__tests__/login.spec.ts:164:26
    162|         .post('/api/v1/auth/logout')
    163|         .set('Authorization', `Bearer ${tokenForLogout}`);
    164|       expect(res.status).toBe(200);
       |                          ^
    165|       expect(res.body.data.message).toMatch(/Logout successful/i);
    166|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[21/294]⎯

 FAIL  src/modules/auth/__tests__/login.spec.ts > PUT /users/:userId/password > should fail without authentication token
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/auth/__tests__/login.spec.ts:329:24
    327|       .put(`/api/v1/users/${testUserId}/password`)
    328|       .send({ password: 'NewPassword123!' });
    329|     expect(res.status).toBe(401);
       |                        ^
    330|   });
    331|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[22/294]⎯

 FAIL  src/modules/auth/__tests__/login.spec.ts > PUT /users/:userId/password > should fail with password identical to the current one
AssertionError: expected 200 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 200

 ❯ src/modules/auth/__tests__/login.spec.ts:354:24
    352|       .set('Authorization', `Bearer ${currentTokenForPutTests}`)
    353|       .send({ password: currentPassword });
    354|     expect(res.status).toBe(400);
       |                        ^
    355|     expect(res.body.message).toBe('Bad request');
    356|     expect(res.body.data).toMatch(/New password must be different/i);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[23/294]⎯

 FAIL  src/modules/auth/__tests__/login.spec.ts > PUT /users/:userId/password > should fail to update another user password without specific rights      
AssertionError: expected 200 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 200

 ❯ src/modules/auth/__tests__/login.spec.ts:399:24
    397|       .set('Authorization', `Bearer ${currentTokenForPutTests}`)
    398|       .send({ password: 'AnotherPassword1!' });
    399|     expect(res.status).toBe(403);
       |                        ^
    400|     expect(res.body.message).toBe('Forbidden');
    401|     expect(res.body.data).toMatch(/Insufficient permissions|cannot update password for user/i);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[24/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > POST /bank-accounts > should create a new bank account (as admin)    
AssertionError: expected 403 to be 201 // Object.is equality

- Expected
+ Received

- 201
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:27:26
     25|         .send(testAccount);
     26|
     27|       expect(res.status).toBe(201);
       |                          ^
     28|       expect(res.body.status).toBe('success');
     29|       expect(res.body.data).toHaveProperty('id');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[25/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > POST /bank-accounts > should fail to create a bank account without authentication
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:42:26
     40|     it('should fail to create a bank account without authentication', async () => {
     41|       const res = await request(app).post('/api/v1/bank-accounts').send(testAccount);
     42|       expect(res.status).toBe(401);
       |                          ^
     43|       expect(res.body.status).toBe('fail');
     44|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[26/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > POST /bank-accounts > should return 400 for missing required accountName
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:51:26
     49|         .set('Authorization', `Bearer ${adminToken}`)
     50|         .send({ ...testAccount, accountName: '' });
     51|       expect(res.status).toBe(400);
       |                          ^
     52|       expect(res.body.status).toBe('fail');
     53|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[27/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > POST /bank-accounts > should return 400 for missing required bankName
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:60:26
     58|         .set('Authorization', `Bearer ${adminToken}`)
     59|         .send({ ...testAccount, bankName: '' });
     60|       expect(res.status).toBe(400);
       |                          ^
     61|       expect(res.body.status).toBe('fail');
     62|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[28/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > POST /bank-accounts > should return 400 for missing required currencyId
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:70:26
     68|         .set('Authorization', `Bearer ${adminToken}`)
     69|         .send(partial);
     70|       expect(res.status).toBe(400);
       |                          ^
     71|       expect(res.body.status).toBe('fail');
     72|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[29/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > POST /bank-accounts > should return 400 for duplicate accountName    
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:79:26
     77|         .set('Authorization', `Bearer ${adminToken}`)
     78|         .send({ ...testAccount, iban: 'FR7612345678901234567890999' }); // Change IBAN to avoid IBAN conflict
     79|       expect(res.status).toBe(400);
       |                          ^
     80|       expect(res.body.status).toBe('fail');
     81|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[30/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > POST /bank-accounts > should return 400 for duplicate IBAN
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:88:26
     86|         .set('Authorization', `Bearer ${adminToken}`)
     87|         .send({ ...testAccount, accountName: 'Another Account' });
     88|       expect(res.status).toBe(400);
       |                          ^
     89|       expect(res.body.status).toBe('fail');
     90|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[31/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > GET /bank-accounts > should return a list of bank accounts (as admin)
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:98:26
     96|         .get('/api/v1/bank-accounts')
     97|         .set('Authorization', `Bearer ${adminToken}`);
     98|       expect(res.status).toBe(200);
       |                          ^
     99|       expect(res.body.status).toBe('success');
    100|       expect(Array.isArray(res.body.data.accounts)).toBe(true);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[32/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > GET /bank-accounts > should fail to return bank accounts without authentication
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:105:26
    103|     it('should fail to return bank accounts without authentication', async () => {
    104|       const res = await request(app).get('/api/v1/bank-accounts');
    105|       expect(res.status).toBe(401);
       |                          ^
    106|       expect(res.body.status).toBe('fail');
    107|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[33/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > GET /bank-accounts > should support pagination, sorting, and filtering
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:115:26
    113|         )
    114|         .set('Authorization', `Bearer ${adminToken}`);
    115|       expect(res.status).toBe(200);
       |                          ^
    116|       expect(res.body.status).toBe('success');
    117|       expect(Array.isArray(res.body.data.accounts)).toBe(true);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[34/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > GET /bank-accounts/:id > should return a specific bank account by ID (as admin)
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:138:26
    136|         .get(`/api/v1/bank-accounts/${createdAccountId}`)
    137|         .set('Authorization', `Bearer ${adminToken}`);
    138|       expect(res.status).toBe(200);
       |                          ^
    139|       expect(res.body.status).toBe('success');
    140|       expect(res.body.data).toHaveProperty('id', createdAccountId);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[35/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > GET /bank-accounts/:id > should return 404 for a non-existent bank account ID
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:151:26
    149|         .get('/api/v1/bank-accounts/99999')
    150|         .set('Authorization', `Bearer ${adminToken}`);
    151|       expect(res.status).toBe(404);
       |                          ^
    152|       expect(res.body.status).toBe('fail');
    153|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[36/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > GET /bank-accounts/:id > should return 400 for an invalid bank account ID format
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:159:26
    157|         .get('/api/v1/bank-accounts/abc')
    158|         .set('Authorization', `Bearer ${adminToken}`);
    159|       expect(res.status).toBe(400);
       |                          ^
    160|       expect(res.body.status).toBe('fail');
    161|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[37/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > GET /bank-accounts/:id > should fail to get a bank account without authentication
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:165:26
    163|     it('should fail to get a bank account without authentication', async () => {
    164|       const res = await request(app).get(`/api/v1/bank-accounts/${createdAccountId}`);
    165|       expect(res.status).toBe(401);
       |                          ^
    166|       expect(res.body.status).toBe('fail');
    167|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[38/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > PUT /bank-accounts/:id > should update a bank account by ID (as admin)
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:185:26
    183|         .set('Authorization', `Bearer ${adminToken}`)
    184|         .send(updatedAccount);
    185|       expect(res.status).toBe(200);
       |                          ^
    186|       expect(res.body.status).toBe('success');
    187|       expect(res.body.data).toHaveProperty('id', createdAccountId);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[39/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > PUT /bank-accounts/:id > should return 404 for updating a non-existent bank account ID
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:199:26
    197|         .set('Authorization', `Bearer ${adminToken}`)
    198|         .send(updatedAccount);
    199|       expect(res.status).toBe(404);
       |                          ^
    200|       expect(res.body.status).toBe('fail');
    201|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[40/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > PUT /bank-accounts/:id > should return 400 for an invalid bank account ID format
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:208:26
    206|         .set('Authorization', `Bearer ${adminToken}`)
    207|         .send(updatedAccount);
    208|       expect(res.status).toBe(400);
       |                          ^
    209|       expect(res.body.status).toBe('fail');
    210|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[41/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > PUT /bank-accounts/:id > should return 400 for invalid update data   
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:217:26
    215|         .set('Authorization', `Bearer ${adminToken}`)
    216|         .send({ ...updatedAccount, accountName: '' });
    217|       expect(res.status).toBe(400);
       |                          ^
    218|       expect(res.body.status).toBe('fail');
    219|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[42/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > PUT /bank-accounts/:id > should fail to update a bank account without authentication
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:225:26
    223|         .put(`/api/v1/bank-accounts/${createdAccountId}`)
    224|         .send(updatedAccount);
    225|       expect(res.status).toBe(401);
       |                          ^
    226|       expect(res.body.status).toBe('fail');
    227|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[43/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > DELETE /bank-accounts/:id > should soft delete a bank account by ID (as admin)
AssertionError: expected 403 to be 204 // Object.is equality

- Expected
+ Received

- 204
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:249:26
    247|         .delete(`/api/v1/bank-accounts/${accountToDeleteId}`)
    248|         .set('Authorization', `Bearer ${adminToken}`);
    249|       expect(res.status).toBe(204);
       |                          ^
    250|     });
    251|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[44/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > DELETE /bank-accounts/:id > should return 404 for deleting a non-existent bank account ID
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:256:26
    254|         .delete('/api/v1/bank-accounts/99999')
    255|         .set('Authorization', `Bearer ${adminToken}`);
    256|       expect(res.status).toBe(404);
       |                          ^
    257|       expect(res.body.status).toBe('fail');
    258|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[45/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > DELETE /bank-accounts/:id > should return 400 for an invalid bank account ID format
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:264:26
    262|         .delete('/api/v1/bank-accounts/abc')
    263|         .set('Authorization', `Bearer ${adminToken}`);
    264|       expect(res.status).toBe(400);
       |                          ^
    265|       expect(res.body.status).toBe('fail');
    266|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[46/294]⎯

 FAIL  src/modules/bank-accounts/__tests__/bank-account.spec.ts > BankAccount API > DELETE /bank-accounts/:id > should fail to delete a bank account without authentication
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/bank-accounts/__tests__/bank-account.spec.ts:270:26
    268|     it('should fail to delete a bank account without authentication', async () => {
    269|       const res = await request(app).delete(`/api/v1/bank-accounts/${accountToDeleteId}`);
    270|       expect(res.status).toBe(401);
       |                          ^
    271|       expect(res.body.status).toBe('fail');
    272|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[47/294]⎯

 FAIL  src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts > CashRegisterSession API > Sequential Tests > GET /cash-register-sessions/:id > should fail to get a session without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts:88:28
     86|       it('should fail to get a session without authentication', async () => {
     87|         const res = await request(app).get(`/api/v1/cash-register-sessions/${createdSessionId}`);
     88|         expect(res.status).toBe(401);
       |                            ^
     89|         expect(res.body.status).toBe('fail');
     90|       });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[48/294]⎯

 FAIL  src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts > CashRegisterSession API > Sequential Tests > PATCH /cash-register-sessions/:id/close > should fail to close a session without authentication
AssertionError: expected 400 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 400

 ❯ src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts:160:28
    158|           .patch(`/api/v1/cash-register-sessions/${createdSessionId}/close`)
    159|           .send(closeInput);
    160|         expect(res.status).toBe(401);
       |                            ^
    161|         expect(res.body.status).toBe('fail');
    162|       });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[49/294]⎯

 FAIL  src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts > CashRegisterSession API > POST /cash-register-sessions/open > should fail to open a session without authentication
AssertionError: expected 400 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 400

 ❯ src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts:170:26
    168|     it('should fail to open a session without authentication', async () => {
    169|       const res = await request(app).post('/api/v1/cash-register-sessions/open').send(testSession);
    170|       expect(res.status).toBe(401);
       |                          ^
    171|       expect(res.body.status).toBe('fail');
    172|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[50/294]⎯

 FAIL  src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts > CashRegisterSession API > GET /cash-register-sessions > should return a list of cash register sessions (as admin)
AssertionError: expected 400 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 400

 ❯ src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts:209:26
    207|         .get('/api/v1/cash-register-sessions')
    208|         .set('Authorization', `Bearer ${adminToken}`);
    209|       expect(res.status).toBe(200);
       |                          ^
    210|       expect(res.body.status).toBe('success');
    211|       expect(Array.isArray(res.body.data.sessions)).toBe(true);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[51/294]⎯

 FAIL  src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts > CashRegisterSession API > GET /cash-register-sessions > should fail to return sessions without authentication
AssertionError: expected 400 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 400

 ❯ src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts:216:26
    214|     it('should fail to return sessions without authentication', async () => {
    215|       const res = await request(app).get('/api/v1/cash-register-sessions');
    216|       expect(res.status).toBe(401);
       |                          ^
    217|       expect(res.body.status).toBe('fail');
    218|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[52/294]⎯

 FAIL  src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts > CashRegisterSession API > GET /cash-register-sessions > should support pagination, sorting, and filtering
AssertionError: expected 400 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 400

 ❯ src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts:226:26
    224|         )
    225|         .set('Authorization', `Bearer ${adminToken}`);
    226|       expect(res.status).toBe(200);
       |                          ^
    227|       expect(res.body.status).toBe('success');
    228|       expect(Array.isArray(res.body.data.sessions)).toBe(true);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[53/294]⎯

 FAIL  src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts > CashRegisterSession API > GET /cash-registers/:cashRegisterId/sessions/active > should fail to get active session without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/cash-register-sessions/__tests__/cash-register-session.spec.ts:283:26
    281|         `/api/v1/cash-registers/${testSession.cashRegisterId}/sessions/active`,
    282|       );
    283|       expect(res.status).toBe(401);
       |                          ^
    284|       expect(res.body.status).toBe('fail');
    285|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[54/294]⎯

 FAIL  src/modules/cash-registers/__tests__/cash-register.spec.ts > CashRegister API > POST /cash-registers > should fail to create a cash register without authentication
AssertionError: expected 400 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 400

 ❯ src/modules/cash-registers/__tests__/cash-register.spec.ts:38:26
     36|     it('should fail to create a cash register without authentication', async () => {
     37|       const res = await request(app).post('/api/v1/cash-registers').send(testRegister);
     38|       expect(res.status).toBe(401);
       |                          ^
     39|       expect(res.body.status).toBe('fail');
     40|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[55/294]⎯

 FAIL  src/modules/cash-registers/__tests__/cash-register.spec.ts > CashRegister API > GET /cash-registers > should fail to return cash registers without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/cash-registers/__tests__/cash-register.spec.ts:83:26
     81|     it('should fail to return cash registers without authentication', async () => {
     82|       const res = await request(app).get('/api/v1/cash-registers');
     83|       expect(res.status).toBe(401);
       |                          ^
     84|       expect(res.body.status).toBe('fail');
     85|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[56/294]⎯

 FAIL  src/modules/cash-registers/__tests__/cash-register.spec.ts > CashRegister API > GET /cash-registers/:id > should fail to get a cash register without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/cash-registers/__tests__/cash-register.spec.ts:141:26
    139|     it('should fail to get a cash register without authentication', async () => {
    140|       const res = await request(app).get(`/api/v1/cash-registers/${createdRegisterId}`);
    141|       expect(res.status).toBe(401);
       |                          ^
    142|       expect(res.body.status).toBe('fail');
    143|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[57/294]⎯

 FAIL  src/modules/cash-registers/__tests__/cash-register.spec.ts > CashRegister API > PUT /cash-registers/:id > should fail to update a cash register without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/cash-registers/__tests__/cash-register.spec.ts:199:26
    197|         .put(`/api/v1/cash-registers/${createdRegisterId}`)
    198|         .send(updatedRegister);
    199|       expect(res.status).toBe(401);
       |                          ^
    200|       expect(res.body.status).toBe('fail');
    201|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[58/294]⎯

 FAIL  src/modules/cash-registers/__tests__/cash-register.spec.ts > CashRegister API > DELETE /cash-registers/:id > should fail to delete a cash register without authentication
AssertionError: expected 404 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 404

 ❯ src/modules/cash-registers/__tests__/cash-register.spec.ts:244:26
    242|     it('should fail to delete a cash register without authentication', async () => {
    243|       const res = await request(app).delete(`/api/v1/cash-registers/${registerToDeleteId}`);
    244|       expect(res.status).toBe(401);
       |                          ^
    245|       expect(res.body.status).toBe('fail');
    246|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[59/294]⎯

 FAIL  src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts > Cash Register Transaction API > POST /cash-register-transactions > should fail to record a transaction without authentication
AssertionError: expected 201 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 201

 ❯ src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts:70:26
     68|         .post('/api/v1/cash-register-transactions')
     69|         .send(newTransactionInput);
     70|       expect(res.status).toBe(401);
       |                          ^
     71|       expect(res.body.status).toBe('fail');
     72|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[60/294]⎯

 FAIL  src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts > Cash Register Transaction API > GET /cash-register-transactions > should return a list of cash register transactions
AssertionError: expected 400 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 400

 ❯ src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts:171:26
    169|         .get('/api/v1/cash-register-transactions')
    170|         .set('Authorization', `Bearer ${adminToken}`);
    171|       expect(res.status).toBe(200);
       |                          ^
    172|       expect(res.body.status).toBe('success');
    173|       expect(Array.isArray(res.body.data.transactions)).toBe(true);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[61/294]⎯

 FAIL  src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts > Cash Register Transaction API > GET /cash-register-transactions > should fail to return transactions without authentication
AssertionError: expected 400 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 400

 ❯ src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts:179:26
    177|     it('should fail to return transactions without authentication', async () => {
    178|       const res = await request(app).get('/api/v1/cash-register-transactions');
    179|       expect(res.status).toBe(401);
       |                          ^
    180|       expect(res.body.status).toBe('fail');
    181|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[62/294]⎯

 FAIL  src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts > Cash Register Transaction API > GET /cash-register-transactions > should filter transactions by cashRegisterSessionId
AssertionError: expected 400 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 400

 ❯ src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts:187:26
    185|         .get(`/api/v1/cash-register-transactions?cashRegisterSessionId=${testSessionId}`)
    186|         .set('Authorization', `Bearer ${adminToken}`);
    187|       expect(res.status).toBe(200);
       |                          ^
    188|       expect(res.body.status).toBe('success');
    189|       expect(

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[63/294]⎯

 FAIL  src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts > Cash Register Transaction API > GET /cash-register-transactions > should filter transactions by type
AssertionError: expected 400 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 400

 ❯ src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts:198:26
    196|         .get(`/api/v1/cash-register-transactions?type=${CashRegisterTransactionType.CASH_IN_OTHER}`)
    197|         .set('Authorization', `Bearer ${adminToken}`);
    198|       expect(res.status).toBe(200);
       |                          ^
    199|       expect(res.body.status).toBe('success');
    200|       expect(

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[64/294]⎯

 FAIL  src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts > Cash Register Transaction API > GET /cash-register-transactions > should filter transactions by userId
AssertionError: expected 400 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 400

 ❯ src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts:211:26
    209|         .get(`/api/v1/cash-register-transactions?userId=${testUserId}`)
    210|         .set('Authorization', `Bearer ${adminToken}`);
    211|       expect(res.status).toBe(200);
       |                          ^
    212|       expect(res.body.status).toBe('success');
    213|       expect(res.body.data.transactions.every((t: any) => t.userId === testUserId)).toBe(true);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[65/294]⎯

 FAIL  src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts > Cash Register Transaction API > GET /cash-register-transactions/:id > should fail to get a transaction without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/cash-register-transactions/__tests__/cash-register-transaction.spec.ts:248:26
    246|         `/api/v1/cash-register-transactions/${createdTransactionId}`,
    247|       );
    248|       expect(res.status).toBe(401);
       |                          ^
    249|       expect(res.body.status).toBe('fail');
    250|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[66/294]⎯

 FAIL  src/modules/compagnies/__tests__/company.spec.ts > Company API > GET /companies > should return a list of companies (as admin)
AssertionError: expected 400 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 400

 ❯ src/modules/compagnies/__tests__/company.spec.ts:16:26
     14|         .set('Authorization', `Bearer ${adminToken}`);
     15|
     16|       expect(res.status).toBe(200);
       |                          ^
     17|       expect(res.body.status).toBe('success');
     18|       expect(res.body).toHaveProperty('data');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[67/294]⎯

 FAIL  src/modules/compagnies/__tests__/company.spec.ts > Company API > GET /companies > should fail to return a list of companies without authentication
AssertionError: expected 400 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 400

 ❯ src/modules/compagnies/__tests__/company.spec.ts:34:26
     32|       const res = await request(app).get('/api/v1/companies');
     33|
     34|       expect(res.status).toBe(401);
       |                          ^
     35|       expect(res.body.status).toBe('fail');
     36|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[68/294]⎯

 FAIL  src/modules/compagnies/__tests__/company.spec.ts > Company API > GET /company/:id > should return a specific company by ID (as admin)
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/compagnies/__tests__/company.spec.ts:45:26
     43|         .set('Authorization', `Bearer ${adminToken}`);
     44|
     45|       expect(res.status).toBe(200);
       |                          ^
     46|       expect(res.body.status).toBe('success');
     47|       expect(res.body).toHaveProperty('data');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[69/294]⎯

 FAIL  src/modules/compagnies/__tests__/company.spec.ts > Company API > GET /company/:id > should return 404 for a non-existent company ID (as admin)    
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/compagnies/__tests__/company.spec.ts:66:26
     64|         .set('Authorization', `Bearer ${adminToken}`);
     65|
     66|       expect(res.status).toBe(404);
       |                          ^
     67|       expect(res.body.status).toBe('fail');
     68|       expect(res.body.message).toBe('Not found');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[70/294]⎯

 FAIL  src/modules/compagnies/__tests__/company.spec.ts > Company API > GET /company/:id > should fail to get a specific company without authentication  
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/compagnies/__tests__/company.spec.ts:74:26
     72|       const res = await request(app).get(`/api/v1/company/${existingCompanyId}`);
     73|
     74|       expect(res.status).toBe(401);
       |                          ^
     75|       expect(res.body.status).toBe('fail');
     76|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[71/294]⎯

 FAIL  src/modules/compagnies/__tests__/company.spec.ts > Company API > PUT /company/:id > should update a company by ID (as admin)
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/compagnies/__tests__/company.spec.ts:116:26
    114|         });
    115|
    116|       expect(res.status).toBe(200);
       |                          ^
    117|       expect(res.body.status).toBe('success');
    118|       expect(res.body).toHaveProperty('data');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[72/294]⎯

 FAIL  src/modules/compagnies/__tests__/company.spec.ts > Company API > PUT /company/:id > should return 404 for updating a non-existent company ID (as admin)
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/compagnies/__tests__/company.spec.ts:139:26
    137|         });
    138|
    139|       expect(res.status).toBe(404);
       |                          ^
    140|       expect(res.body.status).toBe('fail');
    141|       expect(res.body.message).toBe('Not found');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[73/294]⎯

 FAIL  src/modules/compagnies/__tests__/company.spec.ts > Company API > PUT /company/:id > should return 400 for invalid update data (as admin)
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/compagnies/__tests__/company.spec.ts:156:26
    154|         });
    155|
    156|       expect(res.status).toBe(400);
       |                          ^
    157|       expect(res.body.status).toBe('fail');
    158|       expect(res.body.message).toBe('Bad request');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[74/294]⎯

 FAIL  src/modules/compagnies/__tests__/company.spec.ts > Company API > PUT /company/:id > should fail to update a company without authentication        
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/compagnies/__tests__/company.spec.ts:170:26
    168|       });
    169|
    170|       expect(res.status).toBe(401);
       |                          ^
    171|       expect(res.body.status).toBe('fail');
    172|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[75/294]⎯

 FAIL  src/modules/customer-groups/__tests__/customer-group.spec.ts > CustomerGroup API > POST /customer-groups > should fail to create a group without authentication
AssertionError: expected 400 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 400

 ❯ src/modules/customer-groups/__tests__/customer-group.spec.ts:32:26
     30|     it('should fail to create a group without authentication', async () => {
     31|       const res = await request(app).post('/api/v1/customer-groups').send(testGroup);
     32|       expect(res.status).toBe(401);
       |                          ^
     33|       expect(res.body.status).toBe('fail');
     34|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[76/294]⎯

 FAIL  src/modules/customer-groups/__tests__/customer-group.spec.ts > CustomerGroup API > GET /customer-groups > should return a list of customer groups (as user)
AssertionError: expected 400 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 400

 ❯ src/modules/customer-groups/__tests__/customer-group.spec.ts:51:26
     49|         .get('/api/v1/customer-groups')
     50|         .set('Authorization', `Bearer ${adminToken}`);
     51|       expect(res.status).toBe(200);
       |                          ^
     52|       expect(res.body.status).toBe('success');
     53|       expect(Array.isArray(res.body.data.groups)).toBe(true);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[77/294]⎯

 FAIL  src/modules/customer-groups/__tests__/customer-group.spec.ts > CustomerGroup API > GET /customer-groups > should fail to return groups without authentication
AssertionError: expected 400 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 400

 ❯ src/modules/customer-groups/__tests__/customer-group.spec.ts:58:26
     56|     it('should fail to return groups without authentication', async () => {
     57|       const res = await request(app).get('/api/v1/customer-groups');
     58|       expect(res.status).toBe(401);
       |                          ^
     59|       expect(res.body.status).toBe('fail');
     60|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[78/294]⎯

 FAIL  src/modules/customer-groups/__tests__/customer-group.spec.ts > CustomerGroup API > GET /customer-groups > should support pagination, sorting, and filtering
AssertionError: expected 400 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 400

 ❯ src/modules/customer-groups/__tests__/customer-group.spec.ts:66:26
     64|         .get('/api/v1/customer-groups?page=1&limit=5&sortBy=name&order=asc&filter[name]=VIP')
     65|         .set('Authorization', `Bearer ${adminToken}`);
     66|       expect(res.status).toBe(200);
       |                          ^
     67|       expect(res.body.status).toBe('success');
     68|       expect(Array.isArray(res.body.data.groups)).toBe(true);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[79/294]⎯

 FAIL  src/modules/customer-groups/__tests__/customer-group.spec.ts > CustomerGroup API > GET /customer-groups/:id > should fail to get a group without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/customer-groups/__tests__/customer-group.spec.ts:113:26
    111|     it('should fail to get a group without authentication', async () => {
    112|       const res = await request(app).get(`/api/v1/customer-groups/${createdGroupId}`);
    113|       expect(res.status).toBe(401);
       |                          ^
    114|       expect(res.body.status).toBe('fail');
    115|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[80/294]⎯

 FAIL  src/modules/customer-groups/__tests__/customer-group.spec.ts > CustomerGroup API > PUT /customer-groups/:id > should fail to update a group without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/customer-groups/__tests__/customer-group.spec.ts:167:26
    165|         .put(`/api/v1/customer-groups/${createdGroupId}`)
    166|         .send(updatedGroup);
    167|       expect(res.status).toBe(401);
       |                          ^
    168|       expect(res.body.status).toBe('fail');
    169|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[81/294]⎯

 FAIL  src/modules/customer-groups/__tests__/customer-group.spec.ts > CustomerGroup API > DELETE /customer-groups/:id > should fail to delete a group without authentication
AssertionError: expected 404 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 404

 ❯ src/modules/customer-groups/__tests__/customer-group.spec.ts:211:26
    209|     it('should fail to delete a group without authentication', async () => {
    210|       const res = await request(app).delete(`/api/v1/customer-groups/${groupToDeleteId}`);
    211|       expect(res.status).toBe(401);
       |                          ^
    212|       expect(res.body.status).toBe('fail');
    213|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[82/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > POST /currencies > should create a new currency (as admin)
AssertionError: expected 403 to be 201 // Object.is equality

- Expected
+ Received

- 201
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:26:26
     24|         .send(testCurrency);
     25|
     26|       expect(res.status).toBe(201);
       |                          ^
     27|       expect(res.body.status).toBe('success');
     28|       expect(res.body).toHaveProperty('data');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[83/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > POST /currencies > should fail to create a new currency without authentication 
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:48:26
     46|       const res = await request(app).post('/api/v1/currencies').send(testCurrency);
     47|
     48|       expect(res.status).toBe(401);
       |                          ^
     49|       expect(res.body.status).toBe('fail');
     50|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[84/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > POST /currencies > should return 400 for invalid currency data (as admin)      
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:59:26
     57|         .send(invalidCurrency);
     58|
     59|       expect(res.status).toBe(400);
       |                          ^
     60|       expect(res.body.status).toBe('fail');
     61|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[85/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > GET /currencies > should return a list of currencies (as admin)
AssertionError: expected 400 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 400

 ❯ src/modules/currencies/__tests__/currency.spec.ts:71:26
     69|         .set('Authorization', `Bearer ${adminToken}`);
     70|
     71|       expect(res.status).toBe(200);
       |                          ^
     72|       expect(res.body.status).toBe('success');
     73|       expect(res.body).toHaveProperty('data');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[86/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > GET /currencies > should fail to return a list of currencies without authentication
AssertionError: expected 400 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 400

 ❯ src/modules/currencies/__tests__/currency.spec.ts:80:26
     78|       const res = await request(app).get('/api/v1/currencies');
     79|
     80|       expect(res.status).toBe(401);
       |                          ^
     81|       expect(res.body.status).toBe('fail');
     82|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[87/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > GET /currencies > should support pagination, sorting, and filtering (as admin) 
AssertionError: expected 400 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 400

 ❯ src/modules/currencies/__tests__/currency.spec.ts:90:26
     88|         .set('Authorization', `Bearer ${adminToken}`);
     89|
     90|       expect(res.status).toBe(200);
       |                          ^
     91|       expect(res.body.status).toBe('success');
     92|       expect(res.body).toHaveProperty('data');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[88/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > GET /currencies/:id > should return a specific currency by ID (as admin)       
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:116:26
    114|         .set('Authorization', `Bearer ${adminToken}`);
    115|
    116|       expect(res.status).toBe(200);
       |                          ^
    117|       expect(res.body.status).toBe('success');
    118|       expect(res.body).toHaveProperty('data');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[89/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > GET /currencies/:id > should return 404 for a non-existent currency ID (as admin)
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:129:26
    127|         .set('Authorization', `Bearer ${adminToken}`);
    128|
    129|       expect(res.status).toBe(404);
       |                          ^
    130|       expect(res.body.status).toBe('fail');
    131|       expect(res.body.message).toBe('Not found');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[90/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > GET /currencies/:id > should return 400 for an invalid currency ID format (as admin)
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:140:26
    138|         .set('Authorization', `Bearer ${adminToken}`);
    139|
    140|       expect(res.status).toBe(400);
       |                          ^
    141|       expect(res.body.status).toBe('fail');
    142|       expect(res.body.message).toBe('Bad request');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[91/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > GET /currencies/:id > should fail to get a specific currency without authentication
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:148:26
    146|       const res = await request(app).get(`/api/v1/currencies/${createdCurrencyId}`);
    147|
    148|       expect(res.status).toBe(401);
       |                          ^
    149|       expect(res.body.status).toBe('fail');
    150|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[92/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > PUT /currencies/:id > should update a currency by ID (as admin)
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:168:26
    166|         .send(updatedCurrency);
    167|
    168|       expect(res.status).toBe(200);
       |                          ^
    169|       expect(res.body.status).toBe('success');
    170|       expect(res.body).toHaveProperty('data');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[93/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > PUT /currencies/:id > should return 404 for updating a non-existent currency ID (as admin)
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:182:26
    180|         .send(updatedCurrency);
    181|
    182|       expect(res.status).toBe(404);
       |                          ^
    183|       expect(res.body.status).toBe('fail');
    184|       expect(res.body.message).toBe('Not found');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[94/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > PUT /currencies/:id > should return 400 for an invalid currency ID format (as admin)
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:194:26
    192|         .send(updatedCurrency);
    193|
    194|       expect(res.status).toBe(400);
       |                          ^
    195|       expect(res.body.status).toBe('fail');
    196|       expect(res.body.message).toBe('Bad request');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[95/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > PUT /currencies/:id > should return 400 for invalid update data (as admin)     
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:206:26
    204|         .send(invalidUpdate);
    205|
    206|       expect(res.status).toBe(400);
       |                          ^
    207|       expect(res.body.status).toBe('fail');
    208|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[96/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > PUT /currencies/:id > should fail to update a currency without authentication  
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:215:26
    213|         .send(updatedCurrency);
    214|
    215|       expect(res.status).toBe(401);
       |                          ^
    216|       expect(res.body.status).toBe('fail');
    217|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[97/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > DELETE /currencies/:id > should soft delete a currency by ID (as admin)        
AssertionError: expected 403 to be 204 // Object.is equality

- Expected
+ Received

- 204
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:241:26
    239|         .set('Authorization', `Bearer ${adminToken}`);
    240|
    241|       expect(res.status).toBe(204);
       |                          ^
    242|     });
    243|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[98/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > DELETE /currencies/:id > should return 400 if trying to delete a currency used by a company
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:251:26
    249|         .set('Authorization', `Bearer ${adminToken}`);
    250|
    251|       expect(res.status).toBe(400);
       |                          ^
    252|       expect(res.body.status).toBe('fail');
    253|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[99/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > DELETE /currencies/:id > should return 404 for deleting a non-existent currency ID (as admin)
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:261:26
    259|         .set('Authorization', `Bearer ${adminToken}`);
    260|
    261|       expect(res.status).toBe(404);
       |                          ^
    262|       expect(res.body.status).toBe('fail');
    263|       expect(res.body.message).toBe('Not found');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[100/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > DELETE /currencies/:id > should return 400 for an invalid currency ID format (as admin)
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:272:26
    270|         .set('Authorization', `Bearer ${adminToken}`);
    271|
    272|       expect(res.status).toBe(400);
       |                          ^
    273|       expect(res.body.status).toBe('fail');
    274|       expect(res.body.message).toBe('Bad request');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[101/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > DELETE /currencies/:id > should fail to delete a currency without authentication
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:280:26
    278|       const res = await request(app).delete(`/api/v1/currencies/${currencyToDeleteId}`);
    279|
    280|       expect(res.status).toBe(401);
       |                          ^
    281|       expect(res.body.status).toBe('fail');
    282|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[102/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > PATCH /currencies/:id/set-default > should set a currency as the default company currency (as admin)
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:306:26
    304|         .set('Authorization', `Bearer ${adminToken}`);
    305|
    306|       expect(res.status).toBe(200);
       |                          ^
    307|       expect(res.body.status).toBe('success');
    308|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[103/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > PATCH /currencies/:id/set-default > should return 404 for setting a non-existent currency as default (as admin)
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:316:26
    314|         .set('Authorization', `Bearer ${adminToken}`);
    315|
    316|       expect(res.status).toBe(404);
       |                          ^
    317|       expect(res.body.status).toBe('fail');
    318|       expect(res.body.message).toBe('Not found');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[104/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > PATCH /currencies/:id/set-default > should return 400 for an invalid currency ID format when setting default (as admin)
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:327:26
    325|         .set('Authorization', `Bearer ${adminToken}`);
    326|
    327|       expect(res.status).toBe(400);
       |                          ^
    328|       expect(res.body.status).toBe('fail');
    329|       expect(res.body.message).toBe('Bad request');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[105/294]⎯

 FAIL  src/modules/currencies/__tests__/currency.spec.ts > Currency API > PATCH /currencies/:id/set-default > should fail to set default currency without authentication
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/currencies/__tests__/currency.spec.ts:337:26
    335|       );
    336|
    337|       expect(res.status).toBe(401);
       |                          ^
    338|       expect(res.body.status).toBe('fail');
    339|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[106/294]⎯

 FAIL  src/modules/customer-invoices/__tests__/customer-invoice.spec.ts > CustomerInvoices API > DELETE /customer-invoices/:id > should delete a customer invoice
AssertionError: expected 403 to be 204 // Object.is equality

- Expected
+ Received

- 204
+ 403

 ❯ src/modules/customer-invoices/__tests__/customer-invoice.spec.ts:240:26
    238|         .delete(`/api/v1/customer-invoices/${invoiceToDeleteId}`)
    239|         .set('Authorization', `Bearer ${adminToken}`);
    240|       expect(res.status).toBe(204);
       |                          ^
    241|     });
    242|     it('should return 404 for deleting a non-existent customer invoice', async () => {

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[107/294]⎯

 FAIL  src/modules/customer-invoices/__tests__/customer-invoice.spec.ts > CustomerInvoices API > DELETE /customer-invoices/:id > should return 404 for deleting a non-existent customer invoice
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/customer-invoices/__tests__/customer-invoice.spec.ts:246:26
    244|         .delete('/api/v1/customer-invoices/999999')
    245|         .set('Authorization', `Bearer ${adminToken}`);
    246|       expect(res.status).toBe(404);
       |                          ^
    247|     });
    248|     it('should return 400 for invalid id format', async () => {

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[108/294]⎯

 FAIL  src/modules/customer-invoices/__tests__/customer-invoice.spec.ts > CustomerInvoices API > DELETE /customer-invoices/:id > should return 400 for invalid id format
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/customer-invoices/__tests__/customer-invoice.spec.ts:252:26
    250|         .delete('/api/v1/customer-invoices/abc')
    251|         .set('Authorization', `Bearer ${adminToken}`);
    252|       expect(res.status).toBe(400);
       |                          ^
    253|     });
    254|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[109/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > POST /customer-returns > should create a new customer return with items
AssertionError: expected 403 to be 201 // Object.is equality

- Expected
+ Received

- 201
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:65:26
     63|         .send(testCustomerReturnInputWithItems);
     64|       createdReturnId = res.body.data.id;
     65|       expect(res.status).toBe(201);
       |                          ^
     66|       expect(res.body.data).toHaveProperty('id');
     67|       expect(res.body.data.customerId).toBe(testCustomerReturnInputWithItems.customerId);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[110/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > POST /customer-returns > should create a new customer return without items
AssertionError: expected 403 to be 201 // Object.is equality

- Expected
+ Received

- 201
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:78:26
     76|         .send(testCustomerReturnInputNoItems);
     77|       createdReturnIdNoItems = res.body.data.id;
     78|       expect(res.status).toBe(201);
       |                          ^
     79|       expect(res.body.data).toHaveProperty('id');
     80|       expect(res.body.data.customerId).toBe(testCustomerReturnInputNoItems.customerId);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[111/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > GET /customer-returns > should return a paginated list of customer returns
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:91:26
     89|         .get('/api/v1/customer-returns')
     90|         .set('Authorization', `Bearer ${adminToken}`);
     91|       expect(res.status).toBe(200);
       |                          ^
     92|       expect(res.body.data).toHaveProperty('returns');
     93|       expect(Array.isArray(res.body.data.returns)).toBe(true);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[112/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > GET /customer-returns > should filter customer returns by customerId
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:102:26
    100|         .get(`/api/v1/customer-returns?customerId=${testCustomerReturnInputWithItems.customerId}`)
    101|         .set('Authorization', `Bearer ${adminToken}`);
    102|       expect(res.status).toBe(200);
       |                          ^
    103|       expect(
    104|         res.body.data.returns.every(

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[113/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > GET /customer-returns > should filter customer returns by status
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:114:26
    112|         .get(`/api/v1/customer-returns?status=${CustomerReturnStatus.REQUESTED}`)
    113|         .set('Authorization', `Bearer ${adminToken}`);
    114|       expect(res.status).toBe(200);
       |                          ^
    115|       expect(
    116|         res.body.data.returns.every((r: any) => r.status === CustomerReturnStatus.REQUESTED),

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[114/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > GET /customer-returns/:id > should return a customer return by id
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:126:26
    124|         .get(`/api/v1/customer-returns/${createdReturnId}`)
    125|         .set('Authorization', `Bearer ${adminToken}`);
    126|       expect(res.status).toBe(200);
       |                          ^
    127|       expect(res.body.data).toHaveProperty('id', createdReturnId);
    128|       expect(res.body.data.items).toHaveLength(2);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[115/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > GET /customer-returns/:id > should return 404 for non-existent customer return
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:135:26
    133|         .get('/api/v1/customer-returns/999999')
    134|         .set('Authorization', `Bearer ${adminToken}`);
    135|       expect(res.status).toBe(404);
       |                          ^
    136|     });
    137|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[116/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > GET /customer-returns/:id > should return 400 for invalid id format
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:142:26
    140|         .get('/api/v1/customer-returns/abc')
    141|         .set('Authorization', `Bearer ${adminToken}`);
    142|       expect(res.status).toBe(400);
       |                          ^
    143|     });
    144|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[117/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > PUT /customer-returns/:id > should update a customer return
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:157:26
    155|         .set('Authorization', `Bearer ${adminToken}`)
    156|         .send(updateData);
    157|       expect(res.status).toBe(200);
       |                          ^
    158|       expect(res.body.data.reason).toBe(updateData.reason);
    159|       expect(res.body.data.notes).toBe(updateData.notes);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[118/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > PUT /customer-returns/:id > should return 404 for updating a non-existent customer return
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:167:26
    165|         .set('Authorization', `Bearer ${adminToken}`)
    166|         .send(updateData);
    167|       expect(res.status).toBe(404);
       |                          ^
    168|     });
    169|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[119/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > PUT /customer-returns/:id > should return 400 for invalid id format
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:175:26
    173|         .set('Authorization', `Bearer ${adminToken}`)
    174|         .send(updateData);
    175|       expect(res.status).toBe(400);
       |                          ^
    176|     });
    177|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[120/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > PATCH /customer-returns/:id/approve > should approve a customer return request
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:199:26
    197|         .set('Authorization', `Bearer ${adminToken}`)
    198|         .send({ notes: 'Approved by test' });
    199|       expect(res.status).toBe(200);
       |                          ^
    200|       expect(res.body.data.status).toBe(CustomerReturnStatus.APPROVED);
    201|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[121/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > PATCH /customer-returns/:id/approve > should return 404 for non-existent customer return
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:208:26
    206|         .set('Authorization', `Bearer ${adminToken}`)
    207|         .send({});
    208|       expect(res.status).toBe(404);
       |                          ^
    209|     });
    210|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[122/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > PATCH /customer-returns/:id/approve > should return 400 for invalid id format
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:216:26
    214|         .set('Authorization', `Bearer ${adminToken}`)
    215|         .send({});
    216|       expect(res.status).toBe(400);
       |                          ^
    217|     });
    218|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[123/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > PATCH /customer-returns/:id/receive > should record reception of returned items
 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > PATCH /customer-returns/:id/receive > should return 404 for non-existent customer return
 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > PATCH /customer-returns/:id/receive > should return 400 for invalid id format
 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > PATCH /customer-returns/:id/receive > should return 400 if quantityReceived exceeds quantity to return
TypeError: Cannot read properties of undefined (reading '0')
 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:234:51
    232|         });
    233|       returnToReceiveId = createRes.body.data.id;
    234|       returnItemToReceiveId = createRes.body.data.items[0].id; // Get ID of the first item
       |                                                   ^
    235|
    236|       // Approve the return before attempting to receive items

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[124/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > POST /customer-returns/:id/complete > should complete the customer return process
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:322:26
    320|           resolutionNotes: 'Refund processed',
    321|         });
    322|       expect(res.status).toBe(200);
       |                          ^
    323|       expect(res.body.data.status).toBe(CustomerReturnStatus.COMPLETED);
    324|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[125/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > POST /customer-returns/:id/complete > should return 404 for non-existent customer return
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:331:26
    329|         .set('Authorization', `Bearer ${adminToken}`)
    330|         .send({});
    331|       expect(res.status).toBe(404);
       |                          ^
    332|     });
    333|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[126/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > POST /customer-returns/:id/complete > should return 400 for invalid id format
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:339:26
    337|         .set('Authorization', `Bearer ${adminToken}`)
    338|         .send({});
    339|       expect(res.status).toBe(400);
       |                          ^
    340|     });
    341|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[127/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > PATCH /customer-returns/:id/cancel > should cancel a customer return request
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:362:26
    360|         .patch(`/api/v1/customer-returns/${returnToCancelId}/cancel`)
    361|         .set('Authorization', `Bearer ${adminToken}`);
    362|       expect(res.status).toBe(200);
       |                          ^
    363|       expect(res.body.data.status).toBe(CustomerReturnStatus.CANCELLED);
    364|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[128/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > PATCH /customer-returns/:id/cancel > should return 404 for non-existent customer return
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:370:26
    368|         .patch('/api/v1/customer-returns/999999/cancel')
    369|         .set('Authorization', `Bearer ${adminToken}`);
    370|       expect(res.status).toBe(404);
       |                          ^
    371|     });
    372|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[129/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > PATCH /customer-returns/:id/cancel > should return 400 for invalid id format
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:377:26
    375|         .patch('/api/v1/customer-returns/abc/cancel')
    376|         .set('Authorization', `Bearer ${adminToken}`);
    377|       expect(res.status).toBe(400);
       |                          ^
    378|     });
    379|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[130/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > DELETE /customer-returns/:id > should delete a customer return
AssertionError: expected 403 to be 204 // Object.is equality

- Expected
+ Received

- 204
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:400:26
    398|         .delete(`/api/v1/customer-returns/${returnToDeleteId}`)
    399|         .set('Authorization', `Bearer ${adminToken}`);
    400|       expect(res.status).toBe(204);
       |                          ^
    401|     });
    402|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[131/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > DELETE /customer-returns/:id > should return 404 for deleting a non-existent customer return
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:407:26
    405|         .delete('/api/v1/customer-returns/999999')
    406|         .set('Authorization', `Bearer ${adminToken}`);
    407|       expect(res.status).toBe(404);
       |                          ^
    408|     });
    409|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[132/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > DELETE /customer-returns/:id > should return 400 for invalid id format
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:414:26
    412|         .delete('/api/v1/customer-returns/abc')
    413|         .set('Authorization', `Bearer ${adminToken}`);
    414|       expect(res.status).toBe(400);
       |                          ^
    415|     });
    416|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[133/294]⎯

 FAIL  src/modules/customer-returns/__tests__/customer-return.spec.ts > CustomerReturns API > DELETE /customer-returns/:id > should return 400 if the return has processed financial transactions
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/customer-returns/__tests__/customer-return.spec.ts:422:26
    420|         .delete(`/api/v1/customer-returns/${returnWithProcessedTransactionId}`)
    421|         .set('Authorization', `Bearer ${adminToken}`);
    422|       expect(res.status).toBe(400);
       |                          ^
    423|       expect(res.body.data).toContain(`Customer return in status 'refunded' cannot be deleted.`);
    424|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[134/294]⎯

 FAIL  src/modules/customers/__tests__/customer.spec.ts > Customer API > POST /customers > should fail to create a customer without authentication       
AssertionError: expected 400 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 400

 ❯ src/modules/customers/__tests__/customer.spec.ts:44:26
     42|     it('should fail to create a customer without authentication', async () => {
     43|       const res = await request(app).post('/api/v1/customers').send(testCustomer);
     44|       expect(res.status).toBe(401);
       |                          ^
     45|       expect(res.body.status).toBe('fail');
     46|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[135/294]⎯

 FAIL  src/modules/customers/__tests__/customer.spec.ts > Customer API > GET /customers > should fail to return customers without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/customers/__tests__/customer.spec.ts:70:26
     68|     it('should fail to return customers without authentication', async () => {
     69|       const res = await request(app).get('/api/v1/customers');
     70|       expect(res.status).toBe(401);
       |                          ^
     71|       expect(res.body.status).toBe('fail');
     72|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[136/294]⎯

 FAIL  src/modules/customers/__tests__/customer.spec.ts > Customer API > GET /customers/:id > should fail to get a customer without authentication       
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/customers/__tests__/customer.spec.ts:131:26
    129|     it('should fail to get a customer without authentication', async () => {
    130|       const res = await request(app).get(`/api/v1/customers/${createdCustomerId}`);
    131|       expect(res.status).toBe(401);
       |                          ^
    132|       expect(res.body.status).toBe('fail');
    133|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[137/294]⎯

 FAIL  src/modules/customers/__tests__/customer.spec.ts > Customer API > PUT /customers/:id > should fail to update a customer without authentication    
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/customers/__tests__/customer.spec.ts:194:26
    192|         .put(`/api/v1/customers/${createdCustomerId}`)
    193|         .send(updatedCustomer);
    194|       expect(res.status).toBe(401);
       |                          ^
    195|       expect(res.body.status).toBe('fail');
    196|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[138/294]⎯

 FAIL  src/modules/customers/__tests__/customer.spec.ts > Customer API > DELETE /customers/:id > should fail to delete a customer without authentication 
AssertionError: expected 404 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 404

 ❯ src/modules/customers/__tests__/customer.spec.ts:238:26
    236|     it('should fail to delete a customer without authentication', async () => {
    237|       const res = await request(app).delete(`/api/v1/customers/${customerToDeleteId}`);
    238|       expect(res.status).toBe(401);
       |                          ^
    239|       expect(res.body.status).toBe('fail');
    240|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[139/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > POST /deliveries > should create a new delivery with items
AssertionError: expected 403 to be 201 // Object.is equality

- Expected
+ Received

- 201
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:48:26
     46|         .send(createDeliveryInput);
     47|
     48|       expect(res.status).toBe(201);
       |                          ^
     49|       expect(res.body.data).toHaveProperty('id');
     50|       expect(res.body.data).toHaveProperty('deliveryNumber');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[140/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > POST /deliveries > should create a new delivery without items
AssertionError: expected 403 to be 201 // Object.is equality

- Expected
+ Received

- 201
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:63:26
     61|         .send(createDeliveryInputNoItems);
     62|
     63|       expect(res.status).toBe(201);
       |                          ^
     64|       expect(res.body.data).toHaveProperty('id');
     65|       expect(res.body.data).toHaveProperty('deliveryNumber');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[141/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > POST /deliveries > should fail to create a delivery without authentication   
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:72:26
     70|     it('should fail to create a delivery without authentication', async () => {
     71|       const res = await request(app).post('/api/v1/deliveries').send(createDeliveryInput);
     72|       expect(res.status).toBe(401);
       |                          ^
     73|     });
     74|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[142/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > POST /deliveries > should fail to create a delivery with invalid salesOrderId
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:81:26
     79|         .set('Authorization', `Bearer ${adminToken}`)
     80|         .send(invalidInput);
     81|       expect(res.status).toBe(400);
       |                          ^
     82|     });
     83|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[143/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > POST /deliveries > should fail to create a delivery with invalid salesOrderItemId
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:93:26
     91|         .set('Authorization', `Bearer ${adminToken}`)
     92|         .send(invalidInput);
     93|       expect(res.status).toBe(400);
       |                          ^
     94|     });
     95|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[144/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > POST /deliveries > should fail to create a delivery with quantityShipped exceeding available quantity
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:105:26
    103|         .set('Authorization', `Bearer ${adminToken}`)
    104|         .send(invalidInput);
    105|       expect(res.status).toBe(400);
       |                          ^
    106|     });
    107|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[145/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > GET /deliveries > should return a paginated list of deliveries
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:115:26
    113|         .set('Authorization', `Bearer ${adminToken}`);
    114|
    115|       expect(res.status).toBe(200);
       |                          ^
    116|       expect(res.body.data).toHaveProperty('deliveries');
    117|       expect(Array.isArray(res.body.data.deliveries)).toBe(true);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[146/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > GET /deliveries > should filter deliveries by salesOrderId
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:127:26
    125|         .set('Authorization', `Bearer ${adminToken}`);
    126|
    127|       expect(res.status).toBe(200);
       |                          ^
    128|       expect(
    129|         res.body.data.deliveries.every(

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[147/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > GET /deliveries > should filter deliveries by status
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:140:26
    138|         .set('Authorization', `Bearer ${adminToken}`);
    139|
    140|       expect(res.status).toBe(200);
       |                          ^
    141|       expect(res.body.data.deliveries.every((d: any) => d.status === 'pending')).toBe(true);
    142|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[148/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > GET /deliveries > should search deliveries by deliveryNumber
TypeError: Cannot read properties of undefined (reading 'substring')
 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:146:60
    144|     it('should search deliveries by deliveryNumber', async () => {
    145|       const res = await request(app)
    146|         .get(`/api/v1/deliveries?q=${createdDeliveryNumber.substring(0, 5)}`) // Search by prefix
       |                                                            ^
    147|         .set('Authorization', `Bearer ${adminToken}`);
    148|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[149/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > GET /deliveries > should fail to get deliveries without authentication       
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:157:26
    155|     it('should fail to get deliveries without authentication', async () => {
    156|       const res = await request(app).get('/api/v1/deliveries');
    157|       expect(res.status).toBe(401);
       |                          ^
    158|     });
    159|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[150/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > GET /deliveries/:id > should return a delivery by id
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:167:26
    165|         .set('Authorization', `Bearer ${adminToken}`);
    166|
    167|       expect(res.status).toBe(200);
       |                          ^
    168|       expect(res.body.data).toHaveProperty('id', createdDeliveryId);
    169|       expect(res.body.data.deliveryNumber).toBe(createdDeliveryNumber);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[151/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > GET /deliveries/:id > should return 404 for non-existent delivery
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:177:26
    175|         .set('Authorization', `Bearer ${adminToken}`);
    176|
    177|       expect(res.status).toBe(404);
       |                          ^
    178|     });
    179|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[152/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > GET /deliveries/:id > should return 400 for invalid id format
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:185:26
    183|         .set('Authorization', `Bearer ${adminToken}`);
    184|
    185|       expect(res.status).toBe(400);
       |                          ^
    186|     });
    187|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[153/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > GET /deliveries/:id > should fail to get a delivery without authentication   
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:190:26
    188|     it('should fail to get a delivery without authentication', async () => {
    189|       const res = await request(app).get(`/api/v1/deliveries/${createdDeliveryId}`);
    190|       expect(res.status).toBe(401);
       |                          ^
    191|     });
    192|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[154/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > PUT /deliveries/:id > should update a delivery header
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:207:26
    205|         .send(updateData);
    206|
    207|       expect(res.status).toBe(200);
       |                          ^
    208|       expect(res.body.data).toHaveProperty('id', createdDeliveryId);
    209|       expect(res.body.data.carrierName).toBe(updateData.carrierName);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[155/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > PUT /deliveries/:id > should return 404 for updating a non-existent delivery 
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:220:26
    218|         .send(updateData);
    219|
    220|       expect(res.status).toBe(404);
       |                          ^
    221|     });
    222|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[156/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > PUT /deliveries/:id > should return 400 for invalid id format
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:229:26
    227|         .send(updateData);
    228|
    229|       expect(res.status).toBe(400);
       |                          ^
    230|     });
    231|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[157/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > PUT /deliveries/:id > should fail to update a delivery without authentication
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:236:26
    234|         .put(`/api/v1/deliveries/${createdDeliveryId}`)
    235|         .send(updateData);
    236|       expect(res.status).toBe(401);
       |                          ^
    237|     });
    238|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[158/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > PUT /deliveries/:id > should fail to update a delivery if status is SHIPPED or DELIVERED
AssertionError: expected 403 to be 201 // Object.is equality

- Expected
+ Received

- 201
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:252:32
    250|         .set('Authorization', `Bearer ${adminToken}`)
    251|         .send(deliveryToShipInput);
    252|       expect(createRes.status).toBe(201);
       |                                ^
    253|       const idToShip = createRes.body.data.id;
    254|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[159/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > PATCH /deliveries/:id/ship > should create a delivery to be shipped
AssertionError: expected 403 to be 201 // Object.is equality

- Expected
+ Received

- 201
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:286:32
    284|         .set('Authorization', `Bearer ${adminToken}`)
    285|         .send(deliveryToShipInput);
    286|       expect(createRes.status).toBe(201);
       |                                ^
    287|       deliveryToShipId = createRes.body.data.id;
    288|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[160/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > PATCH /deliveries/:id/ship > should mark a delivery as shipped
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:296:26
    294|         .send({ actualShipDate: dayjs().format('YYYY-MM-DD') });
    295|
    296|       expect(res.status).toBe(200);
       |                          ^
    297|       expect(res.body.data).toHaveProperty('id', deliveryToShipId);
    298|       expect(res.body.data.status).toBe('shipped');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[161/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > PATCH /deliveries/:id/ship > should fail to ship a non-existent delivery     
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:306:26
    304|         .set('Authorization', `Bearer ${adminToken}`)
    305|         .send({ actualShipDate: dayjs().format('YYYY-MM-DD') }); // Add actualShipDate
    306|       expect(res.status).toBe(404);
       |                          ^
    307|     });
    308|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[162/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > PATCH /deliveries/:id/ship > should fail to ship a delivery already shipped or delivered
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:314:26
    312|         .set('Authorization', `Bearer ${adminToken}`)
    313|         .send({ actualShipDate: dayjs().format('YYYY-MM-DD') }); // Add actualShipDate
    314|       expect(res.status).toBe(400);
       |                          ^
    315|     });
    316|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[163/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > PATCH /deliveries/:id/deliver > should create and ship a delivery to be delivered
AssertionError: expected 403 to be 201 // Object.is equality

- Expected
+ Received

- 201
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:332:32
    330|         .set('Authorization', `Bearer ${adminToken}`)
    331|         .send(deliveryToDeliverInput);
    332|       expect(createRes.status).toBe(201);
       |                                ^
    333|       deliveryToDeliverId = createRes.body.data.id;
    334|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[164/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > PATCH /deliveries/:id/deliver > should mark a delivery as delivered
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:348:26
    346|         .set('Authorization', `Bearer ${adminToken}`);
    347|
    348|       expect(res.status).toBe(200);
       |                          ^
    349|       expect(res.body.data).toHaveProperty('id', deliveryToDeliverId);
    350|       expect(res.body.data.status).toBe('delivered');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[165/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > PATCH /deliveries/:id/deliver > should fail to deliver a non-existent delivery
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:357:26
    355|         .patch('/api/v1/deliveries/999999/deliver')
    356|         .set('Authorization', `Bearer ${adminToken}`);
    357|       expect(res.status).toBe(404);
       |                          ^
    358|     });
    359|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[166/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > PATCH /deliveries/:id/deliver > should fail to deliver a delivery not in SHIPPED status
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:365:26
    363|         .patch(`/api/v1/deliveries/${createdDeliveryId}/deliver`)
    364|         .set('Authorization', `Bearer ${adminToken}`);
    365|       expect(res.status).toBe(400);
       |                          ^
    366|     });
    367|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[167/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > DELETE /deliveries/:id > should create a delivery to be deleted
AssertionError: expected 403 to be 201 // Object.is equality

- Expected
+ Received

- 201
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:383:32
    381|         .set('Authorization', `Bearer ${adminToken}`)
    382|         .send(deliveryToDeleteInput);
    383|       expect(createRes.status).toBe(201);
       |                                ^
    384|       deliveryToDeleteId = createRes.body.data.id;
    385|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[168/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > DELETE /deliveries/:id > should soft delete a delivery
AssertionError: expected 403 to be 204 // Object.is equality

- Expected
+ Received

- 204
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:392:26
    390|         .set('Authorization', `Bearer ${adminToken}`);
    391|
    392|       expect(res.status).toBe(204);
       |                          ^
    393|
    394|       // Verify it's soft-deleted

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[169/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > DELETE /deliveries/:id > should return 404 for deleting a non-existent delivery
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:406:26
    404|         .set('Authorization', `Bearer ${adminToken}`);
    405|
    406|       expect(res.status).toBe(404);
       |                          ^
    407|     });
    408|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[170/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > DELETE /deliveries/:id > should return 400 for invalid id format
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:414:26
    412|         .set('Authorization', `Bearer ${adminToken}`);
    413|
    414|       expect(res.status).toBe(400);
       |                          ^
    415|     });
    416|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[171/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > DELETE /deliveries/:id > should fail to delete a delivery without authentication
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:419:26
    417|     it('should fail to delete a delivery without authentication', async () => {
    418|       const res = await request(app).delete(`/api/v1/deliveries/${deliveryToDeleteId}`);
    419|       expect(res.status).toBe(401);
       |                          ^
    420|     });
    421|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[172/294]⎯

 FAIL  src/modules/deliveries/__tests__/delivery.spec.ts > Deliveries API > DELETE /deliveries/:id > should return 400 if the delivery is linked to an invoice
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/deliveries/__tests__/delivery.spec.ts:427:26
    425|         .delete(`/api/v1/deliveries/${deliveryIdWithInvoice}`)
    426|         .set('Authorization', `Bearer ${adminToken}`);
    427|       expect(res.status).toBe(400);
       |                          ^
    428|       expect(res.body.status).toBe('fail');
    429|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[173/294]⎯

 FAIL  src/modules/imports/__tests__/import-opening-stock.spec.ts > Import API - Opening Stock > POST /import/opening-stock > should return 401 if not authenticated
AssertionError: expected 202 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 202

 ❯ src/modules/imports/__tests__/import-opening-stock.spec.ts:59:26
     57|         .send(openingStockImportPayload);
     58|
     59|       expect(res.status).toBe(401);
       |                          ^
     60|     });
     61|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[174/294]⎯

 FAIL  src/modules/imports/__tests__/import-opening-stock.spec.ts > Import API - Opening Stock > GET /import/batches/{id} > should return 401 if not authenticated
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/imports/__tests__/import-opening-stock.spec.ts:95:26
     93|       const res = await request(app).get(`/api/v1/import/batches/${importBatchId}`);
     94|
     95|       expect(res.status).toBe(401);
       |                          ^
     96|     });
     97|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[175/294]⎯

 FAIL  src/modules/imports/__tests__/import-product-category.spec.ts > Import API - Product Category > POST /import/product-categories > should return 401 if not authenticated
AssertionError: expected 202 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 202

 ❯ src/modules/imports/__tests__/import-product-category.spec.ts:53:26
     51|         .send(productCategoryImportPayload);
     52|
     53|       expect(res.status).toBe(401);
       |                          ^
     54|     });
     55|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[176/294]⎯

 FAIL  src/modules/imports/__tests__/import-product-category.spec.ts > Import API - Product Category > GET /import/batches/{id} > should return 401 if not authenticated
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/imports/__tests__/import-product-category.spec.ts:89:26
     87|       const res = await request(app).get(`/api/v1/import/batches/${importBatchId}`);
     88|
     89|       expect(res.status).toBe(401);
       |                          ^
     90|     });
     91|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[177/294]⎯

 FAIL  src/modules/imports/__tests__/import-product.spec.ts > Import API - Product > POST /import/products > should return 401 if not authenticated      
AssertionError: expected 202 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 202

 ❯ src/modules/imports/__tests__/import-product.spec.ts:59:26
     57|       const res = await request(app).post('/api/v1/import/products').send(productImportPayload);
     58|
     59|       expect(res.status).toBe(401);
       |                          ^
     60|     });
     61|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[178/294]⎯

 FAIL  src/modules/imports/__tests__/import-product.spec.ts > Import API - Product > GET /import/batches/{id} > should return 401 if not authenticated   
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/imports/__tests__/import-product.spec.ts:95:26
     93|       const res = await request(app).get(`/api/v1/import/batches/${importBatchId}`);
     94|
     95|       expect(res.status).toBe(401);
       |                          ^
     96|     });
     97|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[179/294]⎯

 FAIL  src/modules/imports/__tests__/import-purchase-order.spec.ts > Import API - Purchase Order > POST /import/purchase-orders > should return 401 if not authenticated
AssertionError: expected 202 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 202

 ❯ src/modules/imports/__tests__/import-purchase-order.spec.ts:61:26
     59|         .send(purchaseOrderImportPayload);
     60|
     61|       expect(res.status).toBe(401);
       |                          ^
     62|     });
     63|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[180/294]⎯

 FAIL  src/modules/imports/__tests__/import-purchase-order.spec.ts > Import API - Purchase Order > GET /import/batches/{id} > should return 401 if not authenticated
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/imports/__tests__/import-purchase-order.spec.ts:97:26
     95|       const res = await request(app).get(`/api/v1/import/batches/${importBatchId}`);
     96|
     97|       expect(res.status).toBe(401);
       |                          ^
     98|     });
     99|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[181/294]⎯

 FAIL  src/modules/imports/__tests__/import-sales-order.spec.ts > Import API - Sales Order > POST /import/sales-orders > should return 401 if not authenticated
AssertionError: expected 202 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 202

 ❯ src/modules/imports/__tests__/import-sales-order.spec.ts:67:26
     65|         .send(salesOrderImportPayload);
     66|
     67|       expect(res.status).toBe(401);
       |                          ^
     68|     });
     69|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[182/294]⎯

 FAIL  src/modules/imports/__tests__/import-sales-order.spec.ts > Import API - Sales Order > GET /import/batches/{id} > should return 401 if not authenticated
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/imports/__tests__/import-sales-order.spec.ts:103:26
    101|       const res = await request(app).get(`/api/v1/import/batches/${importBatchId}`);
    102|
    103|       expect(res.status).toBe(401);
       |                          ^
    104|     });
    105|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[183/294]⎯

 FAIL  src/modules/imports/__tests__/import-supplier.spec.ts > Import API - Supplier > GET /import/batches/{id} > should return 401 if not authenticated 
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/imports/__tests__/import-supplier.spec.ts:76:26
     74|       const res = await request(app).get(`/api/v1/import/batches/${importBatchId}`);
     75|
     76|       expect(res.status).toBe(401);
       |                          ^
     77|     });
     78|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[184/294]⎯

 FAIL  src/modules/inventory-sessions/__tests__/inventory-session.spec.ts > InventorySessions API > POST /inventory-sessions > should create a new inventory session for a warehouse
AssertionError: expected 403 to be 201 // Object.is equality

- Expected
+ Received

- 201
+ 403

 ❯ src/modules/inventory-sessions/__tests__/inventory-session.spec.ts:35:26
     33|         .send(testSessionInputWarehouse)
     34|         .set('Authorization', `Bearer ${adminToken}`);
     35|       expect(res.status).toBe(201);
       |                          ^
     36|       expect(res.body.data).toHaveProperty('id');
     37|       expect(res.body.data.warehouseId).toBe(TEST_WAREHOUSE_ID);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[185/294]⎯

 FAIL  src/modules/inventory-sessions/__tests__/inventory-session.spec.ts > InventorySessions API > POST /inventory-sessions > should fail to create a new inventory session for a shop if one already exists
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/inventory-sessions/__tests__/inventory-session.spec.ts:48:26
     46|         .send(testSessionInputShop)
     47|         .set('Authorization', `Bearer ${adminToken}`);
     48|       expect(res.status).toBe(400);
       |                          ^
     49|       expect(res.body.status).toBe('fail');
     50|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[186/294]⎯

 FAIL  src/modules/inventory-sessions/__tests__/inventory-session.spec.ts > InventorySessions API > GET /inventory-sessions > should return a paginated list of inventory sessions
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/inventory-sessions/__tests__/inventory-session.spec.ts:58:26
     56|         .get('/api/v1/inventory-sessions')
     57|         .set('Authorization', `Bearer ${adminToken}`);
     58|       expect(res.status).toBe(200);
       |                          ^
     59|       expect(Array.isArray(res.body.data.sessions)).toBe(true);
     60|       expect(res.body.data).toHaveProperty('total');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[187/294]⎯

 FAIL  src/modules/inventory-sessions/__tests__/inventory-session.spec.ts > InventorySessions API > GET /inventory-sessions/:id > should return an inventory session by id
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/inventory-sessions/__tests__/inventory-session.spec.ts:69:26
     67|         .get(`/api/v1/inventory-sessions/${createdSessionId}`)
     68|         .set('Authorization', `Bearer ${adminToken}`);
     69|       expect(res.status).toBe(200);
       |                          ^
     70|       expect(res.body.data.id).toBe(createdSessionId);
     71|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[188/294]⎯

 FAIL  src/modules/inventory-sessions/__tests__/inventory-session.spec.ts > InventorySessions API > PUT /inventory-sessions/:id > should update notes and dates of an inventory session
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/inventory-sessions/__tests__/inventory-session.spec.ts:88:26
     86|         .send({ notes: updatedNotes, endDate: dayjs().add(1, 'day').format('YYYY-MM-DD') })
     87|         .set('Authorization', `Bearer ${adminToken}`);
     88|       expect(res.status).toBe(200);
       |                          ^
     89|       expect(res.body.data.notes).toBe(updatedNotes);
     90|       expect(res.body.data.endDate).not.toBeNull();

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[189/294]⎯

 FAIL  src/modules/inventory-sessions/__tests__/inventory-session.spec.ts > InventorySessions API > PUT /inventory-sessions/:id > should not allow updating warehouseId or shopId
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/inventory-sessions/__tests__/inventory-session.spec.ts:98:26
     96|         .send({ warehouseId: 999 })
     97|         .set('Authorization', `Bearer ${adminToken}`);
     98|       expect(res.status).toBe(400);
       |                          ^
     99|     });
    100|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[190/294]⎯

 FAIL  src/modules/inventory-sessions/__tests__/inventory-session.spec.ts > InventorySessions API > POST /inventory-sessions/:id/complete > should complete an inventory session
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/inventory-sessions/__tests__/inventory-session.spec.ts:108:26
    106|         .send({ notes: 'Session completed' })
    107|         .set('Authorization', `Bearer ${adminToken}`);
    108|       expect(res.status).toBe(200);
       |                          ^
    109|       expect(res.body.data.status).toBe('completed');
    110|       expect(res.body.data.notes).toContain('completed');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[191/294]⎯

 FAIL  src/modules/inventory-sessions/__tests__/inventory-session.spec.ts > InventorySessions API > POST /inventory-sessions/:id/complete > should not complete an already completed session
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/inventory-sessions/__tests__/inventory-session.spec.ts:117:26
    115|         .post(`/api/v1/inventory-sessions/${createdSessionId}/complete`)
    116|         .set('Authorization', `Bearer ${adminToken}`);
    117|       expect(res.status).toBe(400);
       |                          ^
    118|     });
    119|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[192/294]⎯

 FAIL  src/modules/inventory-sessions/__tests__/inventory-session.spec.ts > InventorySessions API > PATCH /inventory-sessions/:id/cancel > should cancel a pending/in_progress inventory session
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/inventory-sessions/__tests__/inventory-session.spec.ts:133:26
    131|         .patch(`/api/v1/inventory-sessions/${sessionIdToCancel}/cancel`)
    132|         .set('Authorization', `Bearer ${adminToken}`);
    133|       expect(res.status).toBe(200);
       |                          ^
    134|       expect(res.body.data.status).toBe('cancelled');
    135|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[193/294]⎯

 FAIL  src/modules/notifications/__tests__/notification.spec.ts > Notifications API > POST /notifications > should fail to create a notification without authentication
AssertionError: expected 201 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 201

 ❯ src/modules/notifications/__tests__/notification.spec.ts:50:26
     48|         .send({ message: 'Notification sans auth.' });
     49|
     50|       expect(res.status).toBe(401);
       |                          ^
     51|     });
     52|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[194/294]⎯

 FAIL  src/modules/notifications/__tests__/notification.spec.ts > Notifications API > POST /notifications/mark-all-as-read > should mark all unread notifications as read for admin
AssertionError: expected 4 to be 3 // Object.is equality

- Expected
+ Received

- 3
+ 4

 ❯ src/modules/notifications/__tests__/notification.spec.ts:64:53
     62|         .get('/api/v1/notifications/unread-count')
     63|         .set('Authorization', `Bearer ${adminToken}`);
     64|       expect(initialCountRes.body.data.unreadCount).toBe(3); // ID 1, 3, and createdNotificationId
       |                                                     ^
     65|
     66|       const res = await request(app)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[195/294]⎯

 FAIL  src/modules/notifications/__tests__/notification.spec.ts > Notifications API > POST /notifications/mark-all-as-read > should fail to mark all as read without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/notifications/__tests__/notification.spec.ts:93:26
     91|     it('should fail to mark all as read without authentication', async () => {
     92|       const res = await request(app).post('/api/v1/notifications/mark-all-as-read');
     93|       expect(res.status).toBe(401);
       |                          ^
     94|     });
     95|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[196/294]⎯

 FAIL  src/modules/notifications/__tests__/notification.spec.ts > Notifications API > GET /notifications > should return a paginated list of notifications for the authenticated admin (all are now read)
AssertionError: expected 4 to be 3 // Object.is equality

- Expected
+ Received

- 3
+ 4

 ❯ src/modules/notifications/__tests__/notification.spec.ts:107:50
    105|       expect(Array.isArray(res.body.data.notifications)).toBe(true);
    106|       expect(res.body.data).toHaveProperty('total');
    107|       expect(res.body.data.notifications.length).toBe(3);
       |                                                  ^
    108|       expect(res.body.data.notifications.every((n: any) => n.isRead === true)).toBe(true);
    109|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[197/294]⎯

 FAIL  src/modules/notifications/__tests__/notification.spec.ts > Notifications API > GET /notifications > should filter notifications by isRead status (true) - should be 3 now
AssertionError: expected 4 to be 3 // Object.is equality

- Expected
+ Received

- 3
+ 4

 ❯ src/modules/notifications/__tests__/notification.spec.ts:127:50
    125|       expect(res.status).toBe(200);
    126|       expect(res.body.data.notifications.every((n: any) => n.isRead === true)).toBe(true);
    127|       expect(res.body.data.notifications.length).toBe(3);
       |                                                  ^
    128|     });
    129|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[198/294]⎯

 FAIL  src/modules/notifications/__tests__/notification.spec.ts > Notifications API > GET /notifications > should filter notifications by type (e.g., info, which is now read)
AssertionError: expected 4 to be 3 // Object.is equality

- Expected
+ Received

- 3
+ 4

 ❯ src/modules/notifications/__tests__/notification.spec.ts:137:50
    135|       expect(res.status).toBe(200);
    136|       expect(res.body.data.notifications.every((n: any) => n.type === 'info')).toBe(true);
    137|       expect(res.body.data.notifications.length).toBe(3);
       |                                                  ^
    138|       expect(res.body.data.notifications[0].isRead).toBe(true);
    139|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[199/294]⎯

 FAIL  src/modules/notifications/__tests__/notification.spec.ts > Notifications API > PATCH /notifications/:id/read > should fail to mark as read without authentication
AssertionError: expected 204 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 204

 ❯ src/modules/notifications/__tests__/notification.spec.ts:191:26
    189|     it('should fail to mark as read without authentication', async () => {
    190|       const res = await request(app).patch('/api/v1/notifications/1/read');
    191|       expect(res.status).toBe(401);
       |                          ^
    192|     });
    193|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[200/294]⎯

 FAIL  src/modules/notifications/__tests__/notification.spec.ts > Notifications API > DELETE /notifications/:id > should fail to delete a notification without authentication
AssertionError: expected 204 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 204

 ❯ src/modules/notifications/__tests__/notification.spec.ts:245:26
    243|     it('should fail to delete a notification without authentication', async () => {
    244|       const res = await request(app).delete('/api/v1/notifications/1');
    245|       expect(res.status).toBe(401);
       |                          ^
    246|     });
    247|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[201/294]⎯

 FAIL  src/modules/notifications/__tests__/notification.spec.ts > Notifications API > DELETE /notifications > should fail to delete all notifications without authentication
AssertionError: expected 204 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 204

 ❯ src/modules/notifications/__tests__/notification.spec.ts:277:26
    275|     it('should fail to delete all notifications without authentication', async () => {
    276|       const res = await request(app).delete('/api/v1/notifications');
    277|       expect(res.status).toBe(401);
       |                          ^
    278|     });
    279|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[202/294]⎯

 FAIL  src/modules/payment-methods/__tests__/payment-method.spec.ts > PaymentMethod API > POST /payment-methods > should fail to create a payment method without authentication
AssertionError: expected 400 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 400

 ❯ src/modules/payment-methods/__tests__/payment-method.spec.ts:36:26
     34|     it('should fail to create a payment method without authentication', async () => {
     35|       const res = await request(app).post('/api/v1/payment-methods').send(testMethod);
     36|       expect(res.status).toBe(401);
       |                          ^
     37|       expect(res.body.status).toBe('fail');
     38|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[203/294]⎯

 FAIL  src/modules/payment-methods/__tests__/payment-method.spec.ts > PaymentMethod API > GET /payment-methods > should fail to return payment methods without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/payment-methods/__tests__/payment-method.spec.ts:89:26
     87|     it('should fail to return payment methods without authentication', async () => {
     88|       const res = await request(app).get('/api/v1/payment-methods');
     89|       expect(res.status).toBe(401);
       |                          ^
     90|       expect(res.body.status).toBe('fail');
     91|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[204/294]⎯

 FAIL  src/modules/payment-methods/__tests__/payment-method.spec.ts > PaymentMethod API > GET /payment-methods/:id > should fail to get a payment method without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/payment-methods/__tests__/payment-method.spec.ts:149:26
    147|     it('should fail to get a payment method without authentication', async () => {
    148|       const res = await request(app).get(`/api/v1/payment-methods/${createdMethodId}`);
    149|       expect(res.status).toBe(401);
       |                          ^
    150|       expect(res.body.status).toBe('fail');
    151|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[205/294]⎯

 FAIL  src/modules/payment-methods/__tests__/payment-method.spec.ts > PaymentMethod API > PUT /payment-methods/:id > should fail to update a payment method without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/payment-methods/__tests__/payment-method.spec.ts:203:26
    201|         .put(`/api/v1/payment-methods/${createdMethodId}`)
    202|         .send(updatedMethod);
    203|       expect(res.status).toBe(401);
       |                          ^
    204|       expect(res.body.status).toBe('fail');
    205|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[206/294]⎯

 FAIL  src/modules/payment-methods/__tests__/payment-method.spec.ts > PaymentMethod API > DELETE /payment-methods/:id > should fail to delete a payment method without authentication
AssertionError: expected 404 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 404

 ❯ src/modules/payment-methods/__tests__/payment-method.spec.ts:247:26
    245|     it('should fail to delete a payment method without authentication', async () => {
    246|       const res = await request(app).delete(`/api/v1/payment-methods/${methodToDeleteId}`);
    247|       expect(res.status).toBe(401);
       |                          ^
    248|       expect(res.body.status).toBe('fail');
    249|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[207/294]⎯

 FAIL  src/modules/payments/__tests__/payment.spec.ts > Payment API > POST /payments > should fail to record a payment without authentication
AssertionError: expected 201 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 201

 ❯ src/modules/payments/__tests__/payment.spec.ts:39:26
     37|     it('should fail to record a payment without authentication', async () => {
     38|       const res = await request(app).post('/api/v1/payments').send(newPaymentInput);
     39|       expect(res.status).toBe(401);
       |                          ^
     40|       expect(res.body.status).toBe('fail');
     41|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[208/294]⎯

 FAIL  src/modules/payments/__tests__/payment.spec.ts > Payment API > DELETE /payments/:id > should delete (void/reverse) a payment by ID
AssertionError: expected 403 to be 204 // Object.is equality

- Expected
+ Received

- 204
+ 403

 ❯ src/modules/payments/__tests__/payment.spec.ts:109:26
    107|         .delete(`/api/v1/payments/${paymentToDeleteId}`)
    108|         .set('Authorization', `Bearer ${adminToken}`);
    109|       expect(res.status).toBe(204);
       |                          ^
    110|
    111|       // Verify it's actually deleted (or marked as voided)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[209/294]⎯

 FAIL  src/modules/payments/__tests__/payment.spec.ts > Payment API > DELETE /payments/:id > should return 404 for deleting a non-existent payment ID    
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/payments/__tests__/payment.spec.ts:122:26
    120|         .delete('/api/v1/payments/99999')
    121|         .set('Authorization', `Bearer ${adminToken}`);
    122|       expect(res.status).toBe(404);
       |                          ^
    123|       expect(res.body.status).toBe('fail');
    124|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[210/294]⎯

 FAIL  src/modules/payments/__tests__/payment.spec.ts > Payment API > DELETE /payments/:id > should return 400 for an invalid payment ID format
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/payments/__tests__/payment.spec.ts:130:26
    128|         .delete('/api/v1/payments/abc')
    129|         .set('Authorization', `Bearer ${adminToken}`);
    130|       expect(res.status).toBe(400);
       |                          ^
    131|       expect(res.body.status).toBe('fail');
    132|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[211/294]⎯

 FAIL  src/modules/product-categories/__test__/product-category.spec.ts > Product Category API > POST /product-categories > should fail to create a new product category without authentication
AssertionError: expected 400 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 400

 ❯ src/modules/product-categories/__test__/product-category.spec.ts:39:26
     37|       const res = await request(app).post('/api/v1/product-categories').send(testProductCategory);
     38|
     39|       expect(res.status).toBe(401);
       |                          ^
     40|       expect(res.body.status).toBe('fail');
     41|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[212/294]⎯

 FAIL  src/modules/product-categories/__test__/product-category.spec.ts > Product Category API > GET /product-categories > should fail to return a list of product categories without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/product-categories/__test__/product-category.spec.ts:71:26
     69|       const res = await request(app).get('/api/v1/product-categories');
     70|
     71|       expect(res.status).toBe(401);
       |                          ^
     72|       expect(res.body.status).toBe('fail');
     73|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[213/294]⎯

 FAIL  src/modules/product-categories/__test__/product-category.spec.ts > Product Category API > GET /product-categories/:id > should fail to get a specific product category without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/product-categories/__test__/product-category.spec.ts:155:26
    153|       const res = await request(app).get(`/api/v1/product-categories/${createdCategoryId}`);
    154|
    155|       expect(res.status).toBe(401);
       |                          ^
    156|       expect(res.body.status).toBe('fail');
    157|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[214/294]⎯

 FAIL  src/modules/product-categories/__test__/product-category.spec.ts > Product Category API > PUT /product-categories/:id > should fail to update a product category without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/product-categories/__test__/product-category.spec.ts:235:26
    233|         .send(updatedProductCategory);
    234|
    235|       expect(res.status).toBe(401);
       |                          ^
    236|       expect(res.body.status).toBe('fail');
    237|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[215/294]⎯

 FAIL  src/modules/product-categories/__test__/product-category.spec.ts > Product Category API > DELETE /product-categories/:id > should fail to delete a product category without authentication
AssertionError: expected 404 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 404

 ❯ src/modules/product-categories/__test__/product-category.spec.ts:300:26
    298|       const res = await request(app).delete(`/api/v1/product-categories/${categoryToDeleteId}`);
    299|
    300|       expect(res.status).toBe(401);
       |                          ^
    301|       expect(res.body.status).toBe('fail');
    302|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[216/294]⎯

 FAIL  src/modules/products/__tests__/product.spec.ts > Products API > POST /products > should fail to create a product without authentication
AssertionError: expected 400 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 400

 ❯ src/modules/products/__tests__/product.spec.ts:58:26
     56|       const res = await request(app).post('/api/v1/products').send(testProduct);
     57|
     58|       expect(res.status).toBe(401);
       |                          ^
     59|     });
     60|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[217/294]⎯

 FAIL  src/modules/products/__tests__/product.spec.ts > Products API > GET /products > should fail to get products without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/products/__tests__/product.spec.ts:84:26
     82|     it('should fail to get products without authentication', async () => {
     83|       const res = await request(app).get('/api/v1/products');
     84|       expect(res.status).toBe(401);
       |                          ^
     85|     });
     86|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[218/294]⎯

 FAIL  src/modules/products/__tests__/product.spec.ts > Products API > GET /products/:id > should fail to get a product without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/products/__tests__/product.spec.ts:118:26
    116|     it('should fail to get a product without authentication', async () => {
    117|       const res = await request(app).get(`/api/v1/products/${createdProductId}`);
    118|       expect(res.status).toBe(401);
       |                          ^
    119|     });
    120|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[219/294]⎯

 FAIL  src/modules/products/__tests__/product.spec.ts > Products API > PUT /products/:id > should fail to update a product without authentication        
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/products/__tests__/product.spec.ts:157:26
    155|       const res = await request(app).put(`/api/v1/products/${createdProductId}`).send(updateData);
    156|
    157|       expect(res.status).toBe(401);
       |                          ^
    158|     });
    159|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[220/294]⎯

 FAIL  src/modules/products/__tests__/product.spec.ts > Products API > DELETE /products/:id > should fail to delete a product without authentication     
AssertionError: expected 404 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 404

 ❯ src/modules/products/__tests__/product.spec.ts:189:26
    187|       const res = await request(app).delete(`/api/v1/products/${createdProductId}`);
    188|
    189|       expect(res.status).toBe(401);
       |                          ^
    190|     });
    191|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[221/294]⎯

 FAIL  src/modules/purchase-orders/__tests__/purchase-order.spec.ts > Purchase Orders API > DELETE /purchase-orders/:id > should soft delete a purchase order (if in DRAFT status)
AssertionError: expected 403 to be 204 // Object.is equality

- Expected
+ Received

- 204
+ 403

 ❯ src/modules/purchase-orders/__tests__/purchase-order.spec.ts:169:26
    167|         .delete(`/api/v1/purchase-orders/${poToDeleteId}`)
    168|         .set('Authorization', `Bearer ${adminToken}`);
    169|       expect(res.status).toBe(204);
       |                          ^
    170|     });
    171|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[222/294]⎯

 FAIL  src/modules/purchase-orders/__tests__/purchase-order.spec.ts > Purchase Orders API > DELETE /purchase-orders/:id > should return 400 if the purchase order is linked to receptions or invoices
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/purchase-orders/__tests__/purchase-order.spec.ts:177:26
    175|         .delete(`/api/v1/purchase-orders/${orderId}`)
    176|         .set('Authorization', `Bearer ${adminToken}`);
    177|       expect(res.status).toBe(400);
       |                          ^
    178|       expect(res.body.status).toBe('fail');
    179|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[223/294]⎯

 FAIL  src/modules/purchase-receptions/__tests__/purchase-reception.spec.ts > Purchase Receptions API > POST /purchase-receptions > should fail to create reception without authentication
AssertionError: expected 201 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 201

 ❯ src/modules/purchase-receptions/__tests__/purchase-reception.spec.ts:177:26
    175|       };
    176|       const res = await request(app).post('/api/v1/purchase-receptions').send(payload);
    177|       expect(res.status).toBe(401);
       |                          ^
    178|     });
    179|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[224/294]⎯

 FAIL  src/modules/purchase-receptions/__tests__/purchase-reception.spec.ts > Purchase Receptions API > DELETE /purchase-receptions/:id > should soft delete a purchase reception if status allows
AssertionError: expected 403 to be 204 // Object.is equality

- Expected
+ Received

- 204
+ 403

 ❯ src/modules/purchase-receptions/__tests__/purchase-reception.spec.ts:422:26
    420|         .delete(`/api/v1/purchase-receptions/${receptionToDeleteId}`)
    421|         .set('Authorization', `Bearer ${adminToken}`);
    422|       expect(res.status).toBe(204);
       |                          ^
    423|
    424|       const getRes = await request(app)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[225/294]⎯

 FAIL  src/modules/purchase-receptions/__tests__/purchase-reception.spec.ts > Purchase Receptions API > DELETE /purchase-receptions/:id > should fail to delete a reception if status does not allow
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/purchase-receptions/__tests__/purchase-reception.spec.ts:442:26
    440|         .delete(`/api/v1/purchase-receptions/${receptionId}`)
    441|         .set('Authorization', `Bearer ${adminToken}`);
    442|       expect(res.status).toBe(400);
       |                          ^
    443|     });
    444|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[226/294]⎯

 FAIL  src/modules/purchase-receptions/__tests__/purchase-reception.spec.ts > Purchase Receptions API > DELETE /purchase-receptions/:id > should return 400 if the reception is linked to a supplier invoice
AssertionError: expected 403 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 403

 ❯ src/modules/purchase-receptions/__tests__/purchase-reception.spec.ts:450:26
    448|         .delete(`/api/v1/purchase-receptions/${receptionId}`)
    449|         .set('Authorization', `Bearer ${adminToken}`);
    450|       expect(res.status).toBe(400);
       |                          ^
    451|       expect(res.body.status).toBe('fail');
    452|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[227/294]⎯

 FAIL  src/modules/quotes/__tests__/quote.spec.ts > Quotes API > POST /quotes > should fail to create quote without authentication
AssertionError: expected 201 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 201

 ❯ src/modules/quotes/__tests__/quote.spec.ts:109:26
    107|       };
    108|       const res = await request(app).post('/api/v1/quotes').send(payload);
    109|       expect(res.status).toBe(401);
       |                          ^
    110|     });
    111|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[228/294]⎯

 FAIL  src/modules/shops/__tests__/shop.spec.ts > Shop API > POST /shops > should fail to create a shop without authentication
AssertionError: expected 400 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 400

 ❯ src/modules/shops/__tests__/shop.spec.ts:41:26
     39|     it('should fail to create a shop without authentication', async () => {
     40|       const res = await request(app).post('/api/v1/shops').send(testShop);
     41|       expect(res.status).toBe(401);
       |                          ^
     42|       expect(res.body.status).toBe('fail');
     43|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[229/294]⎯

 FAIL  src/modules/shops/__tests__/shop.spec.ts > Shop API > GET /shops > should fail to return shops without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/shops/__tests__/shop.spec.ts:95:26
     93|     it('should fail to return shops without authentication', async () => {
     94|       const res = await request(app).get('/api/v1/shops');
     95|       expect(res.status).toBe(401);
       |                          ^
     96|       expect(res.body.status).toBe('fail');
     97|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[230/294]⎯

 FAIL  src/modules/shops/__tests__/shop.spec.ts > Shop API > GET /shops/:id > should fail to get a shop without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/shops/__tests__/shop.spec.ts:153:26
    151|     it('should fail to get a shop without authentication', async () => {
    152|       const res = await request(app).get(`/api/v1/shops/${createdShopId}`);
    153|       expect(res.status).toBe(401);
       |                          ^
    154|       expect(res.body.status).toBe('fail');
    155|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[231/294]⎯

 FAIL  src/modules/shops/__tests__/shop.spec.ts > Shop API > PUT /shops/:id > should fail to update a shop without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/shops/__tests__/shop.spec.ts:207:26
    205|     it('should fail to update a shop without authentication', async () => {
    206|       const res = await request(app).put(`/api/v1/shops/${createdShopId}`).send(updatedShop);
    207|       expect(res.status).toBe(401);
       |                          ^
    208|       expect(res.body.status).toBe('fail');
    209|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[232/294]⎯

 FAIL  src/modules/shops/__tests__/shop.spec.ts > Shop API > DELETE /shops/:id > should fail to delete a shop without authentication
AssertionError: expected 404 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 404

 ❯ src/modules/shops/__tests__/shop.spec.ts:253:26
    251|     it('should fail to delete a shop without authentication', async () => {
    252|       const res = await request(app).delete(`/api/v1/shops/${shopToDeleteId}`);
    253|       expect(res.status).toBe(401);
       |                          ^
    254|       expect(res.body.status).toBe('fail');
    255|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[233/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > GET /users > should return users (as admin)
AssertionError: expected 400 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 400

 ❯ src/modules/users/__tests__/users.spec.ts:235:26
    233|         .get('/api/v1/users')
    234|         .set('Authorization', `Bearer ${adminToken}`);
    235|       expect(res.status).toBe(200);
       |                          ^
    236|       expect(res.body.status).toBe('success');
    237|       expect(res.body).toHaveProperty('data');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[234/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > GET /users > should fail to return users (as standard user)
AssertionError: expected 400 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 400

 ❯ src/modules/users/__tests__/users.spec.ts:263:26
    261|         .get('/api/v1/users')
    262|         .set('Authorization', `Bearer ${userToken}`);
    263|       expect(res.status).toBe(403);
       |                          ^
    264|       expect(res.body.status).toBe('fail');
    265|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[235/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > GET /users > should fail to return users (as reader user)
AssertionError: expected 400 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 400

 ❯ src/modules/users/__tests__/users.spec.ts:271:26
    269|         .get('/api/v1/users')
    270|         .set('Authorization', `Bearer ${readerToken}`);
    271|       expect(res.status).toBe(403);
       |                          ^
    272|       expect(res.body.status).toBe('fail');
    273|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[236/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > GET /users/:identifier (ID) > should fail to get another user from valid id (as standard user)
AssertionError: expected 200 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 200

 ❯ src/modules/users/__tests__/users.spec.ts:319:26
    317|         .get(`/api/v1/users/${createdUserId}`)
    318|         .set('Authorization', `Bearer ${userToken}`);
    319|       expect(res.status).toBe(403);
       |                          ^
    320|       expect(res.body.status).toBe('fail');
    321|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[237/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > GET /users/:identifier (ID) > should fail to get another user from valid id (as reader user)
AssertionError: expected 200 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 200

 ❯ src/modules/users/__tests__/users.spec.ts:327:26
    325|         .get(`/api/v1/users/${createdUserId}`)
    326|         .set('Authorization', `Bearer ${readerToken}`);
    327|       expect(res.status).toBe(403);
       |                          ^
    328|       expect(res.body.status).toBe('fail');
    329|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[238/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > GET /users/:identifier (Email) > should fail to get another user by email (as standard user)
AssertionError: expected 200 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 200

 ❯ src/modules/users/__tests__/users.spec.ts:375:26
    373|         .get(`/api/v1/users/${userMail}`)
    374|         .set('Authorization', `Bearer ${userToken}`);
    375|       expect(res.status).toBe(403);
       |                          ^
    376|       expect(res.body.status).toBe('fail');
    377|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[239/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > GET /users/:identifier (Email) > should fail to get another user by email (as reader user)
AssertionError: expected 200 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 200

 ❯ src/modules/users/__tests__/users.spec.ts:383:26
    381|         .get(`/api/v1/users/${userMail}`)
    382|         .set('Authorization', `Bearer ${readerToken}`);
    383|       expect(res.status).toBe(403);
       |                          ^
    384|       expect(res.body.status).toBe('fail');
    385|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[240/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > GET /users/me > should return current user info (standard user)
AssertionError: expected 1 to be 4 // Object.is equality

- Expected
+ Received

- 4
+ 1

 ❯ src/modules/users/__tests__/users.spec.ts:408:32
    406|       expect(res.status).toBe(200);
    407|       expect(res.body.status).toBe('success');
    408|       expect(res.body.data.id).toBe(standardUserId);
       |                                ^
    409|       expect(res.body.data.email).toBe(standardUserEmail);
    410|       expect(res.body.data).not.toHaveProperty('password');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[241/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > PUT /users/:id > should fail to edit another user from valid id (as standard user)        
AssertionError: expected 200 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 200

 ❯ src/modules/users/__tests__/users.spec.ts:474:26
    472|         .set('Authorization', `Bearer ${userToken}`)
    473|         .send({ firstName: 'forbiddenEdit' });
    474|       expect(res.status).toBe(403);
       |                          ^
    475|       expect(res.body.status).toBe('fail');
    476|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[242/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > PUT /users/:id > should fail to edit user (as reader user)
AssertionError: expected 200 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 200

 ❯ src/modules/users/__tests__/users.spec.ts:483:26
    481|         .set('Authorization', `Bearer ${readerToken}`)
    482|         .send({ firstName: 'forbiddenReaderEdit' });
    483|       expect(res.status).toBe(403);
       |                          ^
    484|       expect(res.body.status).toBe('fail');
    485|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[243/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > PUT /users/:id > should check if admin edit was applied correctly
AssertionError: expected 'forbiddenEdit' to be 'editedFirstName' // Object.is equality

Expected: "editedFirstName"
Received: "forbiddenEdit"

 ❯ src/modules/users/__tests__/users.spec.ts:495:31
    493|       const entry = res.body.data;
    494|       expect(entry.id).toBe(createdUserId);
    495|       expect(entry.firstName).toBe('editedFirstName');
       |                               ^
    496|       expect(entry.preferences).toHaveProperty('hello', 'world');
    497|       expect(entry.preferences).toHaveProperty('hasOnboarding', true);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[244/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > PUT /users/:id/preferences > should forbid updating preferences for another user (as standard user)
AssertionError: expected 200 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 200

 ❯ src/modules/users/__tests__/users.spec.ts:530:26
    528|         .set('Authorization', `Bearer ${userToken}`)
    529|         .send({ theme: 'light' });
    530|       expect(res.status).toBe(403);
       |                          ^
    531|       expect(res.body.status).toBe('fail');
    532|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[245/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > PUT /users/:id/preferences > should forbid updating preferences (as reader user)
AssertionError: expected 200 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 200

 ❯ src/modules/users/__tests__/users.spec.ts:539:29
    537|         .set('Authorization', `Bearer ${readerToken}`)
    538|         .send({ theme: 'blue' });
    539|       expect(resOwn.status).toBe(403);
       |                             ^
    540|       expect(resOwn.body.status).toBe('fail');
    541|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[246/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > DELETE /users/:id/preferences > should forbid resetting preferences for another user (as standard user)
AssertionError: expected 200 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 200

 ❯ src/modules/users/__tests__/users.spec.ts:599:26
    597|         .delete(`/api/v1/users/${createdUserId}/preferences`)
    598|         .set('Authorization', `Bearer ${userToken}`);
    599|       expect(res.status).toBe(403);
       |                          ^
    600|       expect(res.body.status).toBe('fail');
    601|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[247/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > DELETE /users/:id/preferences > should forbid resetting preferences (as reader user)      
AssertionError: expected 200 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 200

 ❯ src/modules/users/__tests__/users.spec.ts:607:29
    605|         .delete(`/api/v1/users/${readerUserId}/preferences`)
    606|         .set('Authorization', `Bearer ${readerToken}`);
    607|       expect(resOwn.status).toBe(403);
       |                             ^
    608|       expect(resOwn.body.status).toBe('fail');
    609|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[248/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > PUT /users/:userId/preferences/:key > should fail to update another user preference key (as standard user)
AssertionError: expected 200 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 200

 ❯ src/modules/users/__tests__/users.spec.ts:704:26
    702|         .set('Authorization', `Bearer ${userToken}`)
    703|         .send({ value: 'forbiddenTheme' });
    704|       expect(res.status).toBe(403);
       |                          ^
    705|       expect(res.body.status).toBe('fail');
    706|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[249/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > PUT /users/:userId/preferences/:key > should forbid updating preference key (as reader user)
AssertionError: expected 200 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 200

 ❯ src/modules/users/__tests__/users.spec.ts:713:29
    711|         .set('Authorization', `Bearer ${readerToken}`)
    712|         .send({ value: 'readerValue' });
    713|       expect(resOwn.status).toBe(403);
       |                             ^
    714|       expect(resOwn.body.status).toBe('fail');
    715|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[250/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > should fail to delete user (as standard user)
AssertionError: expected 200 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 200

 ❯ src/modules/users/__tests__/users.spec.ts:775:24
    773|       .delete(`/api/v1/users/${tempUserId}`)
    774|       .set('Authorization', `Bearer ${userToken}`);
    775|     expect(res.status).toBe(403);
       |                        ^
    776|     expect(res.body.status).toBe('fail');
    777|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[251/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > should fail to delete user (as reader user)
AssertionError: expected 404 to be 403 // Object.is equality

- Expected
+ Received

- 403
+ 404

 ❯ src/modules/users/__tests__/users.spec.ts:787:24
    785|       .delete(`/api/v1/users/${createdUserId}`)
    786|       .set('Authorization', `Bearer ${readerToken}`);
    787|     expect(res.status).toBe(403);
       |                        ^
    788|     expect(res.body.status).toBe('fail');
    789|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[252/294]⎯

 FAIL  src/modules/users/__tests__/users.spec.ts > Users API > Delete user when it no longer has authorisations > should get resurrected user
AssertionError: expected 'Monique' to be 'Jean' // Object.is equality

Expected: "Jean"
Received: "Monique"

 ❯ src/modules/users/__tests__/users.spec.ts:845:30
    843|       const user = res.body.data;
    844|       expect(user.id).toBe(zombieUserId);
    845|       expect(user.firstName).toBe('Jean');
       |                              ^
    846|     });
    847|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[253/294]⎯

 FAIL  src/modules/suppliers/__test__/supplier.spec.ts > Supplier API > POST /suppliers > should fail to create a supplier without authentication        
AssertionError: expected 400 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 400

 ❯ src/modules/suppliers/__test__/supplier.spec.ts:44:26
     42|     it('should fail to create a supplier without authentication', async () => {
     43|       const res = await request(app).post('/api/v1/suppliers').send(testSupplier);
     44|       expect(res.status).toBe(401);
       |                          ^
     45|       expect(res.body.status).toBe('fail');
     46|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[254/294]⎯

 FAIL  src/modules/suppliers/__test__/supplier.spec.ts > Supplier API > GET /suppliers > should fail to return suppliers without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/suppliers/__test__/supplier.spec.ts:70:26
     68|     it('should fail to return suppliers without authentication', async () => {
     69|       const res = await request(app).get('/api/v1/suppliers');
     70|       expect(res.status).toBe(401);
       |                          ^
     71|       expect(res.body.status).toBe('fail');
     72|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[255/294]⎯

 FAIL  src/modules/suppliers/__test__/supplier.spec.ts > Supplier API > GET /suppliers/:id > should fail to get a supplier without authentication        
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/suppliers/__test__/supplier.spec.ts:128:26
    126|     it('should fail to get a supplier without authentication', async () => {
    127|       const res = await request(app).get(`/api/v1/suppliers/${createdSupplierId}`);
    128|       expect(res.status).toBe(401);
       |                          ^
    129|       expect(res.body.status).toBe('fail');
    130|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[256/294]⎯

 FAIL  src/modules/suppliers/__test__/supplier.spec.ts > Supplier API > PUT /suppliers/:id > should fail to update a supplier without authentication     
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/suppliers/__test__/supplier.spec.ts:193:26
    191|         .put(`/api/v1/suppliers/${createdSupplierId}`)
    192|         .send(updatedSupplier);
    193|       expect(res.status).toBe(401);
       |                          ^
    194|       expect(res.body.status).toBe('fail');
    195|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[257/294]⎯

 FAIL  src/modules/suppliers/__test__/supplier.spec.ts > Supplier API > DELETE /suppliers/:id > should fail to delete a supplier without authentication  
AssertionError: expected 404 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 404

 ❯ src/modules/suppliers/__test__/supplier.spec.ts:237:26
    235|     it('should fail to delete a supplier without authentication', async () => {
    236|       const res = await request(app).delete(`/api/v1/suppliers/${supplierToDeleteId}`);
    237|       expect(res.status).toBe(401);
       |                          ^
    238|       expect(res.body.status).toBe('fail');
    239|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[258/294]⎯

 FAIL  src/modules/warehouses/__tests__/warehouse.spec.ts > Warehouse API > POST /warehouses > should fail to create a warehouse without authentication  
AssertionError: expected 400 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 400

 ❯ src/modules/warehouses/__tests__/warehouse.spec.ts:41:26
     39|     it('should fail to create a warehouse without authentication', async () => {
     40|       const res = await request(app).post('/api/v1/warehouses').send(testWarehouse);
     41|       expect(res.status).toBe(401);
       |                          ^
     42|       expect(res.body.status).toBe('fail');
     43|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[259/294]⎯

 FAIL  src/modules/warehouses/__tests__/warehouse.spec.ts > Warehouse API > GET /warehouses > should fail to return warehouses without authentication    
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/warehouses/__tests__/warehouse.spec.ts:95:26
     93|     it('should fail to return warehouses without authentication', async () => {
     94|       const res = await request(app).get('/api/v1/warehouses');
     95|       expect(res.status).toBe(401);
       |                          ^
     96|       expect(res.body.status).toBe('fail');
     97|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[260/294]⎯

 FAIL  src/modules/warehouses/__tests__/warehouse.spec.ts > Warehouse API > GET /warehouses/:id > should fail to get a warehouse without authentication  
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/warehouses/__tests__/warehouse.spec.ts:153:26
    151|     it('should fail to get a warehouse without authentication', async () => {
    152|       const res = await request(app).get(`/api/v1/warehouses/${createdWarehouseId}`);
    153|       expect(res.status).toBe(401);
       |                          ^
    154|       expect(res.body.status).toBe('fail');
    155|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[261/294]⎯

 FAIL  src/modules/warehouses/__tests__/warehouse.spec.ts > Warehouse API > PUT /warehouses/:id > should fail to update a warehouse without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/warehouses/__tests__/warehouse.spec.ts:209:26
    207|         .put(`/api/v1/warehouses/${createdWarehouseId}`)
    208|         .send(updatedWarehouse);
    209|       expect(res.status).toBe(401);
       |                          ^
    210|       expect(res.body.status).toBe('fail');
    211|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[262/294]⎯

 FAIL  src/modules/warehouses/__tests__/warehouse.spec.ts > Warehouse API > DELETE /warehouses/:id > should fail to delete a warehouse without authentication
AssertionError: expected 404 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 404

 ❯ src/modules/warehouses/__tests__/warehouse.spec.ts:255:26
    253|     it('should fail to delete a warehouse without authentication', async () => {
    254|       const res = await request(app).delete(`/api/v1/warehouses/${warehouseToDeleteId}`);
    255|       expect(res.status).toBe(401);
       |                          ^
    256|       expect(res.body.status).toBe('fail');
    257|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[263/294]⎯

 FAIL  src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts > DeliveryItems API > POST /deliveries/:deliveryId/items > should add a new item to a delivery
AssertionError: expected 403 to be 201 // Object.is equality

- Expected
+ Received

- 201
+ 403

 ❯ src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts:40:26
     38|         .send(newItem);
     39|
     40|       expect(res.status).toBe(201);
       |                          ^
     41|       expect(res.body.data).toHaveProperty('id');
     42|       expect(res.body.data.deliveryId).toBe(existingDeliveryIdPending);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[264/294]⎯

 FAIL  src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts > DeliveryItems API > POST /deliveries/:deliveryId/items > should fail to add an item to a non-existent delivery
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts:54:26
     52|         .set('Authorization', `Bearer ${adminToken}`)
     53|         .send(testDeliveryItemInput(1, 1, 1, 6));
     54|       expect(res.status).toBe(404);
       |                          ^
     55|     });
     56|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[265/294]⎯

 FAIL  src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts > DeliveryItems API > GET /deliveries/:deliveryId/items > should return a list of items for a delivery
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts:72:26
     70|         .set('Authorization', `Bearer ${adminToken}`);
     71|
     72|       expect(res.status).toBe(200);
       |                          ^
     73|       expect(res.body.data).toBeInstanceOf(Array);
     74|       expect(res.body.data.length).toBeGreaterThan(0);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[266/294]⎯

 FAIL  src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts > DeliveryItems API > GET /deliveries/:deliveryId/items > should return 404 for a non-existent delivery
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts:83:26
     81|         .get('/api/v1/deliveries/999999/items')
     82|         .set('Authorization', `Bearer ${adminToken}`);
     83|       expect(res.status).toBe(404);
       |                          ^
     84|     });
     85|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[267/294]⎯

 FAIL  src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts > DeliveryItems API > GET /deliveries/:deliveryId/items/:itemId > should return a specific item by ID for a delivery
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts:93:26
     91|         .set('Authorization', `Bearer ${adminToken}`);
     92|
     93|       expect(res.status).toBe(200);
       |                          ^
     94|       expect(res.body.data).toHaveProperty('id', existingDeliveryItem1Id);
     95|       expect(res.body.data.deliveryId).toBe(existingDeliveryIdPending);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[268/294]⎯

 FAIL  src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts > DeliveryItems API > GET /deliveries/:deliveryId/items/:itemId > should return 404 for a non-existent item
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts:102:26
    100|         .get(`/api/v1/deliveries/${existingDeliveryIdPending}/items/999999`)
    101|         .set('Authorization', `Bearer ${adminToken}`);
    102|       expect(res.status).toBe(404);
       |                          ^
    103|     });
    104|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[269/294]⎯

 FAIL  src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts > DeliveryItems API > GET /deliveries/:deliveryId/items/:itemId > should return 404 for an item not belonging to the specified delivery
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts:111:26
    109|         )
    110|         .set('Authorization', `Bearer ${adminToken}`);
    111|       expect(res.status).toBe(404);
       |                          ^
    112|     });
    113|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[270/294]⎯

 FAIL  src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts > DeliveryItems API > GET /deliveries/:deliveryId/items/:itemId > should fail to get a specific item without authentication
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts:118:26
    116|         `/api/v1/deliveries/${existingDeliveryIdPending}/items/${existingDeliveryItem1Id}`,
    117|       );
    118|       expect(res.status).toBe(401);
       |                          ^
    119|     });
    120|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[271/294]⎯

 FAIL  src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts > DeliveryItems API > PUT /deliveries/:deliveryId/items/:itemId > should update an existing item in a delivery
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts:133:26
    131|         .send(updateData);
    132|
    133|       expect(res.status).toBe(200);
       |                          ^
    134|       expect(res.body.data).toHaveProperty('id', existingDeliveryItem1Id);
    135|       expect(res.body.data.quantityShipped).toBe(updateData.quantityShipped);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[272/294]⎯

 FAIL  src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts > DeliveryItems API > PUT /deliveries/:deliveryId/items/:itemId > should fail to update an item in a non-existent delivery
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts:144:26
    142|         .set('Authorization', `Bearer ${adminToken}`)
    143|         .send(updateData);
    144|       expect(res.status).toBe(404);
       |                          ^
    145|     });
    146|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[273/294]⎯

 FAIL  src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts > DeliveryItems API > PUT /deliveries/:deliveryId/items/:itemId > should fail to update a non-existent item in an existing delivery
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts:152:26
    150|         .set('Authorization', `Bearer ${adminToken}`)
    151|         .send(updateData);
    152|       expect(res.status).toBe(404);
       |                          ^
    153|     });
    154|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[274/294]⎯

 FAIL  src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts > DeliveryItems API > PUT /deliveries/:deliveryId/items/:itemId > should fail to update an item without authentication
AssertionError: expected 403 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 403

 ❯ src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts:170:26
    168|         .put(`/api/v1/deliveries/${existingDeliveryIdPending}/items/${existingDeliveryItem1Id}`)
    169|         .send(updateData);
    170|       expect(res.status).toBe(401);
       |                          ^
    171|     });
    172|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[275/294]⎯

 FAIL  src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts > DeliveryItems API > DELETE /deliveries/:deliveryId/items/:itemId > should delete an item from a delivery
AssertionError: expected 403 to be 204 // Object.is equality

- Expected
+ Received

- 204
+ 403

 ❯ src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts:180:26
    178|         .set('Authorization', `Bearer ${adminToken}`);
    179|
    180|       expect(res.status).toBe(204);
       |                          ^
    181|
    182|       const getRes = await request(app)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[276/294]⎯

 FAIL  src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts > DeliveryItems API > DELETE /deliveries/:deliveryId/items/:itemId > should fail to delete an item from a non-existent delivery
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts:192:26
    190|         .delete(`/api/v1/deliveries/999999/items/${existingDeliveryItem1Id}`)
    191|         .set('Authorization', `Bearer ${adminToken}`);
    192|       expect(res.status).toBe(404);
       |                          ^
    193|     });
    194|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[277/294]⎯

 FAIL  src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts > DeliveryItems API > DELETE /deliveries/:deliveryId/items/:itemId > should fail to delete a non-existent item from an existing delivery
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/deliveries/delivery-items/__tests__/delivery-item.spec.ts:199:26
    197|         .delete(`/api/v1/deliveries/${existingDeliveryIdPending}/items/999999`)
    198|         .set('Authorization', `Bearer ${adminToken}`);
    199|       expect(res.status).toBe(404);
       |                          ^
    200|     });
    201|

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[278/294]⎯

 FAIL  src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts > Composite Product Items API > POST /products/:productId/components > should add a component (base product) to a composite product (as admin)
AssertionError: expected 404 to be 201 // Object.is equality

- Expected
+ Received

- 201
+ 404

 ❯ src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts:31:26
     29|         .send(payload);
     30|
     31|       expect(res.status).toBe(201);
       |                          ^
     32|       expect(res.body.status).toBe('success');
     33|       expect(res.body.data).toHaveProperty('id');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[279/294]⎯

 FAIL  src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts > Composite Product Items API > POST /products/:productId/components > should add a component (product variant) to a composite product (as admin)
AssertionError: expected 404 to be 201 // Object.is equality

- Expected
+ Received

- 201
+ 404

 ❯ src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts:51:26
     49|         .send(payload);
     50|
     51|       expect(res.status).toBe(201);
       |                          ^
     52|       expect(res.body.status).toBe('success');
     53|       expect(res.body.data).toHaveProperty('id');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[280/294]⎯

 FAIL  src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts > Composite Product Items API > POST /products/:productId/components > should fail if composite product is not marked as composite (as admin)
AssertionError: expected 404 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 404

 ❯ src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts:66:26
     64|         .set('Authorization', `Bearer ${adminToken}`)
     65|         .send(payload);
     66|       expect(res.status).toBe(400);
       |                          ^
     67|       expect(res.body.data).toContain('is not a composite product');
     68|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[281/294]⎯

 FAIL  src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts > Composite Product Items API > POST /products/:productId/components > should fail if component product does not exist (as admin)
AssertionError: expected 404 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 404

 ❯ src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts:76:26
     74|         .set('Authorization', `Bearer ${adminToken}`)
     75|         .send(payload);
     76|       expect(res.status).toBe(400); // Or 404 depending on how service handles it
       |                          ^
     77|     });
     78|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[282/294]⎯

 FAIL  src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts > Composite Product Items API > GET /products/:productId/components > should list all components for a composite product (as admin)
AssertionError: expected 404 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 404

 ❯ src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts:85:26
     83|         .get(`/api/v1/products/${testCompositeProductId}/components`)
     84|         .set('Authorization', `Bearer ${adminToken}`);
     85|       expect(res.status).toBe(200);
       |                          ^
     86|       expect(res.body.status).toBe('success');
     87|       expect(Array.isArray(res.body.data)).toBe(true);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[283/294]⎯

 FAIL  src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts > Composite Product Items API > GET /products/:productId/components/:itemId > should get a specific component link by its ID (as admin)
AssertionError: expected 404 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 404

 ❯ src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts:99:26
     97|         .get(`/api/v1/products/${testCompositeProductId}/components/${createdItemLinkId1}`)
     98|         .set('Authorization', `Bearer ${adminToken}`);
     99|       expect(res.status).toBe(200);
       |                          ^
    100|       expect(res.body.data.id).toBe(createdItemLinkId1);
    101|       expect(res.body.data.componentProductId).toBe(testComponentProductId3);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[284/294]⎯

 FAIL  src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts > Composite Product Items API > PUT /products/:productId/components/:itemId > should update a component quantity (as admin)
AssertionError: expected 404 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 404

 ❯ src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts:118:26
    116|         .set('Authorization', `Bearer ${adminToken}`)
    117|         .send(updatePayload);
    118|       expect(res.status).toBe(200);
       |                          ^
    119|       expect(res.body.data.id).toBe(createdItemLinkId1);
    120|       expect(res.body.data.quantity).toBe(updatePayload.quantity);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[285/294]⎯

 FAIL  src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts > Composite Product Items API > PUT /products/:productId/components/:itemId > should fail to update with zero or negative quantity (as admin)
AssertionError: expected 404 to be 400 // Object.is equality

- Expected
+ Received

- 400
+ 404

 ❯ src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts:128:26
    126|         .set('Authorization', `Bearer ${adminToken}`)
    127|         .send(updatePayload);
    128|       expect(res.status).toBe(400);
       |                          ^
    129|       expect(res.body.data).toContain('Quantity must be positive');
    130|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[286/294]⎯

 FAIL  src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts > Composite Product Items API > DELETE /products/:productId/components/:itemId > should remove a component from a composite product (as admin)
AssertionError: expected 404 to be 204 // Object.is equality

- Expected
+ Received

- 204
+ 404

 ❯ src/modules/products/composite-product-items/__tests__/composite-product-item.spec.ts:138:26
    136|         .delete(`/api/v1/products/${testCompositeProductId}/components/${createdItemLinkId1}`)
    137|         .set('Authorization', `Bearer ${adminToken}`);
    138|       expect(res.status).toBe(204);
       |                          ^
    139|
    140|       // Verify it's gone

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[287/294]⎯

 FAIL  src/modules/purchase-receptions/purchase-reception-items/__tests__/purchase-reception-item.spec.ts > Purchase Reception Items API (nested) > DELETE /purchase-receptions/:receptionId/items/:itemId > should remove an item from a purchase reception
AssertionError: expected 403 to be 204 // Object.is equality

- Expected
+ Received

- 204
+ 403

 ❯ src/modules/purchase-receptions/purchase-reception-items/__tests__/purchase-reception-item.spec.ts:236:26
    234|         .delete(`/api/v1/purchase-receptions/${parentReceptionId}/items/${purchaseReceptionItemId}`)
    235|         .set('Authorization', `Bearer ${adminToken}`);
    236|       expect(res.status).toBe(204);
       |                          ^
    237|
    238|       // Verify it's gone

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[288/294]⎯

 FAIL  src/modules/purchase-receptions/purchase-reception-items/__tests__/purchase-reception-item.spec.ts > Purchase Reception Items API (nested) > DELETE /purchase-receptions/:receptionId/items/:itemId > should return 404 for non-existent itemId on delete
AssertionError: expected 403 to be 404 // Object.is equality

- Expected
+ Received

- 404
+ 403

 ❯ src/modules/purchase-receptions/purchase-reception-items/__tests__/purchase-reception-item.spec.ts:261:26
    259|         .delete(`/api/v1/purchase-receptions/${parentReceptionId}/items/999999`)
    260|         .set('Authorization', `Bearer ${adminToken}`);
    261|       expect(res.status).toBe(404);
       |                          ^
    262|     });
    263|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[289/294]⎯

 FAIL  src/modules/sales-orders/sales-order-items/__tests__/sales-order-item.spec.ts > SalesOrderItems API > GET /sales-orders/:salesOrderId/items/:itemId > should fail to get a specific item without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/sales-orders/sales-order-items/__tests__/sales-order-item.spec.ts:211:26
    209|         `/api/v1/sales-orders/${salesOrderId}/items/${createdSalesOrderItemId}`,
    210|       );
    211|       expect(res.status).toBe(401);
       |                          ^
    212|     });
    213|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[290/294]⎯

 FAIL  src/modules/sales-orders/sales-order-items/__tests__/sales-order-item.spec.ts > SalesOrderItems API > PUT /sales-orders/:salesOrderId/items/:itemId > should fail to update an item without authentication
AssertionError: expected 200 to be 401 // Object.is equality

- Expected
+ Received

- 401
+ 200

 ❯ src/modules/sales-orders/sales-order-items/__tests__/sales-order-item.spec.ts:288:26
    286|         .put(`/api/v1/sales-orders/${currentSalesOrderId}/items/${currentSalesOrderItemId}`)
    287|         .send(updateData);
    288|       expect(res.status).toBe(401);
       |                          ^
    289|     });
    290|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[291/294]⎯


 Test Files  36 failed | 12 passed (48)
      Tests  294 failed | 538 passed (832)
   Start at  18:39:54
   Duration  111.87s (transform 35.90s, setup 72.14s, collect 3.50s, tests 31.59s, environment 2ms, prepare 2.21s)
