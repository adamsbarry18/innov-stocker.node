import { BaseRouter } from '@/common/routing/BaseRouter';
import {
  Get,
  Post,
  authorize,
  paginate,
  sortable,
  filterable,
  searchable,
} from '@/common/routing/decorators';
import { Request, Response, NextFunction } from '@/config/http';
import { SecurityLevel } from '@/modules/users/models/users.entity';
import {
  CreateCashRegisterTransactionInput,
  CashRegisterTransactionType,
} from './models/cash-register-transaction.entity';
import { BadRequestError, UnauthorizedError } from '@/common/errors/httpErrors';
import { CashRegisterTransactionService } from './services/cash-register-transaction.service';
import { buildTypeORMCriteria } from '@/common/utils/queryParsingUtils';

export default class CashRegisterTransactionRouter extends BaseRouter {
  private service = CashRegisterTransactionService.getInstance();

  /**
   * @openapi
   * /cash-register-transactions:
   *   post:
   *     summary: Record a manual cash register transaction (e.g., expense, other income)
   *     description: Use for transactions not automatically generated by sales payments or session opening/closing.
   *     tags: [Cash Register Transactions]
   *     security: [{ bearerAuth: [] }]
   *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             $ref: '#/components/schemas/CreateCashRegisterTransactionInput'
   *     responses:
   *       201:
   *         description: Transaction recorded successfully
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/CashRegisterTransactionApiResponse'
   *       400:
   *         $ref: '#/components/responses/BadRequest'
   *       401:
   *         $ref: '#/components/responses/Unauthorized'
   *       403:
   *         $ref: '#/components/responses/Forbidden'
   *       404:
   *         $ref: '#/components/responses/NotFound'
   */
  @Post('/cash-register-transactions')
  @authorize({ level: SecurityLevel.USER })
  async createManualTransaction(req: Request, res: Response, next: NextFunction): Promise<void> {
    const input: CreateCashRegisterTransactionInput = req.body;
    const userId = req.user?.id;
    if (!userId) return next(new UnauthorizedError('User ID not found.'));

    const allowedManualTypes = [
      CashRegisterTransactionType.CASH_IN_OTHER,
      CashRegisterTransactionType.CASH_OUT_OTHER,
      CashRegisterTransactionType.CASH_OUT_EXPENSE,
      // CASH_DEPOSIT_TO_BANK and CASH_WITHDRAWAL_FROM_BANK might have dedicated UIs/flows
    ];
    if (!allowedManualTypes.includes(input.type)) {
      return next(
        new BadRequestError(
          `Invalid transaction type '${input.type}' for manual entry. Allowed: ${allowedManualTypes.join(', ')}.`,
        ),
      );
    }

    const fullInput = { ...input, userId: input.userId || userId };

    await this.pipe(res, req, next, () => this.service.createTransaction(fullInput), 201);
  }

  /**
   * @openapi
   * /cash-register-transactions:
   *   get:
   *     summary: Get all cash register transactions
   *     tags: [Cash Register Transactions]
   *     security: [{ bearerAuth: [] }]
   *     parameters:
   *       - $ref: '#/components/parameters/pageQueryParam'
   *       - $ref: '#/components/parameters/limitQueryParam'
   *       - $ref: '#/components/parameters/sortByQueryParam' # e.g., transactionTimestamp, type, amount
   *       - $ref: '#/components/parameters/orderQueryParam'
   *       - name: cashRegisterSessionId
   *         in: query
   *         schema: { type: integer }
   *         description: Filter by cash register session ID
   *       - name: type
   *         in: query
   *         schema: { type: string, enum: [cash_in_pos_sale, cash_out_expense, cash_in_other, cash_out_other, cash_deposit_to_bank, cash_withdrawal_from_bank, opening_float, closing_removal] }
   *         description: Filter by transaction type
   *       - name: userId
   *         in: query
   *         schema: { type: integer }
   *         description: Filter by user ID
   *       - name: relatedSalesOrderId
   *         in: query
   *         schema: { type: integer }
   *         description: Filter by related sales order ID
   *       - name: transactionDateFrom
   *         in: query
   *         schema: { type: string, format: date }
   *         description: Filter by transaction date (from)
   *       - name: transactionDateTo
   *         in: query
   *         schema: { type: string, format: date }
   *         description: Filter by transaction date (to)
   *       - name: q
   *         in: query
   *         schema: { type: string }
   *         description: Search term for description
   *     responses:
   *       200:
   *         description: List of cash register transactions
   *         content:
   *           application/json:
   *             schema:
   *               type: object
   *               properties:
   *                 transactions:
   *                   type: array
   *                   items:
   *                     $ref: '#/components/schemas/CashRegisterTransactionApiResponse'
   *                 total:
   *                   type: integer

   *       401:
   *         $ref: '#/components/responses/Unauthorized'
   *       403:
   *         $ref: '#/components/responses/Forbidden'
   */
  @Get('/cash-register-transactions')
  @authorize({ level: SecurityLevel.USER })
  @paginate()
  @sortable(['id', 'transactionTimestamp', 'type', 'amount', 'userId', 'createdAt'])
  @filterable(['cashRegisterSessionId', 'type', 'userId', 'paymentMethodId', 'relatedSalesOrderId'])
  @searchable(['description'])
  async listTransactions(req: Request, res: Response, next: NextFunction): Promise<void> {
    const { filters, sort } = buildTypeORMCriteria(req);

    await this.pipe(res, req, next, () =>
      this.service.findAllTransactions({
        limit: req.pagination?.limit,
        offset: req.pagination?.offset,
        filters,
        sort,
      }),
    );
  }

  /**
   * @openapi
   * /cash-register-transactions/{id}:
   *   get:
   *     summary: Get a specific cash register transaction by its ID
   *     tags: [Cash Register Transactions]
   *     security: [{ bearerAuth: [] }]
   *     parameters:
   *       - name: id
   *         in: path
   *         required: true
   *         schema: { type: integer } # ID is BIGINT, but integer is fine for OpenAPI spec
   *         description: Cash Register Transaction ID
   *     responses:
   *       200:
   *         description: Transaction found
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/CashRegisterTransactionApiResponse'
   *       400:
   *         $ref: '#/components/responses/BadRequest'
   *       401:
   *         $ref: '#/components/responses/Unauthorized'
   *       403:
   *         $ref: '#/components/responses/Forbidden'
   *       404:
   *         $ref: '#/components/responses/NotFound'
   */
  @Get('/cash-register-transactions/:id')
  @authorize({ level: SecurityLevel.USER })
  async getTransactionById(req: Request, res: Response, next: NextFunction): Promise<void> {
    const transactionId = parseInt(req.params.id, 10);
    if (isNaN(transactionId)) {
      return next(new BadRequestError('Invalid ID format.'));
    }
    await this.pipe(res, req, next, () => this.service.findTransactionById(transactionId));
  }

  // No PUT or DELETE for cash register transactions as they are typically immutable.
  // Errors are corrected with new, counter-transactions.
}
