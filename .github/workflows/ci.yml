name: CI/CD Azure via GHCR

on:
  push:
    branches: ['main', 'dev']
  # AJOUTEZ OU ASSUREZ-VOUS QUE CE BLOC EST PRÉSENT
  pull_request:
    branches: ['main', 'dev']
    # types: [opened, reopened, synchronize, ready_for_review] # Vous pouvez affiner les types si besoin
  # Permet le déclenchement manuel du job 'deploy' depuis l'interface GitHub Actions
  workflow_dispatch:

jobs:
  # ==========================================
  # Job: Test
  # ==========================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Optionnel: Linting/Formatting
      - name: Lint code
        run: npm run lint
      - name: Check formatting
        run: npm run format

      - name: Ensure test services are stopped
        # Arrête et supprime les conteneurs/volumes précédents via le script npm
        run: npm run test-db:stop
        # Continue même si la commande échoue (par exemple, si les conteneurs n'existaient pas)
        continue-on-error: true

      - name: Start test services
        # Utilise --wait pour attendre que les conteneurs avec healthcheck soient sains (mysql-test, redis-test)
        run: docker compose -f src/tests/docker-compose.yml up -d --wait

      - name: Wait for services to stabilize
        run: sleep 10s

      - name: Run tests
        # npm test utilise 'dotenv -e .env.test', donc les variables ci-dessus seront chargées
        run: npm test

      - name: Stop test services
        if: always()
        run: docker compose -f src/tests/docker-compose.yml down -v

  # ==========================================
  # Job: Build and Push Docker Image
  # ==========================================
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push'
    needs: test

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/adamsbarry18/innov-stocker-app
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===========================================
  # Job: Deploy to vercel
  # ===========================================
  deploy-webapp:
    name: Deploy to Azure Web App
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          images: ghcr.io/${{ github.repository_owner }}/innov-stocker-app:latest